//
// Created by xia__mc on 2024/12/9.
//

#include "SIMDLowAVX512.h"
#include "utils/simd/SIMDHelper.h"
#include "utils/simd/SIMDUtils.h"
#include "utils/PythonUtils.h"


static __forceinline PyObject *SIMDLowAVX512__mm512_int2mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask2int_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_mask2int(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 9) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 9 arguments.");
        return nullptr;
    }

    long long arg1 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 1));
    long long arg2 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 2));
    long long arg3 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 3));
    long long arg4 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 4));
    long long arg5 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 5));
    long long arg6 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 6));
    long long arg7 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 7));
    long long arg8 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 8));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_set_epi64(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 17) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 17 arguments.");
        return nullptr;
    }

    int arg1 = (int) PyFast_AsInt(*(((PyObject **) args) + 1));
    int arg2 = (int) PyFast_AsInt(*(((PyObject **) args) + 2));
    int arg3 = (int) PyFast_AsInt(*(((PyObject **) args) + 3));
    int arg4 = (int) PyFast_AsInt(*(((PyObject **) args) + 4));
    int arg5 = (int) PyFast_AsInt(*(((PyObject **) args) + 5));
    int arg6 = (int) PyFast_AsInt(*(((PyObject **) args) + 6));
    int arg7 = (int) PyFast_AsInt(*(((PyObject **) args) + 7));
    int arg8 = (int) PyFast_AsInt(*(((PyObject **) args) + 8));
    int arg9 = (int) PyFast_AsInt(*(((PyObject **) args) + 9));
    int arg10 = (int) PyFast_AsInt(*(((PyObject **) args) + 10));
    int arg11 = (int) PyFast_AsInt(*(((PyObject **) args) + 11));
    int arg12 = (int) PyFast_AsInt(*(((PyObject **) args) + 12));
    int arg13 = (int) PyFast_AsInt(*(((PyObject **) args) + 13));
    int arg14 = (int) PyFast_AsInt(*(((PyObject **) args) + 14));
    int arg15 = (int) PyFast_AsInt(*(((PyObject **) args) + 15));
    int arg16 = (int) PyFast_AsInt(*(((PyObject **) args) + 16));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_set_epi32(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 33) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 33 arguments.");
        return nullptr;
    }

    short arg1 = (short) PyFast_AsShort(*(((PyObject **) args) + 1));
    short arg2 = (short) PyFast_AsShort(*(((PyObject **) args) + 2));
    short arg3 = (short) PyFast_AsShort(*(((PyObject **) args) + 3));
    short arg4 = (short) PyFast_AsShort(*(((PyObject **) args) + 4));
    short arg5 = (short) PyFast_AsShort(*(((PyObject **) args) + 5));
    short arg6 = (short) PyFast_AsShort(*(((PyObject **) args) + 6));
    short arg7 = (short) PyFast_AsShort(*(((PyObject **) args) + 7));
    short arg8 = (short) PyFast_AsShort(*(((PyObject **) args) + 8));
    short arg9 = (short) PyFast_AsShort(*(((PyObject **) args) + 9));
    short arg10 = (short) PyFast_AsShort(*(((PyObject **) args) + 10));
    short arg11 = (short) PyFast_AsShort(*(((PyObject **) args) + 11));
    short arg12 = (short) PyFast_AsShort(*(((PyObject **) args) + 12));
    short arg13 = (short) PyFast_AsShort(*(((PyObject **) args) + 13));
    short arg14 = (short) PyFast_AsShort(*(((PyObject **) args) + 14));
    short arg15 = (short) PyFast_AsShort(*(((PyObject **) args) + 15));
    short arg16 = (short) PyFast_AsShort(*(((PyObject **) args) + 16));
    short arg17 = (short) PyFast_AsShort(*(((PyObject **) args) + 17));
    short arg18 = (short) PyFast_AsShort(*(((PyObject **) args) + 18));
    short arg19 = (short) PyFast_AsShort(*(((PyObject **) args) + 19));
    short arg20 = (short) PyFast_AsShort(*(((PyObject **) args) + 20));
    short arg21 = (short) PyFast_AsShort(*(((PyObject **) args) + 21));
    short arg22 = (short) PyFast_AsShort(*(((PyObject **) args) + 22));
    short arg23 = (short) PyFast_AsShort(*(((PyObject **) args) + 23));
    short arg24 = (short) PyFast_AsShort(*(((PyObject **) args) + 24));
    short arg25 = (short) PyFast_AsShort(*(((PyObject **) args) + 25));
    short arg26 = (short) PyFast_AsShort(*(((PyObject **) args) + 26));
    short arg27 = (short) PyFast_AsShort(*(((PyObject **) args) + 27));
    short arg28 = (short) PyFast_AsShort(*(((PyObject **) args) + 28));
    short arg29 = (short) PyFast_AsShort(*(((PyObject **) args) + 29));
    short arg30 = (short) PyFast_AsShort(*(((PyObject **) args) + 30));
    short arg31 = (short) PyFast_AsShort(*(((PyObject **) args) + 31));
    short arg32 = (short) PyFast_AsShort(*(((PyObject **) args) + 32));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_set_epi16(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 65) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 65 arguments.");
        return nullptr;
    }

    char arg1 = (char) PyFast_AsChar(*(((PyObject **) args) + 1));
    char arg2 = (char) PyFast_AsChar(*(((PyObject **) args) + 2));
    char arg3 = (char) PyFast_AsChar(*(((PyObject **) args) + 3));
    char arg4 = (char) PyFast_AsChar(*(((PyObject **) args) + 4));
    char arg5 = (char) PyFast_AsChar(*(((PyObject **) args) + 5));
    char arg6 = (char) PyFast_AsChar(*(((PyObject **) args) + 6));
    char arg7 = (char) PyFast_AsChar(*(((PyObject **) args) + 7));
    char arg8 = (char) PyFast_AsChar(*(((PyObject **) args) + 8));
    char arg9 = (char) PyFast_AsChar(*(((PyObject **) args) + 9));
    char arg10 = (char) PyFast_AsChar(*(((PyObject **) args) + 10));
    char arg11 = (char) PyFast_AsChar(*(((PyObject **) args) + 11));
    char arg12 = (char) PyFast_AsChar(*(((PyObject **) args) + 12));
    char arg13 = (char) PyFast_AsChar(*(((PyObject **) args) + 13));
    char arg14 = (char) PyFast_AsChar(*(((PyObject **) args) + 14));
    char arg15 = (char) PyFast_AsChar(*(((PyObject **) args) + 15));
    char arg16 = (char) PyFast_AsChar(*(((PyObject **) args) + 16));
    char arg17 = (char) PyFast_AsChar(*(((PyObject **) args) + 17));
    char arg18 = (char) PyFast_AsChar(*(((PyObject **) args) + 18));
    char arg19 = (char) PyFast_AsChar(*(((PyObject **) args) + 19));
    char arg20 = (char) PyFast_AsChar(*(((PyObject **) args) + 20));
    char arg21 = (char) PyFast_AsChar(*(((PyObject **) args) + 21));
    char arg22 = (char) PyFast_AsChar(*(((PyObject **) args) + 22));
    char arg23 = (char) PyFast_AsChar(*(((PyObject **) args) + 23));
    char arg24 = (char) PyFast_AsChar(*(((PyObject **) args) + 24));
    char arg25 = (char) PyFast_AsChar(*(((PyObject **) args) + 25));
    char arg26 = (char) PyFast_AsChar(*(((PyObject **) args) + 26));
    char arg27 = (char) PyFast_AsChar(*(((PyObject **) args) + 27));
    char arg28 = (char) PyFast_AsChar(*(((PyObject **) args) + 28));
    char arg29 = (char) PyFast_AsChar(*(((PyObject **) args) + 29));
    char arg30 = (char) PyFast_AsChar(*(((PyObject **) args) + 30));
    char arg31 = (char) PyFast_AsChar(*(((PyObject **) args) + 31));
    char arg32 = (char) PyFast_AsChar(*(((PyObject **) args) + 32));
    char arg33 = (char) PyFast_AsChar(*(((PyObject **) args) + 33));
    char arg34 = (char) PyFast_AsChar(*(((PyObject **) args) + 34));
    char arg35 = (char) PyFast_AsChar(*(((PyObject **) args) + 35));
    char arg36 = (char) PyFast_AsChar(*(((PyObject **) args) + 36));
    char arg37 = (char) PyFast_AsChar(*(((PyObject **) args) + 37));
    char arg38 = (char) PyFast_AsChar(*(((PyObject **) args) + 38));
    char arg39 = (char) PyFast_AsChar(*(((PyObject **) args) + 39));
    char arg40 = (char) PyFast_AsChar(*(((PyObject **) args) + 40));
    char arg41 = (char) PyFast_AsChar(*(((PyObject **) args) + 41));
    char arg42 = (char) PyFast_AsChar(*(((PyObject **) args) + 42));
    char arg43 = (char) PyFast_AsChar(*(((PyObject **) args) + 43));
    char arg44 = (char) PyFast_AsChar(*(((PyObject **) args) + 44));
    char arg45 = (char) PyFast_AsChar(*(((PyObject **) args) + 45));
    char arg46 = (char) PyFast_AsChar(*(((PyObject **) args) + 46));
    char arg47 = (char) PyFast_AsChar(*(((PyObject **) args) + 47));
    char arg48 = (char) PyFast_AsChar(*(((PyObject **) args) + 48));
    char arg49 = (char) PyFast_AsChar(*(((PyObject **) args) + 49));
    char arg50 = (char) PyFast_AsChar(*(((PyObject **) args) + 50));
    char arg51 = (char) PyFast_AsChar(*(((PyObject **) args) + 51));
    char arg52 = (char) PyFast_AsChar(*(((PyObject **) args) + 52));
    char arg53 = (char) PyFast_AsChar(*(((PyObject **) args) + 53));
    char arg54 = (char) PyFast_AsChar(*(((PyObject **) args) + 54));
    char arg55 = (char) PyFast_AsChar(*(((PyObject **) args) + 55));
    char arg56 = (char) PyFast_AsChar(*(((PyObject **) args) + 56));
    char arg57 = (char) PyFast_AsChar(*(((PyObject **) args) + 57));
    char arg58 = (char) PyFast_AsChar(*(((PyObject **) args) + 58));
    char arg59 = (char) PyFast_AsChar(*(((PyObject **) args) + 59));
    char arg60 = (char) PyFast_AsChar(*(((PyObject **) args) + 60));
    char arg61 = (char) PyFast_AsChar(*(((PyObject **) args) + 61));
    char arg62 = (char) PyFast_AsChar(*(((PyObject **) args) + 62));
    char arg63 = (char) PyFast_AsChar(*(((PyObject **) args) + 63));
    char arg64 = (char) PyFast_AsChar(*(((PyObject **) args) + 64));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_set_epi8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 9) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 9 arguments.");
        return nullptr;
    }

    double arg1 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 1));
    double arg2 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 2));
    double arg3 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 3));
    double arg4 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 4));
    double arg5 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 5));
    double arg6 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 6));
    double arg7 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 7));
    double arg8 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 8));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_set_pd(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 17) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 17 arguments.");
        return nullptr;
    }

    float arg1 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 1));
    float arg2 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 2));
    float arg3 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 3));
    float arg4 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 4));
    float arg5 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 5));
    float arg6 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 6));
    float arg7 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 7));
    float arg8 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 8));
    float arg9 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 9));
    float arg10 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 10));
    float arg11 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 11));
    float arg12 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 12));
    float arg13 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 13));
    float arg14 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 14));
    float arg15 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 15));
    float arg16 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 16));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_set_ps(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_undefined_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 1) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 1 arguments.");
        return nullptr;
    }



    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_undefined_ps();

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_undefined_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 1) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 1 arguments.");
        return nullptr;
    }



    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_undefined_pd();

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_undefined_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 1) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 1 arguments.");
        return nullptr;
    }



    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_undefined_epi32();

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set1_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    char arg1 = (char) PyFast_AsChar(*(((PyObject **) args) + 1));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_set1_epi8(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set1_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    short arg1 = (short) PyFast_AsShort(*(((PyObject **) args) + 1));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_set1_epi16(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set1_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    double arg1 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 1));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_set1_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set1_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    float arg1 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 1));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_set1_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set4_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set4_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    long long arg1 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 1));
    long long arg2 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 2));
    long long arg3 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 3));
    long long arg4 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 4));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_set4_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set4_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    double arg1 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 1));
    double arg2 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 2));
    double arg3 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 3));
    double arg4 = (double) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 4));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_set4_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set4_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    float arg1 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 1));
    float arg2 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 2));
    float arg3 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 3));
    float arg4 = (float) (float) PyFloat_AS_DOUBLE(*(((PyObject **) args) + 4));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_set4_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_setzero_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 1) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 1 arguments.");
        return nullptr;
    }



    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_setzero_ps();

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_setzero_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 1) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 1 arguments.");
        return nullptr;
    }



    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_setzero();

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_setzero_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 1) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 1 arguments.");
        return nullptr;
    }



    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_setzero_pd();

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_setzero_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 1) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 1 arguments.");
        return nullptr;
    }



    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_setzero_epi32();

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_setzero_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 1) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 1 arguments.");
        return nullptr;
    }



    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_setzero_si512();

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mov_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mov_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mov_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_mov_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mov_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mov_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mov_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_mov_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_load_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_load_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_load_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_load_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_load_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_load_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_store_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_store_pd(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_store_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_store_pd(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_load_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_load_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_load_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_load_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_load_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_load_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_store_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_store_ps(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_store_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_store_ps(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mov_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mov_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mov_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_mov_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_load_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_load_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_load_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_load_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_load_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_load_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_store_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_store_epi64(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_store_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_store_epi64(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mov_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mov_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mov_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_mov_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_load_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_load_si512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_load_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_load_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_load_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_load_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_load_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_load_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_store_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_store_si512(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_store_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_store_epi32(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_store_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_store_epi32(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mullo_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mullo_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mullo_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_mullo_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mullo_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mullo_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mullox_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mullox_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mullox_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mullox_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sllv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_sllv_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sllv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sllv_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sllv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sllv_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srav_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srav_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srav_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srav_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srav_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srav_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srlv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srlv_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srlv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srlv_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srlv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srlv_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_add_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_add_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_add_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_add_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_add_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_add_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sub_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_sub_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sub_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sub_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sub_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sub_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sllv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_sllv_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sllv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sllv_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sllv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sllv_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srav_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srav_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srav_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srav_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srav_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srav_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srlv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srlv_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srlv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srlv_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srlv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srlv_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_add_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_add_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_add_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_add_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_add_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_add_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mul_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mul_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mul_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mul_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mul_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_mul_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sub_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_sub_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sub_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sub_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sub_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sub_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mul_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mul_epu32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mul_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mul_epu32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mul_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_mul_epu32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_slli_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned int arg2 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 2));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_slli_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_slli_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    unsigned int arg4 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 4));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_slli_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_slli_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    unsigned int arg3 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 3));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_slli_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sll_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_sll_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sll_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128i arg4 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sll_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sll_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sll_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srli_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned int arg2 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 2));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srli_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srli_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    unsigned int arg4 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 4));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srli_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srli_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    unsigned int arg3 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 3));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srli_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srl_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srl_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srl_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128i arg4 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srl_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srl_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srl_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srai_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned int arg2 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 2));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srai_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srai_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    unsigned int arg4 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 4));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srai_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srai_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    unsigned int arg3 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 3));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srai_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sra_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_sra_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sra_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128i arg4 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sra_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sra_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sra_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_slli_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned int arg2 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 2));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_slli_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_slli_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    unsigned int arg4 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 4));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_slli_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_slli_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    unsigned int arg3 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 3));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_slli_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sll_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_sll_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sll_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128i arg4 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sll_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sll_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sll_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srli_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned int arg2 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 2));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srli_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srli_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    unsigned int arg4 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 4));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srli_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srli_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    unsigned int arg3 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 3));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srli_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srl_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srl_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srl_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128i arg4 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srl_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srl_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srl_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_srai_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned int arg2 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 2));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_srai_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_srai_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    unsigned int arg4 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 4));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_srai_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_srai_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    unsigned int arg3 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 3));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_srai_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sra_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_sra_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sra_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128i arg4 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sra_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sra_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sra_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_add_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_add_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_add_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_add_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_add_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_add_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_sub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_sub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_sub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_sub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_sub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_sub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_ternarylogic_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_ternarylogic_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_ternarylogic_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_ternarylogic_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_ternarylogic_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_ternarylogic_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rcp14_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_rcp14_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rcp14_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_rcp14_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rcp14_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_rcp14_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rcp14_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_rcp14_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rcp14_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_rcp14_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rcp14_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_rcp14_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_rcp14_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_rcp14_sd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_rcp14_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_rcp14_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_rcp14_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_rcp14_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_rcp14_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_rcp14_ss(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_rcp14_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_rcp14_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_rcp14_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_rcp14_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rsqrt14_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_rsqrt14_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rsqrt14_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_rsqrt14_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rsqrt14_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_rsqrt14_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rsqrt14_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_rsqrt14_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rsqrt14_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_rsqrt14_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rsqrt14_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_rsqrt14_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_rsqrt14_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_rsqrt14_sd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_rsqrt14_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_rsqrt14_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_rsqrt14_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_rsqrt14_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_rsqrt14_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_rsqrt14_ss(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_rsqrt14_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_rsqrt14_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_rsqrt14_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_rsqrt14_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sqrt_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sqrt_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sqrt_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sqrt_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sqrt_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sqrt_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_sqrt_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_sqrt_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_sqrt_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_sqrt_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_sqrt_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_sqrt_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi8_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi8_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi8_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi8_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi8_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi8_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi8_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi8_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi8_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi8_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi8_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi8_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi16_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi16_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi16_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256i arg3 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi16_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi16_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256i arg2 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi16_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi16_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi16_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi16_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi16_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi16_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi16_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi32_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi32_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256i arg3 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi32_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256i arg2 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi32_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepu8_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepu8_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepu8_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepu8_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepu8_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepu8_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepu8_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepu8_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepu8_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepu8_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepu8_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepu8_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepu16_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepu16_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepu16_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256i arg3 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepu16_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepu16_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256i arg2 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepu16_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepu16_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepu16_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepu16_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepu16_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepu16_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepu16_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepu32_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepu32_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepu32_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256i arg3 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepu32_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepu32_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256i arg2 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepu32_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_add_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    const int arg3 = (const int) PyFast_AsInt(*(((PyObject **) args) + 3));


switch (arg3) {
case 0:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_add_round_pd(arg1, arg2, 0);
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_add_round_pd(arg1, arg2, 1);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_add_round_pd(arg1, arg2, 2);
break;
case 3:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_add_round_pd(arg1, arg2, 3);
break;
case 4:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_add_round_pd(arg1, arg2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_add_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_add_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_add_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_add_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_add_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    const int arg3 = (const int) PyFast_AsInt(*(((PyObject **) args) + 3));


switch (arg3) {
case 0:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_sub_round_ps(arg1, arg2, 0);
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_sub_round_ps(arg1, arg2, 1);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_sub_round_ps(arg1, arg2, 2);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_sub_round_ps(arg1, arg2, 3);
break;
case 4:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_sub_round_ps(arg1, arg2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mul_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mul_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mul_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mul_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    const int arg3 = (const int) PyFast_AsInt(*(((PyObject **) args) + 3));


switch (arg3) {
case 0:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mul_round_ps(arg1, arg2, 0);
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mul_round_ps(arg1, arg2, 1);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mul_round_ps(arg1, arg2, 2);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mul_round_ps(arg1, arg2, 3);
break;
case 4:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mul_round_ps(arg1, arg2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mul_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mul_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_div_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    const int arg3 = (const int) PyFast_AsInt(*(((PyObject **) args) + 3));


switch (arg3) {
case 0:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_div_round_pd(arg1, arg2, 0);
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_div_round_pd(arg1, arg2, 1);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_div_round_pd(arg1, arg2, 2);
break;
case 3:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_div_round_pd(arg1, arg2, 3);
break;
case 4:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_div_round_pd(arg1, arg2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_div_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_div_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_div_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_div_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_div_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mul_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_mul_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_mul_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mul_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_mul_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_mul_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_div_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_div_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_div_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_div_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_div_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_div_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_max_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_max_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_max_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_max_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_max_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_max_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_min_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_min_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_min_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_min_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_min_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_min_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_scalef_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_scalef_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_scalef_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_scalef_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_scalef_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_scalef_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_scalef_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_scalef_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_scalef_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_scalef_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_scalef_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_scalef_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmaddsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmaddsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmaddsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmaddsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmaddsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmaddsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmaddsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmaddsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmsubadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmsubadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmsubadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmsubadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmsubadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmsubadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmsubadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmsubadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fnmadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fnmadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fnmadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fnmadd_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fnmadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fnmadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fnmadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fnmadd_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fnmsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fnmsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fnmsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fnmsub_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fnmsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fnmsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fnmsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fnmsub_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_abs_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_abs_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_abs_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_abs_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_abs_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_abs_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_abs_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_abs_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_abs_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_abs_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_abs_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_abs_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_broadcastss_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_broadcastss_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_broadcastss_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_broadcastss_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_broadcastss_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_broadcastss_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_broadcastsd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_broadcastsd_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_broadcastsd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_broadcastsd_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_broadcastsd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_broadcastsd_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_broadcastd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_broadcastd_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_broadcastd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_broadcastd_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_broadcastd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_broadcastd_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set1_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_set1_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_set1_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_broadcastq_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_broadcastq_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_broadcastq_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_broadcastq_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_broadcastq_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_broadcastq_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_set1_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    long long arg1 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 1));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_set1_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_set1_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    long long arg3 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 3));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_set1_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_set1_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    long long arg2 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 2));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_set1_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_broadcast_f32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_broadcast_f32x4(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_broadcast_f32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_broadcast_f32x4(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_broadcast_f32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_broadcast_f32x4(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_broadcast_i32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_broadcast_i32x4(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_broadcast_i32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128i arg3 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_broadcast_i32x4(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_broadcast_i32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128i arg2 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_broadcast_i32x4(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_broadcast_f64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256d arg1 = (__m256d) *((__m256d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_broadcast_f64x4(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_broadcast_f64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256d arg3 = (__m256d) *((__m256d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_broadcast_f64x4(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_broadcast_f64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256d arg2 = (__m256d) *((__m256d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_broadcast_f64x4(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_broadcast_i64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_broadcast_i64x4(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_broadcast_i64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256i arg3 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_broadcast_i64x4(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_broadcast_i64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256i arg2 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_broadcast_i64x4(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_shuffle_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    _MM_PERM_ENUM arg2 = (_MM_PERM_ENUM) PyFast_AsChar(*(((PyObject **) args) + 2));


switch (arg2) {
case 0:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 0);
break;
case 1:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 1);
break;
case 2:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 2);
break;
case 3:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 3);
break;
case 4:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 4);
break;
case 5:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 5);
break;
case 6:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 6);
break;
case 7:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 7);
break;
case 8:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 8);
break;
case 9:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 9);
break;
case 10:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 10);
break;
case 11:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 11);
break;
case 12:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 12);
break;
case 13:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 13);
break;
case 14:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 14);
break;
case 15:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 15);
break;
case 16:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 16);
break;
case 17:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 17);
break;
case 18:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 18);
break;
case 19:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 19);
break;
case 20:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 20);
break;
case 21:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 21);
break;
case 22:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 22);
break;
case 23:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 23);
break;
case 24:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 24);
break;
case 25:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 25);
break;
case 26:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 26);
break;
case 27:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 27);
break;
case 28:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 28);
break;
case 29:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 29);
break;
case 30:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 30);
break;
case 31:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 31);
break;
case 32:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 32);
break;
case 33:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 33);
break;
case 34:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 34);
break;
case 35:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 35);
break;
case 36:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 36);
break;
case 37:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 37);
break;
case 38:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 38);
break;
case 39:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 39);
break;
case 40:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 40);
break;
case 41:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 41);
break;
case 42:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 42);
break;
case 43:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 43);
break;
case 44:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 44);
break;
case 45:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 45);
break;
case 46:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 46);
break;
case 47:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 47);
break;
case 48:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 48);
break;
case 49:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 49);
break;
case 50:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 50);
break;
case 51:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 51);
break;
case 52:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 52);
break;
case 53:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 53);
break;
case 54:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 54);
break;
case 55:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 55);
break;
case 56:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 56);
break;
case 57:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 57);
break;
case 58:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 58);
break;
case 59:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 59);
break;
case 60:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 60);
break;
case 61:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 61);
break;
case 62:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 62);
break;
case 63:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 63);
break;
case 64:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 64);
break;
case 65:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 65);
break;
case 66:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 66);
break;
case 67:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 67);
break;
case 68:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 68);
break;
case 69:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 69);
break;
case 70:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 70);
break;
case 71:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 71);
break;
case 72:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 72);
break;
case 73:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 73);
break;
case 74:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 74);
break;
case 75:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 75);
break;
case 76:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 76);
break;
case 77:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 77);
break;
case 78:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 78);
break;
case 79:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 79);
break;
case 80:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 80);
break;
case 81:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 81);
break;
case 82:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 82);
break;
case 83:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 83);
break;
case 84:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 84);
break;
case 85:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 85);
break;
case 86:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 86);
break;
case 87:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 87);
break;
case 88:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 88);
break;
case 89:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 89);
break;
case 90:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 90);
break;
case 91:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 91);
break;
case 92:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 92);
break;
case 93:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 93);
break;
case 94:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 94);
break;
case 95:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 95);
break;
case 96:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 96);
break;
case 97:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 97);
break;
case 98:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 98);
break;
case 99:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 99);
break;
case 100:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 100);
break;
case 101:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 101);
break;
case 102:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 102);
break;
case 103:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 103);
break;
case 104:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 104);
break;
case 105:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 105);
break;
case 106:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 106);
break;
case 107:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 107);
break;
case 108:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 108);
break;
case 109:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 109);
break;
case 110:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 110);
break;
case 111:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 111);
break;
case 112:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 112);
break;
case 113:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 113);
break;
case 114:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 114);
break;
case 115:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 115);
break;
case 116:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 116);
break;
case 117:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 117);
break;
case 118:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 118);
break;
case 119:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 119);
break;
case 120:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 120);
break;
case 121:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 121);
break;
case 122:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 122);
break;
case 123:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 123);
break;
case 124:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 124);
break;
case 125:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 125);
break;
case 126:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 126);
break;
case 127:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 127);
break;
case 128:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 128);
break;
case 129:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 129);
break;
case 130:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 130);
break;
case 131:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 131);
break;
case 132:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 132);
break;
case 133:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 133);
break;
case 134:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 134);
break;
case 135:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 135);
break;
case 136:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 136);
break;
case 137:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 137);
break;
case 138:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 138);
break;
case 139:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 139);
break;
case 140:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 140);
break;
case 141:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 141);
break;
case 142:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 142);
break;
case 143:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 143);
break;
case 144:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 144);
break;
case 145:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 145);
break;
case 146:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 146);
break;
case 147:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 147);
break;
case 148:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 148);
break;
case 149:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 149);
break;
case 150:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 150);
break;
case 151:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 151);
break;
case 152:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 152);
break;
case 153:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 153);
break;
case 154:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 154);
break;
case 155:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 155);
break;
case 156:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 156);
break;
case 157:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 157);
break;
case 158:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 158);
break;
case 159:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 159);
break;
case 160:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 160);
break;
case 161:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 161);
break;
case 162:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 162);
break;
case 163:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 163);
break;
case 164:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 164);
break;
case 165:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 165);
break;
case 166:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 166);
break;
case 167:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 167);
break;
case 168:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 168);
break;
case 169:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 169);
break;
case 170:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 170);
break;
case 171:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 171);
break;
case 172:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 172);
break;
case 173:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 173);
break;
case 174:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 174);
break;
case 175:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 175);
break;
case 176:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 176);
break;
case 177:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 177);
break;
case 178:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 178);
break;
case 179:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 179);
break;
case 180:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 180);
break;
case 181:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 181);
break;
case 182:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 182);
break;
case 183:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 183);
break;
case 184:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 184);
break;
case 185:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 185);
break;
case 186:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 186);
break;
case 187:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 187);
break;
case 188:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 188);
break;
case 189:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 189);
break;
case 190:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 190);
break;
case 191:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 191);
break;
case 192:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 192);
break;
case 193:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 193);
break;
case 194:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 194);
break;
case 195:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 195);
break;
case 196:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 196);
break;
case 197:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 197);
break;
case 198:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 198);
break;
case 199:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 199);
break;
case 200:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 200);
break;
case 201:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 201);
break;
case 202:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 202);
break;
case 203:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 203);
break;
case 204:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 204);
break;
case 205:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 205);
break;
case 206:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 206);
break;
case 207:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 207);
break;
case 208:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 208);
break;
case 209:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 209);
break;
case 210:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 210);
break;
case 211:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 211);
break;
case 212:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 212);
break;
case 213:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 213);
break;
case 214:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 214);
break;
case 215:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 215);
break;
case 216:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 216);
break;
case 217:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 217);
break;
case 218:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 218);
break;
case 219:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 219);
break;
case 220:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 220);
break;
case 221:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 221);
break;
case 222:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 222);
break;
case 223:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 223);
break;
case 224:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 224);
break;
case 225:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 225);
break;
case 226:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 226);
break;
case 227:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 227);
break;
case 228:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 228);
break;
case 229:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 229);
break;
case 230:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 230);
break;
case 231:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 231);
break;
case 232:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 232);
break;
case 233:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 233);
break;
case 234:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 234);
break;
case 235:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 235);
break;
case 236:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 236);
break;
case 237:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 237);
break;
case 238:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 238);
break;
case 239:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 239);
break;
case 240:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 240);
break;
case 241:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 241);
break;
case 242:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 242);
break;
case 243:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 243);
break;
case 244:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 244);
break;
case 245:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 245);
break;
case 246:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 246);
break;
case 247:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 247);
break;
case 248:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 248);
break;
case 249:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 249);
break;
case 250:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 250);
break;
case 251:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 251);
break;
case 252:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 252);
break;
case 253:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 253);
break;
case 254:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 254);
break;
case 255:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_shuffle_epi32(arg1, 255);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_shuffle_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    _MM_PERM_ENUM arg4 = (_MM_PERM_ENUM) PyFast_AsChar(*(((PyObject **) args) + 4));


switch (arg4) {
case 0:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 0);
break;
case 1:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 1);
break;
case 2:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 2);
break;
case 3:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 3);
break;
case 4:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 4);
break;
case 5:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 5);
break;
case 6:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 6);
break;
case 7:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 7);
break;
case 8:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 8);
break;
case 9:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 9);
break;
case 10:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 10);
break;
case 11:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 11);
break;
case 12:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 12);
break;
case 13:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 13);
break;
case 14:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 14);
break;
case 15:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 15);
break;
case 16:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 16);
break;
case 17:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 17);
break;
case 18:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 18);
break;
case 19:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 19);
break;
case 20:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 20);
break;
case 21:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 21);
break;
case 22:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 22);
break;
case 23:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 23);
break;
case 24:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 24);
break;
case 25:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 25);
break;
case 26:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 26);
break;
case 27:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 27);
break;
case 28:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 28);
break;
case 29:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 29);
break;
case 30:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 30);
break;
case 31:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 31);
break;
case 32:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 32);
break;
case 33:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 33);
break;
case 34:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 34);
break;
case 35:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 35);
break;
case 36:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 36);
break;
case 37:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 37);
break;
case 38:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 38);
break;
case 39:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 39);
break;
case 40:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 40);
break;
case 41:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 41);
break;
case 42:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 42);
break;
case 43:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 43);
break;
case 44:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 44);
break;
case 45:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 45);
break;
case 46:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 46);
break;
case 47:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 47);
break;
case 48:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 48);
break;
case 49:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 49);
break;
case 50:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 50);
break;
case 51:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 51);
break;
case 52:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 52);
break;
case 53:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 53);
break;
case 54:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 54);
break;
case 55:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 55);
break;
case 56:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 56);
break;
case 57:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 57);
break;
case 58:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 58);
break;
case 59:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 59);
break;
case 60:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 60);
break;
case 61:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 61);
break;
case 62:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 62);
break;
case 63:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 63);
break;
case 64:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 64);
break;
case 65:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 65);
break;
case 66:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 66);
break;
case 67:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 67);
break;
case 68:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 68);
break;
case 69:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 69);
break;
case 70:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 70);
break;
case 71:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 71);
break;
case 72:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 72);
break;
case 73:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 73);
break;
case 74:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 74);
break;
case 75:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 75);
break;
case 76:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 76);
break;
case 77:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 77);
break;
case 78:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 78);
break;
case 79:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 79);
break;
case 80:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 80);
break;
case 81:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 81);
break;
case 82:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 82);
break;
case 83:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 83);
break;
case 84:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 84);
break;
case 85:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 85);
break;
case 86:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 86);
break;
case 87:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 87);
break;
case 88:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 88);
break;
case 89:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 89);
break;
case 90:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 90);
break;
case 91:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 91);
break;
case 92:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 92);
break;
case 93:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 93);
break;
case 94:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 94);
break;
case 95:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 95);
break;
case 96:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 96);
break;
case 97:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 97);
break;
case 98:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 98);
break;
case 99:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 99);
break;
case 100:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 100);
break;
case 101:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 101);
break;
case 102:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 102);
break;
case 103:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 103);
break;
case 104:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 104);
break;
case 105:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 105);
break;
case 106:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 106);
break;
case 107:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 107);
break;
case 108:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 108);
break;
case 109:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 109);
break;
case 110:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 110);
break;
case 111:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 111);
break;
case 112:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 112);
break;
case 113:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 113);
break;
case 114:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 114);
break;
case 115:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 115);
break;
case 116:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 116);
break;
case 117:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 117);
break;
case 118:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 118);
break;
case 119:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 119);
break;
case 120:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 120);
break;
case 121:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 121);
break;
case 122:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 122);
break;
case 123:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 123);
break;
case 124:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 124);
break;
case 125:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 125);
break;
case 126:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 126);
break;
case 127:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 127);
break;
case 128:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 128);
break;
case 129:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 129);
break;
case 130:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 130);
break;
case 131:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 131);
break;
case 132:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 132);
break;
case 133:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 133);
break;
case 134:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 134);
break;
case 135:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 135);
break;
case 136:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 136);
break;
case 137:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 137);
break;
case 138:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 138);
break;
case 139:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 139);
break;
case 140:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 140);
break;
case 141:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 141);
break;
case 142:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 142);
break;
case 143:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 143);
break;
case 144:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 144);
break;
case 145:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 145);
break;
case 146:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 146);
break;
case 147:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 147);
break;
case 148:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 148);
break;
case 149:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 149);
break;
case 150:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 150);
break;
case 151:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 151);
break;
case 152:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 152);
break;
case 153:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 153);
break;
case 154:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 154);
break;
case 155:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 155);
break;
case 156:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 156);
break;
case 157:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 157);
break;
case 158:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 158);
break;
case 159:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 159);
break;
case 160:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 160);
break;
case 161:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 161);
break;
case 162:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 162);
break;
case 163:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 163);
break;
case 164:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 164);
break;
case 165:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 165);
break;
case 166:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 166);
break;
case 167:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 167);
break;
case 168:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 168);
break;
case 169:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 169);
break;
case 170:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 170);
break;
case 171:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 171);
break;
case 172:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 172);
break;
case 173:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 173);
break;
case 174:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 174);
break;
case 175:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 175);
break;
case 176:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 176);
break;
case 177:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 177);
break;
case 178:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 178);
break;
case 179:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 179);
break;
case 180:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 180);
break;
case 181:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 181);
break;
case 182:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 182);
break;
case 183:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 183);
break;
case 184:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 184);
break;
case 185:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 185);
break;
case 186:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 186);
break;
case 187:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 187);
break;
case 188:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 188);
break;
case 189:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 189);
break;
case 190:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 190);
break;
case 191:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 191);
break;
case 192:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 192);
break;
case 193:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 193);
break;
case 194:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 194);
break;
case 195:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 195);
break;
case 196:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 196);
break;
case 197:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 197);
break;
case 198:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 198);
break;
case 199:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 199);
break;
case 200:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 200);
break;
case 201:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 201);
break;
case 202:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 202);
break;
case 203:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 203);
break;
case 204:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 204);
break;
case 205:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 205);
break;
case 206:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 206);
break;
case 207:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 207);
break;
case 208:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 208);
break;
case 209:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 209);
break;
case 210:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 210);
break;
case 211:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 211);
break;
case 212:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 212);
break;
case 213:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 213);
break;
case 214:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 214);
break;
case 215:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 215);
break;
case 216:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 216);
break;
case 217:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 217);
break;
case 218:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 218);
break;
case 219:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 219);
break;
case 220:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 220);
break;
case 221:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 221);
break;
case 222:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 222);
break;
case 223:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 223);
break;
case 224:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 224);
break;
case 225:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 225);
break;
case 226:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 226);
break;
case 227:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 227);
break;
case 228:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 228);
break;
case 229:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 229);
break;
case 230:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 230);
break;
case 231:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 231);
break;
case 232:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 232);
break;
case 233:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 233);
break;
case 234:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 234);
break;
case 235:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 235);
break;
case 236:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 236);
break;
case 237:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 237);
break;
case 238:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 238);
break;
case 239:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 239);
break;
case 240:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 240);
break;
case 241:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 241);
break;
case 242:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 242);
break;
case 243:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 243);
break;
case 244:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 244);
break;
case 245:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 245);
break;
case 246:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 246);
break;
case 247:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 247);
break;
case 248:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 248);
break;
case 249:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 249);
break;
case 250:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 250);
break;
case 251:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 251);
break;
case 252:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 252);
break;
case 253:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 253);
break;
case 254:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 254);
break;
case 255:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_shuffle_epi32(arg1, arg2, arg3, 255);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_shuffle_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    _MM_PERM_ENUM arg3 = (_MM_PERM_ENUM) PyFast_AsChar(*(((PyObject **) args) + 3));


switch (arg3) {
case 0:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 0);
break;
case 1:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 1);
break;
case 2:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 2);
break;
case 3:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 3);
break;
case 4:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 4);
break;
case 5:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 5);
break;
case 6:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 6);
break;
case 7:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 7);
break;
case 8:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 8);
break;
case 9:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 9);
break;
case 10:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 10);
break;
case 11:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 11);
break;
case 12:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 12);
break;
case 13:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 13);
break;
case 14:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 14);
break;
case 15:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 15);
break;
case 16:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 16);
break;
case 17:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 17);
break;
case 18:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 18);
break;
case 19:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 19);
break;
case 20:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 20);
break;
case 21:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 21);
break;
case 22:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 22);
break;
case 23:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 23);
break;
case 24:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 24);
break;
case 25:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 25);
break;
case 26:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 26);
break;
case 27:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 27);
break;
case 28:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 28);
break;
case 29:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 29);
break;
case 30:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 30);
break;
case 31:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 31);
break;
case 32:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 32);
break;
case 33:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 33);
break;
case 34:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 34);
break;
case 35:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 35);
break;
case 36:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 36);
break;
case 37:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 37);
break;
case 38:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 38);
break;
case 39:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 39);
break;
case 40:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 40);
break;
case 41:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 41);
break;
case 42:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 42);
break;
case 43:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 43);
break;
case 44:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 44);
break;
case 45:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 45);
break;
case 46:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 46);
break;
case 47:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 47);
break;
case 48:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 48);
break;
case 49:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 49);
break;
case 50:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 50);
break;
case 51:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 51);
break;
case 52:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 52);
break;
case 53:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 53);
break;
case 54:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 54);
break;
case 55:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 55);
break;
case 56:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 56);
break;
case 57:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 57);
break;
case 58:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 58);
break;
case 59:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 59);
break;
case 60:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 60);
break;
case 61:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 61);
break;
case 62:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 62);
break;
case 63:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 63);
break;
case 64:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 64);
break;
case 65:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 65);
break;
case 66:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 66);
break;
case 67:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 67);
break;
case 68:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 68);
break;
case 69:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 69);
break;
case 70:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 70);
break;
case 71:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 71);
break;
case 72:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 72);
break;
case 73:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 73);
break;
case 74:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 74);
break;
case 75:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 75);
break;
case 76:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 76);
break;
case 77:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 77);
break;
case 78:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 78);
break;
case 79:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 79);
break;
case 80:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 80);
break;
case 81:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 81);
break;
case 82:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 82);
break;
case 83:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 83);
break;
case 84:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 84);
break;
case 85:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 85);
break;
case 86:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 86);
break;
case 87:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 87);
break;
case 88:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 88);
break;
case 89:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 89);
break;
case 90:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 90);
break;
case 91:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 91);
break;
case 92:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 92);
break;
case 93:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 93);
break;
case 94:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 94);
break;
case 95:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 95);
break;
case 96:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 96);
break;
case 97:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 97);
break;
case 98:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 98);
break;
case 99:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 99);
break;
case 100:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 100);
break;
case 101:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 101);
break;
case 102:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 102);
break;
case 103:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 103);
break;
case 104:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 104);
break;
case 105:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 105);
break;
case 106:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 106);
break;
case 107:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 107);
break;
case 108:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 108);
break;
case 109:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 109);
break;
case 110:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 110);
break;
case 111:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 111);
break;
case 112:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 112);
break;
case 113:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 113);
break;
case 114:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 114);
break;
case 115:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 115);
break;
case 116:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 116);
break;
case 117:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 117);
break;
case 118:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 118);
break;
case 119:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 119);
break;
case 120:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 120);
break;
case 121:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 121);
break;
case 122:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 122);
break;
case 123:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 123);
break;
case 124:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 124);
break;
case 125:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 125);
break;
case 126:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 126);
break;
case 127:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 127);
break;
case 128:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 128);
break;
case 129:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 129);
break;
case 130:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 130);
break;
case 131:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 131);
break;
case 132:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 132);
break;
case 133:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 133);
break;
case 134:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 134);
break;
case 135:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 135);
break;
case 136:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 136);
break;
case 137:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 137);
break;
case 138:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 138);
break;
case 139:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 139);
break;
case 140:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 140);
break;
case 141:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 141);
break;
case 142:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 142);
break;
case 143:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 143);
break;
case 144:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 144);
break;
case 145:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 145);
break;
case 146:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 146);
break;
case 147:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 147);
break;
case 148:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 148);
break;
case 149:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 149);
break;
case 150:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 150);
break;
case 151:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 151);
break;
case 152:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 152);
break;
case 153:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 153);
break;
case 154:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 154);
break;
case 155:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 155);
break;
case 156:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 156);
break;
case 157:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 157);
break;
case 158:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 158);
break;
case 159:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 159);
break;
case 160:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 160);
break;
case 161:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 161);
break;
case 162:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 162);
break;
case 163:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 163);
break;
case 164:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 164);
break;
case 165:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 165);
break;
case 166:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 166);
break;
case 167:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 167);
break;
case 168:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 168);
break;
case 169:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 169);
break;
case 170:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 170);
break;
case 171:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 171);
break;
case 172:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 172);
break;
case 173:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 173);
break;
case 174:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 174);
break;
case 175:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 175);
break;
case 176:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 176);
break;
case 177:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 177);
break;
case 178:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 178);
break;
case 179:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 179);
break;
case 180:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 180);
break;
case 181:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 181);
break;
case 182:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 182);
break;
case 183:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 183);
break;
case 184:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 184);
break;
case 185:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 185);
break;
case 186:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 186);
break;
case 187:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 187);
break;
case 188:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 188);
break;
case 189:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 189);
break;
case 190:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 190);
break;
case 191:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 191);
break;
case 192:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 192);
break;
case 193:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 193);
break;
case 194:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 194);
break;
case 195:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 195);
break;
case 196:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 196);
break;
case 197:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 197);
break;
case 198:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 198);
break;
case 199:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 199);
break;
case 200:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 200);
break;
case 201:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 201);
break;
case 202:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 202);
break;
case 203:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 203);
break;
case 204:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 204);
break;
case 205:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 205);
break;
case 206:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 206);
break;
case 207:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 207);
break;
case 208:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 208);
break;
case 209:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 209);
break;
case 210:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 210);
break;
case 211:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 211);
break;
case 212:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 212);
break;
case 213:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 213);
break;
case 214:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 214);
break;
case 215:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 215);
break;
case 216:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 216);
break;
case 217:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 217);
break;
case 218:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 218);
break;
case 219:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 219);
break;
case 220:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 220);
break;
case 221:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 221);
break;
case 222:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 222);
break;
case 223:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 223);
break;
case 224:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 224);
break;
case 225:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 225);
break;
case 226:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 226);
break;
case 227:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 227);
break;
case 228:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 228);
break;
case 229:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 229);
break;
case 230:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 230);
break;
case 231:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 231);
break;
case 232:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 232);
break;
case 233:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 233);
break;
case 234:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 234);
break;
case 235:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 235);
break;
case 236:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 236);
break;
case 237:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 237);
break;
case 238:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 238);
break;
case 239:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 239);
break;
case 240:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 240);
break;
case 241:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 241);
break;
case 242:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 242);
break;
case 243:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 243);
break;
case 244:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 244);
break;
case 245:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 245);
break;
case 246:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 246);
break;
case 247:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 247);
break;
case 248:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 248);
break;
case 249:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 249);
break;
case 250:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 250);
break;
case 251:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 251);
break;
case 252:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 252);
break;
case 253:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 253);
break;
case 254:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 254);
break;
case 255:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_epi32(arg1, arg2, 255);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_shuffle_i64x2_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_shuffle_i64x2_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_shuffle_i64x2_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_shuffle_i32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_shuffle_i32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_shuffle_i32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_shuffle_f64x2_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_shuffle_f64x2_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_shuffle_f64x2_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_shuffle_f32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_shuffle_f32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_shuffle_f32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rolv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_rolv_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rolv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_rolv_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rolv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_rolv_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rorv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_rorv_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rorv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_rorv_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rorv_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_rorv_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rolv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_rolv_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rolv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_rolv_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rolv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_rolv_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rorv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_rorv_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rorv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_rorv_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rorv_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_rorv_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtt_roundpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtt_roundpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtt_roundpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtt_roundpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtt_roundpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtt_roundpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtt_roundps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtt_roundps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtt_roundps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtt_roundps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtt_roundps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtt_roundps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtu32_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned arg2 = (unsigned) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 2));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_cvtu32_sd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundu64_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundi64_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsi64_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundu32_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsi32_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundi32_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundu64_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsi64_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundi64_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi32_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi32_epi8(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_storeu_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtepi32_storeu_epi8(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi32_epi8(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi32_epi8(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtsepi32_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtsepi32_epi8(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi32_storeu_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtsepi32_storeu_epi8(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi32_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtsepi32_epi8(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi32_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtsepi32_epi8(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtusepi32_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtusepi32_epi8(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi32_storeu_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtusepi32_storeu_epi8(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi32_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtusepi32_epi8(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi32_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtusepi32_epi8(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi32_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi32_epi16(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_storeu_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtepi32_storeu_epi16(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi32_epi16(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi32_epi16(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtsepi32_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtsepi32_epi16(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi32_storeu_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtsepi32_storeu_epi16(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi32_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtsepi32_epi16(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi32_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtsepi32_epi16(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtusepi32_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtusepi32_epi16(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi32_storeu_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtusepi32_storeu_epi16(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi32_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtusepi32_epi16(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi32_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtusepi32_epi16(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi64_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi64_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void* arg0 = (void*) *((void**) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtepi64_storeu_epi32(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi64_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi64_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi64_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtsepi64_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtsepi64_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtsepi64_storeu_epi32(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtsepi64_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi64_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtsepi64_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtusepi64_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtusepi64_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void* arg0 = (void*) *((void**) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtusepi64_storeu_epi32(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtusepi64_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi64_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtusepi64_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi64_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi64_epi16(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtepi64_storeu_epi16(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi64_epi16(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi64_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi64_epi16(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtsepi64_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtsepi64_epi16(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtsepi64_storeu_epi16(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtsepi64_epi16(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi64_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtsepi64_epi16(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtusepi64_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtusepi64_epi16(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtusepi64_storeu_epi16(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtusepi64_epi16(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi64_epi16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtusepi64_epi16(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi64_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi64_epi8(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtepi64_storeu_epi8(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi64_epi8(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi64_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi64_epi8(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtsepi64_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtsepi64_epi8(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtsepi64_storeu_epi8(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtsepi64_epi8(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi64_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtsepi64_epi8(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtusepi64_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtusepi64_epi8(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_cvtusepi64_storeu_epi8(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtusepi64_epi8(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi64_epi8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtusepi64_epi8(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi32_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi32_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256i arg3 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi32_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256i arg2 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi32_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepu32_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepu32_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepu32_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256i arg3 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepu32_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepu32_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256i arg2 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepu32_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundepi32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundepi32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundepi32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundepu32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundepu32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundepu32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_extractf64x4_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_extractf64x4_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_extractf64x4_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_extractf32x4_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_extractf32x4_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_extractf32x4_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_extracti64x4_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_extracti64x4_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_extracti64x4_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_extracti32x4_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_extracti32x4_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_extracti32x4_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_inserti32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_insertf32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_inserti64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_inserti64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_inserti64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_insertf64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_insertf64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_insertf64x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_loadu_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_loadu_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_loadu_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_loadu_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_loadu_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_loadu_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_storeu_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_storeu_pd(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_storeu_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_storeu_pd(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_loadu_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_loadu_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_loadu_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_loadu_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_loadu_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_loadu_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_storeu_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_storeu_ps(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_storeu_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_storeu_ps(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_load_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    const float * arg3 = (const float *) *((const float **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_load_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_load_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    const float * arg2 = (const float *) *((const float **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_load_ss(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_load_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    const double * arg3 = (const double *) *((const double **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_load_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_load_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    const double * arg2 = (const double *) *((const double **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_load_sd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_move_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_move_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_move_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_move_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_move_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_move_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_move_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_move_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_store_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    float * arg0 = (float *) *((float **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm_mask_store_ss(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_store_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    double * arg0 = (double *) *((double **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm_mask_store_sd(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_loadu_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_loadu_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_loadu_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_loadu_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_loadu_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_loadu_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_storeu_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_storeu_epi64(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_storeu_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_storeu_epi64(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_loadu_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_loadu_si512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_loadu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void const * arg1 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_loadu_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_loadu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_loadu_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_loadu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_loadu_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_storeu_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_storeu_si512(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_storeu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_storeu_epi32(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_storeu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_storeu_epi32(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutevar_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_permutevar_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutevar_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutevar_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutevar_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutevar_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutevar_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_permutevar_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutevar_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutevar_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutevar_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutevar_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutex2var_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_permutex2var_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutex2var_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutex2var_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask2_permutex2var_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __mmask8 arg3 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask2_permutex2var_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutex2var_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutex2var_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutex2var_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_permutex2var_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutex2var_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutex2var_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask2_permutex2var_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __mmask16 arg3 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask2_permutex2var_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutex2var_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutex2var_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutex2var_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_permutex2var_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutex2var_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutex2var_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask2_permutex2var_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __mmask8 arg3 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask2_permutex2var_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutex2var_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutex2var_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutex2var_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_permutex2var_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutex2var_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutex2var_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask2_permutex2var_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __mmask16 arg3 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask2_permutex2var_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutex2var_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutex2var_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permute_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permute_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permute_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permute_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permute_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permute_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutex_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutex_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutex_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutex_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutex_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutex_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutexvar_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutexvar_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutexvar_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_permutexvar_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutexvar_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutexvar_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutexvar_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutexvar_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutexvar_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_permutexvar_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutexvar_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutexvar_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutexvar_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_permutexvar_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutexvar_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutexvar_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutexvar_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutexvar_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_permutexvar_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_permutexvar_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_permutexvar_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_permutexvar_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_permutexvar_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_permutexvar_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_shuffle_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_shuffle_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_shuffle_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    const int arg4 = (const int) PyFast_AsInt(*(((PyObject **) args) + 4));


switch (arg4) {
case 0:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 0);
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 1);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 2);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 3);
break;
case 4:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 4);
break;
case 5:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 5);
break;
case 6:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 6);
break;
case 7:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 7);
break;
case 8:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 8);
break;
case 9:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 9);
break;
case 10:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 10);
break;
case 11:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 11);
break;
case 12:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 12);
break;
case 13:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 13);
break;
case 14:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 14);
break;
case 15:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 15);
break;
case 16:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 16);
break;
case 17:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 17);
break;
case 18:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 18);
break;
case 19:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 19);
break;
case 20:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 20);
break;
case 21:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 21);
break;
case 22:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 22);
break;
case 23:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 23);
break;
case 24:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 24);
break;
case 25:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 25);
break;
case 26:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 26);
break;
case 27:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 27);
break;
case 28:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 28);
break;
case 29:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 29);
break;
case 30:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 30);
break;
case 31:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 31);
break;
case 32:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 32);
break;
case 33:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 33);
break;
case 34:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 34);
break;
case 35:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 35);
break;
case 36:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 36);
break;
case 37:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 37);
break;
case 38:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 38);
break;
case 39:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 39);
break;
case 40:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 40);
break;
case 41:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 41);
break;
case 42:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 42);
break;
case 43:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 43);
break;
case 44:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 44);
break;
case 45:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 45);
break;
case 46:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 46);
break;
case 47:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 47);
break;
case 48:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 48);
break;
case 49:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 49);
break;
case 50:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 50);
break;
case 51:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 51);
break;
case 52:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 52);
break;
case 53:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 53);
break;
case 54:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 54);
break;
case 55:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 55);
break;
case 56:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 56);
break;
case 57:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 57);
break;
case 58:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 58);
break;
case 59:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 59);
break;
case 60:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 60);
break;
case 61:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 61);
break;
case 62:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 62);
break;
case 63:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 63);
break;
case 64:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 64);
break;
case 65:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 65);
break;
case 66:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 66);
break;
case 67:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 67);
break;
case 68:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 68);
break;
case 69:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 69);
break;
case 70:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 70);
break;
case 71:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 71);
break;
case 72:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 72);
break;
case 73:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 73);
break;
case 74:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 74);
break;
case 75:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 75);
break;
case 76:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 76);
break;
case 77:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 77);
break;
case 78:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 78);
break;
case 79:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 79);
break;
case 80:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 80);
break;
case 81:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 81);
break;
case 82:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 82);
break;
case 83:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 83);
break;
case 84:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 84);
break;
case 85:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 85);
break;
case 86:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 86);
break;
case 87:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 87);
break;
case 88:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 88);
break;
case 89:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 89);
break;
case 90:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 90);
break;
case 91:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 91);
break;
case 92:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 92);
break;
case 93:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 93);
break;
case 94:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 94);
break;
case 95:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 95);
break;
case 96:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 96);
break;
case 97:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 97);
break;
case 98:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 98);
break;
case 99:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 99);
break;
case 100:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 100);
break;
case 101:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 101);
break;
case 102:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 102);
break;
case 103:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 103);
break;
case 104:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 104);
break;
case 105:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 105);
break;
case 106:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 106);
break;
case 107:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 107);
break;
case 108:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 108);
break;
case 109:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 109);
break;
case 110:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 110);
break;
case 111:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 111);
break;
case 112:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 112);
break;
case 113:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 113);
break;
case 114:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 114);
break;
case 115:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 115);
break;
case 116:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 116);
break;
case 117:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 117);
break;
case 118:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 118);
break;
case 119:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 119);
break;
case 120:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 120);
break;
case 121:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 121);
break;
case 122:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 122);
break;
case 123:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 123);
break;
case 124:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 124);
break;
case 125:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 125);
break;
case 126:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 126);
break;
case 127:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 127);
break;
case 128:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 128);
break;
case 129:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 129);
break;
case 130:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 130);
break;
case 131:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 131);
break;
case 132:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 132);
break;
case 133:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 133);
break;
case 134:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 134);
break;
case 135:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 135);
break;
case 136:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 136);
break;
case 137:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 137);
break;
case 138:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 138);
break;
case 139:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 139);
break;
case 140:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 140);
break;
case 141:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 141);
break;
case 142:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 142);
break;
case 143:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 143);
break;
case 144:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 144);
break;
case 145:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 145);
break;
case 146:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 146);
break;
case 147:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 147);
break;
case 148:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 148);
break;
case 149:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 149);
break;
case 150:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 150);
break;
case 151:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 151);
break;
case 152:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 152);
break;
case 153:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 153);
break;
case 154:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 154);
break;
case 155:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 155);
break;
case 156:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 156);
break;
case 157:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 157);
break;
case 158:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 158);
break;
case 159:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 159);
break;
case 160:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 160);
break;
case 161:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 161);
break;
case 162:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 162);
break;
case 163:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 163);
break;
case 164:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 164);
break;
case 165:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 165);
break;
case 166:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 166);
break;
case 167:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 167);
break;
case 168:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 168);
break;
case 169:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 169);
break;
case 170:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 170);
break;
case 171:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 171);
break;
case 172:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 172);
break;
case 173:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 173);
break;
case 174:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 174);
break;
case 175:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 175);
break;
case 176:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 176);
break;
case 177:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 177);
break;
case 178:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 178);
break;
case 179:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 179);
break;
case 180:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 180);
break;
case 181:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 181);
break;
case 182:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 182);
break;
case 183:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 183);
break;
case 184:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 184);
break;
case 185:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 185);
break;
case 186:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 186);
break;
case 187:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 187);
break;
case 188:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 188);
break;
case 189:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 189);
break;
case 190:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 190);
break;
case 191:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 191);
break;
case 192:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 192);
break;
case 193:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 193);
break;
case 194:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 194);
break;
case 195:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 195);
break;
case 196:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 196);
break;
case 197:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 197);
break;
case 198:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 198);
break;
case 199:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 199);
break;
case 200:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 200);
break;
case 201:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 201);
break;
case 202:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 202);
break;
case 203:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 203);
break;
case 204:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 204);
break;
case 205:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 205);
break;
case 206:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 206);
break;
case 207:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 207);
break;
case 208:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 208);
break;
case 209:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 209);
break;
case 210:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 210);
break;
case 211:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 211);
break;
case 212:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 212);
break;
case 213:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 213);
break;
case 214:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 214);
break;
case 215:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 215);
break;
case 216:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 216);
break;
case 217:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 217);
break;
case 218:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 218);
break;
case 219:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 219);
break;
case 220:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 220);
break;
case 221:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 221);
break;
case 222:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 222);
break;
case 223:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 223);
break;
case 224:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 224);
break;
case 225:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 225);
break;
case 226:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 226);
break;
case 227:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 227);
break;
case 228:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 228);
break;
case 229:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 229);
break;
case 230:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 230);
break;
case 231:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 231);
break;
case 232:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 232);
break;
case 233:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 233);
break;
case 234:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 234);
break;
case 235:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 235);
break;
case 236:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 236);
break;
case 237:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 237);
break;
case 238:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 238);
break;
case 239:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 239);
break;
case 240:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 240);
break;
case 241:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 241);
break;
case 242:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 242);
break;
case 243:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 243);
break;
case 244:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 244);
break;
case 245:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 245);
break;
case 246:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 246);
break;
case 247:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 247);
break;
case 248:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 248);
break;
case 249:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 249);
break;
case 250:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 250);
break;
case 251:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 251);
break;
case 252:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 252);
break;
case 253:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 253);
break;
case 254:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 254);
break;
case 255:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_shuffle_ps(arg1, arg2, arg3, 255);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_shuffle_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_shuffle_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_shuffle_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fixupimm_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fixupimm_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fixupimm_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fixupimm_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fixupimm_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fixupimm_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fixupimm_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fixupimm_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fixupimm_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fixupimm_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fixupimm_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fixupimm_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_movehdup_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_movehdup_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_movehdup_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_movehdup_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_movehdup_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_movehdup_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_moveldup_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_moveldup_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_moveldup_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_moveldup_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_moveldup_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_moveldup_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_or_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_or_si512(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_or_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_or_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_or_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_or_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_or_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_or_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_or_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_or_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_or_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_or_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_or_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_or_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_xor_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_xor_si512(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_xor_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_xor_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_xor_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_xor_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_xor_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_xor_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_xor_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_xor_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_xor_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_xor_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_xor_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_xor_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rol_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rol_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rol_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_ror_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    int arg2 = (int) PyFast_AsInt(*(((PyObject **) args) + 2));


switch (arg2) {
case 0:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 0);
break;
case 1:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 1);
break;
case 2:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 2);
break;
case 3:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 3);
break;
case 4:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 4);
break;
case 5:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 5);
break;
case 6:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 6);
break;
case 7:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 7);
break;
case 8:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 8);
break;
case 9:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 9);
break;
case 10:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 10);
break;
case 11:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 11);
break;
case 12:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 12);
break;
case 13:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 13);
break;
case 14:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 14);
break;
case 15:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 15);
break;
case 16:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 16);
break;
case 17:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 17);
break;
case 18:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 18);
break;
case 19:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 19);
break;
case 20:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 20);
break;
case 21:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 21);
break;
case 22:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 22);
break;
case 23:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 23);
break;
case 24:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 24);
break;
case 25:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 25);
break;
case 26:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 26);
break;
case 27:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 27);
break;
case 28:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 28);
break;
case 29:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 29);
break;
case 30:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 30);
break;
case 31:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_ror_epi32(arg1, 31);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_ror_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_ror_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    int arg3 = (int) PyFast_AsInt(*(((PyObject **) args) + 3));


switch (arg3) {
case 0:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 0);
break;
case 1:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 1);
break;
case 2:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 2);
break;
case 3:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 3);
break;
case 4:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 4);
break;
case 5:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 5);
break;
case 6:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 6);
break;
case 7:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 7);
break;
case 8:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 8);
break;
case 9:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 9);
break;
case 10:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 10);
break;
case 11:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 11);
break;
case 12:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 12);
break;
case 13:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 13);
break;
case 14:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 14);
break;
case 15:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 15);
break;
case 16:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 16);
break;
case 17:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 17);
break;
case 18:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 18);
break;
case 19:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 19);
break;
case 20:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 20);
break;
case 21:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 21);
break;
case 22:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 22);
break;
case 23:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 23);
break;
case 24:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 24);
break;
case 25:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 25);
break;
case 26:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 26);
break;
case 27:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 27);
break;
case 28:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 28);
break;
case 29:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 29);
break;
case 30:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 30);
break;
case 31:
    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_ror_epi32(arg1, arg2, 31);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_rol_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_rol_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_rol_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_ror_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_ror_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_ror_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_and_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_and_si512(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_and_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_and_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_and_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_and_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_and_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_and_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_and_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_and_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_and_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_and_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_and_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_and_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_andnot_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_andnot_si512(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_andnot_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_andnot_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_andnot_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_andnot_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_andnot_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_andnot_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_andnot_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_andnot_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_andnot_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_andnot_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_andnot_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_andnot_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_test_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_test_epi32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_test_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_test_epi32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_test_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_test_epi64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_test_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_test_epi64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_testn_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_testn_epi32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_testn_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_testn_epi32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_testn_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_testn_epi64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_testn_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_testn_epi64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_abs_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_abs_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_abs_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_abs_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_abs_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_abs_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_abs_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_abs_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_unpackhi_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_unpackhi_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_unpackhi_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_unpackhi_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_unpackhi_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_unpackhi_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_unpackhi_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_unpackhi_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_unpackhi_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_unpackhi_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_unpackhi_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_unpackhi_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_unpacklo_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_unpacklo_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_unpacklo_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_unpacklo_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_unpacklo_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_unpacklo_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_unpacklo_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_unpacklo_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_unpacklo_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_unpacklo_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_unpacklo_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_unpacklo_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundss_u64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundss_si64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundss_i64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundss_u64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundss_i64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundss_si64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundss_u32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundss_si32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundss_i32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundss_u32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundss_i32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundss_si32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsd_u64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsd_si64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsd_i64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundsd_u64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundsd_si64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundsd_i64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsd_u32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsd_si32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsd_i32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundsd_u32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundsd_i32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtt_roundsd_si32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_movedup_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_movedup_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_movedup_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_movedup_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_movedup_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_movedup_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_unpacklo_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_unpacklo_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_unpacklo_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_unpacklo_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_unpacklo_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_unpacklo_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_unpackhi_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_unpackhi_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_unpackhi_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_unpackhi_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_unpackhi_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_unpackhi_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_unpackhi_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_unpackhi_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_unpackhi_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_unpackhi_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_unpackhi_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_unpackhi_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundps_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundps_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundps_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundph_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundph_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundph_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundps_ph_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtps_ph_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundps_ph_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtps_ph_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundps_ph_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtps_ph_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvt_roundpd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvt_roundpd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundpd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundsd_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_cvt_roundsd_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_cvt_roundsd_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvt_roundss_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_cvt_roundss_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_cvt_roundss_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_stream_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i * arg0 = (__m512i *) *((__m512i **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_stream_si512(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_stream_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    float * arg0 = (float *) *((float **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_stream_ps(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_stream_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    double * arg0 = (double *) *((double **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _mm512_stream_pd(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_stream_load_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    void * arg1 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_stream_load_si512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_getexp_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    const int arg3 = (const int) PyFast_AsInt(*(((PyObject **) args) + 3));


switch (arg3) {
case 0:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_ss(arg1, arg2, 0);
break;
case 1:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_ss(arg1, arg2, 1);
break;
case 2:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_ss(arg1, arg2, 2);
break;
case 3:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_ss(arg1, arg2, 3);
break;
case 4:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_ss(arg1, arg2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_getexp_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 6) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 6 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));
    const int arg5 = (const int) PyFast_AsInt(*(((PyObject **) args) + 5));


switch (arg5) {
case 0:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_ss(arg1, arg2, arg3, arg4, 0);
break;
case 1:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_ss(arg1, arg2, arg3, arg4, 1);
break;
case 2:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_ss(arg1, arg2, arg3, arg4, 2);
break;
case 3:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_ss(arg1, arg2, arg3, arg4, 3);
break;
case 4:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_ss(arg1, arg2, arg3, arg4, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_getexp_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    const int arg4 = (const int) PyFast_AsInt(*(((PyObject **) args) + 4));


switch (arg4) {
case 0:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_ss(arg1, arg2, arg3, 0);
break;
case 1:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_ss(arg1, arg2, arg3, 1);
break;
case 2:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_ss(arg1, arg2, arg3, 2);
break;
case 3:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_ss(arg1, arg2, arg3, 3);
break;
case 4:
    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_ss(arg1, arg2, arg3, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_getexp_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    const int arg3 = (const int) PyFast_AsInt(*(((PyObject **) args) + 3));


switch (arg3) {
case 0:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_sd(arg1, arg2, 0);
break;
case 1:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_sd(arg1, arg2, 1);
break;
case 2:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_sd(arg1, arg2, 2);
break;
case 3:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_sd(arg1, arg2, 3);
break;
case 4:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getexp_round_sd(arg1, arg2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_getexp_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 6) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 6 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));
    const int arg5 = (const int) PyFast_AsInt(*(((PyObject **) args) + 5));


switch (arg5) {
case 0:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_sd(arg1, arg2, arg3, arg4, 0);
break;
case 1:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_sd(arg1, arg2, arg3, arg4, 1);
break;
case 2:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_sd(arg1, arg2, arg3, arg4, 2);
break;
case 3:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_sd(arg1, arg2, arg3, arg4, 3);
break;
case 4:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_round_sd(arg1, arg2, arg3, arg4, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_getexp_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    const int arg4 = (const int) PyFast_AsInt(*(((PyObject **) args) + 4));


switch (arg4) {
case 0:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_sd(arg1, arg2, arg3, 0);
break;
case 1:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_sd(arg1, arg2, arg3, 1);
break;
case 2:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_sd(arg1, arg2, arg3, 2);
break;
case 3:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_sd(arg1, arg2, arg3, 3);
break;
case 4:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_round_sd(arg1, arg2, arg3, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_getexp_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    const int arg2 = (const int) PyFast_AsInt(*(((PyObject **) args) + 2));


switch (arg2) {
case 0:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_round_ps(arg1, 0);
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_round_ps(arg1, 1);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_round_ps(arg1, 2);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_round_ps(arg1, 3);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_getexp_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_getexp_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_getexp_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    const int arg2 = (const int) PyFast_AsInt(*(((PyObject **) args) + 2));


switch (arg2) {
case 0:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_round_pd(arg1, 0);
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_round_pd(arg1, 1);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_round_pd(arg1, 2);
break;
case 3:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_round_pd(arg1, 3);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_getexp_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_getexp_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_getmant_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));

    _MM_MANTISSA_NORM_ENUM arg2;
    switch(PyFast_AsChar(*(((PyObject **) args) + 2))) {
        case 0:
            arg2 = _MM_MANT_NORM_1_2;
            break;
        case 1:
            arg2 = _MM_MANT_NORM_p5_2;
            break;
        case 2:
            arg2 = _MM_MANT_NORM_p5_1;
            break;
        case 3:
            arg2 = _MM_MANT_NORM_p75_1p5;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 2");
            return nullptr;
    }


    _MM_MANTISSA_SIGN_ENUM arg3;
    switch(PyFast_AsChar(*(((PyObject **) args) + 3))) {
        case 0:
            arg3 = _MM_MANT_SIGN_src;
            break;
        case 1:
            arg3 = _MM_MANT_SIGN_zero;
            break;
        case 2:
            arg3 = _MM_MANT_SIGN_nan;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 3");
            return nullptr;
    }

    const int arg4 = (const int) PyFast_AsInt(*(((PyObject **) args) + 4));


switch (arg2) {
case 0:
switch (arg3) {
case 0:
switch (arg4) {
case 0:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 0, 0, 0);
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 0, 0, 1);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 0, 0, 2);
break;
case 3:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 0, 0, 3);
break;
case 4:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 0, 0, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 0, 1, 4);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 0, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 1, 2, 4);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 2, 2, 4);
break;
case 3:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_pd(arg1, 3, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_getmant_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 7) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 7 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));

    _MM_MANTISSA_NORM_ENUM arg4;
    switch(PyFast_AsChar(*(((PyObject **) args) + 4))) {
        case 0:
            arg4 = _MM_MANT_NORM_1_2;
            break;
        case 1:
            arg4 = _MM_MANT_NORM_p5_2;
            break;
        case 2:
            arg4 = _MM_MANT_NORM_p5_1;
            break;
        case 3:
            arg4 = _MM_MANT_NORM_p75_1p5;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 4");
            return nullptr;
    }


    _MM_MANTISSA_SIGN_ENUM arg5;
    switch(PyFast_AsChar(*(((PyObject **) args) + 5))) {
        case 0:
            arg5 = _MM_MANT_SIGN_src;
            break;
        case 1:
            arg5 = _MM_MANT_SIGN_zero;
            break;
        case 2:
            arg5 = _MM_MANT_SIGN_nan;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 5");
            return nullptr;
    }

    const int arg6 = (const int) PyFast_AsInt(*(((PyObject **) args) + 6));


switch (arg4) {
case 0:
switch (arg5) {
case 0:
switch (arg6) {
case 0:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 0, 0, 0);
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 0, 0, 1);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 0, 0, 2);
break;
case 3:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 0, 0, 3);
break;
case 4:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 0, 0, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 0, 1, 4);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 0, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 1, 2, 4);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 2, 2, 4);
break;
case 3:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_pd(arg1, arg2, arg3, 3, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_getmant_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 6) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 6 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));

    _MM_MANTISSA_NORM_ENUM arg3;
    switch(PyFast_AsChar(*(((PyObject **) args) + 3))) {
        case 0:
            arg3 = _MM_MANT_NORM_1_2;
            break;
        case 1:
            arg3 = _MM_MANT_NORM_p5_2;
            break;
        case 2:
            arg3 = _MM_MANT_NORM_p5_1;
            break;
        case 3:
            arg3 = _MM_MANT_NORM_p75_1p5;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 3");
            return nullptr;
    }


    _MM_MANTISSA_SIGN_ENUM arg4;
    switch(PyFast_AsChar(*(((PyObject **) args) + 4))) {
        case 0:
            arg4 = _MM_MANT_SIGN_src;
            break;
        case 1:
            arg4 = _MM_MANT_SIGN_zero;
            break;
        case 2:
            arg4 = _MM_MANT_SIGN_nan;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 4");
            return nullptr;
    }

    const int arg5 = (const int) PyFast_AsInt(*(((PyObject **) args) + 5));


switch (arg3) {
case 0:
switch (arg4) {
case 0:
switch (arg5) {
case 0:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 0, 0, 0);
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 0, 0, 1);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 0, 0, 2);
break;
case 3:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 0, 0, 3);
break;
case 4:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 0, 0, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 0, 1, 4);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 0, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 1, 2, 4);
break;
case 2:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 2, 2, 4);
break;
case 3:
    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_pd(arg1, arg2, 3, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_getmant_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));

    _MM_MANTISSA_NORM_ENUM arg2;
    switch(PyFast_AsChar(*(((PyObject **) args) + 2))) {
        case 0:
            arg2 = _MM_MANT_NORM_1_2;
            break;
        case 1:
            arg2 = _MM_MANT_NORM_p5_2;
            break;
        case 2:
            arg2 = _MM_MANT_NORM_p5_1;
            break;
        case 3:
            arg2 = _MM_MANT_NORM_p75_1p5;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 2");
            return nullptr;
    }


    _MM_MANTISSA_SIGN_ENUM arg3;
    switch(PyFast_AsChar(*(((PyObject **) args) + 3))) {
        case 0:
            arg3 = _MM_MANT_SIGN_src;
            break;
        case 1:
            arg3 = _MM_MANT_SIGN_zero;
            break;
        case 2:
            arg3 = _MM_MANT_SIGN_nan;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 3");
            return nullptr;
    }

    const int arg4 = (const int) PyFast_AsInt(*(((PyObject **) args) + 4));


switch (arg2) {
case 0:
switch (arg3) {
case 0:
switch (arg4) {
case 0:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 0, 0, 0);
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 0, 0, 1);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 0, 0, 2);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 0, 0, 3);
break;
case 4:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 0, 0, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 0, 1, 4);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 0, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 1, 2, 4);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 2, 2, 4);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getmant_round_ps(arg1, 3, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_getmant_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 7) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 7 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));

    _MM_MANTISSA_NORM_ENUM arg4;
    switch(PyFast_AsChar(*(((PyObject **) args) + 4))) {
        case 0:
            arg4 = _MM_MANT_NORM_1_2;
            break;
        case 1:
            arg4 = _MM_MANT_NORM_p5_2;
            break;
        case 2:
            arg4 = _MM_MANT_NORM_p5_1;
            break;
        case 3:
            arg4 = _MM_MANT_NORM_p75_1p5;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 4");
            return nullptr;
    }


    _MM_MANTISSA_SIGN_ENUM arg5;
    switch(PyFast_AsChar(*(((PyObject **) args) + 5))) {
        case 0:
            arg5 = _MM_MANT_SIGN_src;
            break;
        case 1:
            arg5 = _MM_MANT_SIGN_zero;
            break;
        case 2:
            arg5 = _MM_MANT_SIGN_nan;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 5");
            return nullptr;
    }

    const int arg6 = (const int) PyFast_AsInt(*(((PyObject **) args) + 6));


switch (arg4) {
case 0:
switch (arg5) {
case 0:
switch (arg6) {
case 0:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 0, 0, 0);
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 0, 0, 1);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 0, 0, 2);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 0, 0, 3);
break;
case 4:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 0, 0, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 0, 1, 4);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 0, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 1, 2, 4);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 2, 2, 4);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getmant_round_ps(arg1, arg2, arg3, 3, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_getmant_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 6) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 6 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));

    _MM_MANTISSA_NORM_ENUM arg3;
    switch(PyFast_AsChar(*(((PyObject **) args) + 3))) {
        case 0:
            arg3 = _MM_MANT_NORM_1_2;
            break;
        case 1:
            arg3 = _MM_MANT_NORM_p5_2;
            break;
        case 2:
            arg3 = _MM_MANT_NORM_p5_1;
            break;
        case 3:
            arg3 = _MM_MANT_NORM_p75_1p5;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 3");
            return nullptr;
    }


    _MM_MANTISSA_SIGN_ENUM arg4;
    switch(PyFast_AsChar(*(((PyObject **) args) + 4))) {
        case 0:
            arg4 = _MM_MANT_SIGN_src;
            break;
        case 1:
            arg4 = _MM_MANT_SIGN_zero;
            break;
        case 2:
            arg4 = _MM_MANT_SIGN_nan;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 4");
            return nullptr;
    }

    const int arg5 = (const int) PyFast_AsInt(*(((PyObject **) args) + 5));


switch (arg3) {
case 0:
switch (arg4) {
case 0:
switch (arg5) {
case 0:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 0, 0, 0);
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 0, 0, 1);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 0, 0, 2);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 0, 0, 3);
break;
case 4:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 0, 0, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 0, 1, 4);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 0, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 1, 2, 4);
break;
case 2:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 2, 2, 4);
break;
case 3:
    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getmant_round_ps(arg1, arg2, 3, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_getmant_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 6) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 6 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));

    _MM_MANTISSA_NORM_ENUM arg3;
    switch(PyFast_AsChar(*(((PyObject **) args) + 3))) {
        case 0:
            arg3 = _MM_MANT_NORM_1_2;
            break;
        case 1:
            arg3 = _MM_MANT_NORM_p5_2;
            break;
        case 2:
            arg3 = _MM_MANT_NORM_p5_1;
            break;
        case 3:
            arg3 = _MM_MANT_NORM_p75_1p5;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 3");
            return nullptr;
    }


    _MM_MANTISSA_SIGN_ENUM arg4;
    switch(PyFast_AsChar(*(((PyObject **) args) + 4))) {
        case 0:
            arg4 = _MM_MANT_SIGN_src;
            break;
        case 1:
            arg4 = _MM_MANT_SIGN_zero;
            break;
        case 2:
            arg4 = _MM_MANT_SIGN_nan;
            break;
        default:
            PyErr_SetString(PyExc_ValueError, "Invalid value for arg 4");
            return nullptr;
    }

    const int arg5 = (const int) PyFast_AsInt(*(((PyObject **) args) + 5));


switch (arg3) {
case 0:
switch (arg4) {
case 0:
switch (arg5) {
case 0:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 0, 0, 0);
break;
case 1:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 0, 0, 1);
break;
case 2:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 0, 0, 2);
break;
case 3:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 0, 0, 3);
break;
case 4:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 0, 0, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 0, 1, 4);
break;
case 2:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 0, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}
break;
case 1:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 1, 2, 4);
break;
case 2:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 2, 2, 4);
break;
case 3:
    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getmant_round_sd(arg1, arg2, 3, 2, 4);
break;
default:
PyErr_SetString(PyExc_ValueError, "Invalid argument (out of range)");
return nullptr;
}

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_getmant_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_getmant_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_getmant_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_getmant_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_getmant_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_roundscale_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_roundscale_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_roundscale_round_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_roundscale_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_roundscale_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_roundscale_round_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_roundscale_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_roundscale_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_roundscale_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_roundscale_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_roundscale_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_roundscale_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_floor_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_floor_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_floor_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_floor_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_ceil_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_ceil_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_ceil_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_ceil_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_floor_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_floor_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_floor_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_floor_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_ceil_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_ceil_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_ceil_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_ceil_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_alignr_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_alignr_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_alignr_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_alignr_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_alignr_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_alignr_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpeq_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpeq_epi32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpeq_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpeq_epi32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpeq_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpeq_epi64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpeq_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpeq_epi64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpgt_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpgt_epi32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpgt_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpgt_epi32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpgt_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpgt_epi64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpgt_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpgt_epi64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpge_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpge_epi32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpge_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpge_epi32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpge_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpge_epu32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpge_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpge_epu32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpge_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpge_epi64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpge_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpge_epi64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpge_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpge_epu64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpge_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpge_epu64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmple_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmple_epi32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmple_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmple_epi32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmple_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmple_epu32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmple_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmple_epu32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmple_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmple_epi64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmple_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmple_epi64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmple_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmple_epu64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmple_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmple_epu64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmplt_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmplt_epi32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmplt_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmplt_epi32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmplt_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmplt_epu32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmplt_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmplt_epu32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmplt_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmplt_epi64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmplt_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmplt_epi64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmplt_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmplt_epu64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmplt_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmplt_epu64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpneq_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpneq_epi32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpneq_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpneq_epi32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpneq_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpneq_epu32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpneq_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpneq_epu32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpneq_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpneq_epi64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpneq_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpneq_epi64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpneq_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpneq_epu64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpneq_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpneq_epu64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__kshiftli_mask16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__kshiftri_mask16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmp_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmp_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmp_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmp_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmp_round_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmp_round_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmp_epi64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmp_epi32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmp_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmp_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmp_round_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmp_round_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cmp_round_sd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_cmp_round_sd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cmp_round_ss_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_cmp_round_ss_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i32gather_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i32gather_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i32gather_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i32gather_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i64gather_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i64gather_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i64gather_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i64gather_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i32gather_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i32gather_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i32gather_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i32gather_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i64gather_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i64gather_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i64gather_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i64gather_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i32scatter_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i32scatter_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i32scatter_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i32scatter_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i64scatter_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i64scatter_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i64scatter_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i64scatter_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i32scatter_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i32scatter_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i32scatter_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i32scatter_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i64scatter_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i64scatter_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_i64scatter_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_i64scatter_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_compress_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_compress_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_compress_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_compress_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_compressstoreu_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_compressstoreu_pd(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_compress_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_compress_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_compress_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_compress_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_compressstoreu_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_compressstoreu_ps(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_compress_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_compress_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_compress_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_compress_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_compressstoreu_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_compressstoreu_epi64(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_compress_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_compress_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_compress_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_compress_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_compressstoreu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    void * arg0 = (void *) *((void **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    _mm512_mask_compressstoreu_epi32(arg0, arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_expand_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_expand_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_expand_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_expand_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_expandloadu_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_expandloadu_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_expandloadu_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_expandloadu_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_expand_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_expand_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_expand_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_expand_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_expandloadu_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_expandloadu_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_expandloadu_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_expandloadu_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_expand_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_expand_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_expand_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_expand_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_expandloadu_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_expandloadu_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_expandloadu_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_expandloadu_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_expand_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_expand_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_expand_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_expand_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_expandloadu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    void const * arg3 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_expandloadu_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_expandloadu_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    void const * arg2 = (void const *) *((void const **) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_expandloadu_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__kortest_mask16_u8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    unsigned char * arg3 = (unsigned char *) *((unsigned char **) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((unsigned char *) PyLong_AsVoidPtr(*args)) = _kortest_mask16_u8(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__kortestz_mask16_u8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((unsigned char *) PyLong_AsVoidPtr(*args)) = _kortestz_mask16_u8(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__kortestc_mask16_u8_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((unsigned char *) PyLong_AsVoidPtr(*args)) = _kortestc_mask16_u8(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__cvtmask16_u32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned int *) PyLong_AsVoidPtr(*args)) = _cvtmask16_u32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__cvtu32_mask16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    unsigned int arg1 = (unsigned int) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 1));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _cvtu32_mask16(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__load_mask16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __mmask16 * arg1 = (__mmask16 *) *((__mmask16 **) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _load_mask16(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__store_mask16_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __mmask16 * arg0 = (__mmask16 *) *((__mmask16 **) PyLong_AsVoidPtr(*(((PyObject **) args) + 0)));
    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    _store_mask16(arg0, arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_kand_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_kand(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_kandn_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_kandn(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_kor_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_kor(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_kortestz_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_kortestz(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_kortestc_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_kortestc(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_kxnor_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_kxnor(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_kxor_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_kxor(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_knot_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_knot(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_kunpackb_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_kunpackb(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_inserti32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_insertf32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_inserti32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_insertf32x4_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_max_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_max_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_max_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_max_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_max_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_max_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_min_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_min_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_min_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_min_epi64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_min_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_min_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_max_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_max_epu64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_max_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_max_epu64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_max_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_max_epu64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_min_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_min_epu64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_min_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_min_epu64(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_min_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_min_epu64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_max_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_max_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_max_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_max_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_max_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_max_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_min_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_min_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_min_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_min_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_min_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_min_epi32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_max_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_max_epu32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_max_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_max_epu32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_max_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_max_epu32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_min_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_min_epu32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_min_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_min_epu32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_min_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512i arg4 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_min_epu32(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_unpacklo_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_unpacklo_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_unpacklo_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_unpacklo_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_unpacklo_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_unpacklo_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_max_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_max_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_max_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_max_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_max_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_max_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_min_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_min_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_min_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_min_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_min_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_min_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_blend_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_blend_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_blend_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_blend_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_blend_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_blend_epi64(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_blend_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_blend_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fmadd_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fmadd_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fmsub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fmsub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fnmadd_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fnmadd_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fnmsub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fnmsub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fmadd_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_fmadd_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fmadd_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_fmadd_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fmadd_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask3_fmadd_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fmadd_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask3_fmadd_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fmadd_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_fmadd_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fmadd_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_fmadd_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fmsub_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_fmsub_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fmsub_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_fmsub_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fmsub_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask3_fmsub_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fmsub_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask3_fmsub_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fmsub_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_fmsub_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fmsub_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_fmsub_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fnmadd_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_fnmadd_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fnmadd_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_fnmadd_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fnmadd_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask3_fnmadd_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fnmadd_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask3_fnmadd_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fnmadd_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_fnmadd_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fnmadd_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_fnmadd_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fnmsub_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_fnmsub_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fnmsub_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_fnmsub_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fnmsub_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask3_fnmsub_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fnmsub_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask3_fnmsub_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fnmsub_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_fnmsub_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fnmsub_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_fnmsub_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fmadd_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fmadd_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fmadd_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fmadd_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fmadd_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fmadd_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fmsub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fmsub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fmsub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fmsub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fmsub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fmsub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fnmadd_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fnmadd_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fnmadd_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fnmadd_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fnmadd_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fnmadd_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fnmsub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fnmsub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fnmsub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask3_fnmsub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fnmsub_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fnmsub_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_comi_round_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_comi_round_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sqrt_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_sqrt_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sqrt_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sqrt_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sqrt_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sqrt_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sqrt_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_sqrt_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sqrt_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sqrt_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sqrt_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sqrt_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_add_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_add_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_add_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_add_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_add_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_add_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_add_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_add_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_add_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_add_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_add_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_add_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_add_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_add_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_add_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_add_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_add_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_add_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_add_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_add_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_sub_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sub_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_sub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_sub_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_sub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_sub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_sub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_sub_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_sub_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_sub_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_sub_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_sub_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_sub_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_sub_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_sub_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_sub_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mul_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mul_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mul_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mul_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mul_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_mul_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mul_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mul_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_mul_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_mul_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_mul_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_mul_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_mul_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_mul_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_mul_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_mul_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_mul_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_mul_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_mul_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_mul_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_div_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_div_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_div_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_div_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_div_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_div_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_div_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_div_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_div_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_div_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_div_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_div_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_div_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_div_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_div_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_div_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_div_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_div_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_div_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_div_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_max_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_max_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_max_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_max_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_max_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_max_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_max_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_max_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_max_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_max_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_max_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_max_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_max_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_max_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_max_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_max_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_max_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_max_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_max_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_max_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_min_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_min_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_min_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_min_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_min_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_min_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_min_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_min_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_min_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_min_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_min_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_min_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_min_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_min_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_min_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_min_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_min_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_min_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_min_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_min_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_scalef_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_scalef_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_scalef_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_scalef_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_scalef_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_scalef_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_scalef_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_scalef_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_scalef_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_scalef_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_scalef_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_scalef_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_scalef_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_scalef_sd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_scalef_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_scalef_ss(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_fmadd_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fmadd_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fmadd_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fmadd_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_fmadd_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fmadd_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask16 arg4 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fmadd_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fmadd_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_fmsub_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fmsub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fmsub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fmsub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_fmsub_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fmsub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask16 arg4 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fmsub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fmsub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmaddsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_fmaddsub_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmaddsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fmaddsub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmaddsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fmaddsub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmaddsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fmaddsub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmaddsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_fmaddsub_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmaddsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fmaddsub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmaddsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask16 arg4 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fmaddsub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmaddsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fmaddsub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmsubadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_fmsubadd_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmsubadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fmsubadd_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmsubadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fmsubadd_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmsubadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fmsubadd_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fmsubadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_fmsubadd_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fmsubadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fmsubadd_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fmsubadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask16 arg4 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fmsubadd_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fmsubadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fmsubadd_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fnmadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_fnmadd_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fnmadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fnmadd_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fnmadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fnmadd_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fnmadd_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fnmadd_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fnmadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_fnmadd_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fnmadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fnmadd_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fnmadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask16 arg4 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fnmadd_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fnmadd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fnmadd_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fnmsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_fnmsub_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fnmsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fnmsub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fnmsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask8 arg4 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fnmsub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fnmsub_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512d arg4 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fnmsub_pd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fnmsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_fnmsub_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fnmsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_fnmsub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask3_fnmsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __mmask16 arg4 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask3_fnmsub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fnmsub_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m512 arg4 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_fnmsub_ps(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvttpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvttpd_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvttpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvttpd_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvttpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvttpd_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvttpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvttpd_epu32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvttpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvttpd_epu32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvttpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvttpd_epu32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtpd_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtpd_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtpd_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtpd_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtpd_epu32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtpd_epu32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtpd_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtpd_epu32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvttps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvttps_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvttps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvttps_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvttps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvttps_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvttps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvttps_epu32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvttps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvttps_epu32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvttps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvttps_epu32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtps_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtps_epi32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtps_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtps_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_cvtps_epu32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtps_epu32(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtps_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtps_epu32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtsd_f64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((double *) PyLong_AsVoidPtr(*args)) = _mm512_cvtsd_f64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtss_f32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((float *) PyLong_AsVoidPtr(*args)) = _mm512_cvtss_f32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtu64_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned long long arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(*(((PyObject **) args) + 2));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_cvtu64_ss(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtu64_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned long long arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(*(((PyObject **) args) + 2));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_cvtu64_sd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtu32_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    unsigned arg2 = (unsigned) (unsigned int) PyLong_AsUnsignedLong(*(((PyObject **) args) + 2));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_cvtu32_ss(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepi32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepi32_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepi32_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepi32_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtepu32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_cvtepu32_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtepu32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtepu32_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtepu32_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtepu32_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fixupimm_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fixupimm_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fixupimm_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_fixupimm_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_fixupimm_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_fixupimm_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fixupimm_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fixupimm_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fixupimm_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_fixupimm_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_fixupimm_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_fixupimm_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtss_u64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned long long *) PyLong_AsVoidPtr(*args)) = _mm_cvtss_u64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvttss_u64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned long long *) PyLong_AsVoidPtr(*args)) = _mm_cvttss_u64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvttss_i64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm_cvttss_i64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtsi512_si32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_cvtsi512_si32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtss_u32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned *) PyLong_AsVoidPtr(*args)) = _mm_cvtss_u32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvttss_u32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned *) PyLong_AsVoidPtr(*args)) = _mm_cvttss_u32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvttss_i32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm_cvttss_i32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtsd_i32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm_cvtsd_i32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtss_i32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm_cvtss_i32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvti32_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvti32_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtsd_u64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned long long *) PyLong_AsVoidPtr(*args)) = _mm_cvtsd_u64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvttsd_u64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned long long *) PyLong_AsVoidPtr(*args)) = _mm_cvttsd_u64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvttsd_i64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm_cvttsd_i64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtsd_i64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm_cvtsd_i64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtss_i64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm_cvtss_i64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvti64_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    long long arg2 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 2));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_cvti64_sd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvti64_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    long long arg2 = (long long) PyLong_AsLongLong(*(((PyObject **) args) + 2));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_cvti64_ss(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvtsd_u32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned *) PyLong_AsVoidPtr(*args)) = _mm_cvtsd_u32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvttsd_u32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned *) PyLong_AsVoidPtr(*args)) = _mm_cvttsd_u32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cvttsd_i32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm_cvttsd_i32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtps_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256 arg1 = (__m256) *((__m256*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_cvtps_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtps_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256 arg3 = (__m256) *((__m256*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtps_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtps_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256 arg2 = (__m256) *((__m256*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtps_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtph_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_cvtph_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtph_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m256i arg3 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtph_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtph_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m256i arg2 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtph_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cvtpd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256 *) PyLong_AsVoidPtr(*args)) = _mm512_cvtpd_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cvtpd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m256 arg1 = (__m256) *((__m256*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m256 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cvtpd_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_cvtpd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m256 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_cvtpd_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_getexp_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_getexp_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask16 arg2 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getexp_ps(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_getexp_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getexp_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_getexp_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_getexp_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_getexp_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_mask_getexp_pd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_getexp_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_maskz_getexp_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_getexp_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_getexp_ss(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_getexp_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128 arg4 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_ss(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_getexp_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128 arg2 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128 arg3 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_ss(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_getexp_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_getexp_sd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_getexp_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 5) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 5 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __mmask8 arg2 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));
    __m128d arg4 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 4)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_mask_getexp_sd(arg1, arg2, arg3, arg4);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_getexp_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m128d arg2 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m128d arg3 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm_maskz_getexp_sd(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_getmant_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_getmant_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_getmant_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_getmant_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_getmant_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_getmant_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_getmant_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_getmant_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_getmant_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_getmant_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_getmant_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_getmant_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_roundscale_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_roundscale_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_roundscale_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_roundscale_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_roundscale_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_maskz_roundscale_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_roundscale_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_roundscale_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_roundscale_ss_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_roundscale_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_roundscale_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_maskz_roundscale_sd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmp_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmp_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmp_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmp_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cmp_sd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_cmp_sd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_cmp_ss_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm_mask_cmp_ss_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    PyErr_SetString(PyExc_NotImplementedError, "Target C Method require immediate numbers, and this method is not supported in PyFastUtil now.");
    return nullptr;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpeq_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpeq_pd_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpeq_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpeq_pd_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmplt_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmplt_pd_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmplt_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmplt_pd_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmple_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmple_pd_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmple_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmple_pd_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpunord_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpunord_pd_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpunord_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpunord_pd_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpneq_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpneq_pd_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpneq_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpneq_pd_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpnlt_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpnlt_pd_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpnlt_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpnlt_pd_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpnle_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpnle_pd_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpnle_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpnle_pd_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpord_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpord_pd_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpord_pd_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512d arg3 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpord_pd_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpeq_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpeq_ps_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpeq_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpeq_ps_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmplt_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmplt_ps_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmplt_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmplt_ps_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmple_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmple_ps_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmple_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmple_ps_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpunord_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpunord_ps_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpunord_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpunord_ps_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpneq_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpneq_ps_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpneq_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpneq_ps_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpnlt_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpnlt_ps_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpnlt_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpnlt_ps_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpnle_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpnle_ps_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpnle_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpnle_ps_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpord_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpord_ps_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpord_ps_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512 arg3 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpord_ps_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_kmov_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_kmov(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castpd_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_castpd_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castpd_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_castpd_si512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castps_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_castps_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castps_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_castps_si512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castsi512_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_castsi512_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castsi512_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_castsi512_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castpd512_pd128_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128d *) PyLong_AsVoidPtr(*args)) = _mm512_castpd512_pd128(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castps512_ps128_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128 *) PyLong_AsVoidPtr(*args)) = _mm512_castps512_ps128(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castsi512_si128_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m128i *) PyLong_AsVoidPtr(*args)) = _mm512_castsi512_si128(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castpd512_pd256_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256d *) PyLong_AsVoidPtr(*args)) = _mm512_castpd512_pd256(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castps512_ps256_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256 *) PyLong_AsVoidPtr(*args)) = _mm512_castps512_ps256(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castsi512_si256_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m256i *) PyLong_AsVoidPtr(*args)) = _mm512_castsi512_si256(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castpd128_pd512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_castpd128_pd512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castps128_ps512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_castps128_ps512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castsi128_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_castsi128_si512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castpd256_pd512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256d arg1 = (__m256d) *((__m256d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_castpd256_pd512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castps256_ps512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256 arg1 = (__m256) *((__m256*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_castps256_ps512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_castsi256_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_castsi256_si512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_zextpd128_pd512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128d arg1 = (__m128d) *((__m128d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_zextpd128_pd512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_zextps128_ps512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128 arg1 = (__m128) *((__m128*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_zextps128_ps512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_zextsi128_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m128i arg1 = (__m128i) *((__m128i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_zextsi128_si512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_zextpd256_pd512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256d arg1 = (__m256d) *((__m256d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512d *) PyLong_AsVoidPtr(*args)) = _mm512_zextpd256_pd512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_zextps256_ps512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256 arg1 = (__m256) *((__m256*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512 *) PyLong_AsVoidPtr(*args)) = _mm512_zextps256_ps512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_zextsi256_si512_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m256i arg1 = (__m256i) *((__m256i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((__m512i *) PyLong_AsVoidPtr(*args)) = _mm512_zextsi256_si512(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpeq_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpeq_epu32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpeq_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpeq_epu32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpeq_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpeq_epu64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpeq_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpeq_epu64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpgt_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpgt_epu32_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpgt_epu32_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask16 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpgt_epu32_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_cmpgt_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 4) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 4 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));
    __m512i arg3 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 3)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_mask_cmpgt_epu64_mask(arg1, arg2, arg3);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_cmpgt_epu64_mask_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((__mmask8 *) PyLong_AsVoidPtr(*args)) = _mm512_cmpgt_epu64_mask(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_add_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_add_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_mul_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_mul_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_and_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_and_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_or_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_or_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_add_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_add_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_mul_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_mul_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_and_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_and_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_or_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_or_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_min_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_min_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_max_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_max_epi32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_min_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned int *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_min_epu32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_max_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned int *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_max_epu32(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_min_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_min_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_max_epi32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((int *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_max_epi32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_min_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((unsigned int *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_min_epu32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_max_epu32_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((unsigned int *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_max_epu32(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_add_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((float *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_add_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_mul_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((float *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_mul_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_add_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((float *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_add_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_mul_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((float *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_mul_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_min_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((float *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_min_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_max_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512 arg1 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((float *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_max_ps(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_min_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((float *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_min_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_max_ps_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask16 arg1 = (__mmask16) *((__mmask16*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512 arg2 = (__m512) *((__m512*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((float *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_max_ps(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_add_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_add_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_mul_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_mul_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_and_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_and_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_or_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_or_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_add_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_add_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_mul_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_mul_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_and_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_and_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_or_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_or_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_min_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_min_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_max_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_max_epi64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_min_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_min_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_max_epi64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((long long *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_max_epi64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_min_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned long long *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_min_epu64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_max_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512i arg1 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((unsigned long long *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_max_epu64(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_min_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((unsigned long long *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_min_epu64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_max_epu64_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512i arg2 = (__m512i) *((__m512i*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((unsigned long long *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_max_epu64(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_add_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((double *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_add_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_mul_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((double *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_mul_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_add_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((double *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_add_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_mul_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((double *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_mul_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_min_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((double *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_min_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_reduce_max_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 2) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 2 arguments.");
        return nullptr;
    }

    __m512d arg1 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));


    *((double *) PyLong_AsVoidPtr(*args)) = _mm512_reduce_max_pd(arg1);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}

static __forceinline PyObject *SIMDLowAVX512__mm512_mask_reduce_min_pd_impl([[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) noexcept {
#if !defined(__arm__) && !defined(__arm64__)
    if (nargs != 3) {
        PyErr_SetString(PyExc_TypeError, "Function takes exactly 3 arguments.");
        return nullptr;
    }

    __mmask8 arg1 = (__mmask8) *((__mmask8*) PyLong_AsVoidPtr(*(((PyObject **) args) + 1)));
    __m512d arg2 = (__m512d) *((__m512d*) PyLong_AsVoidPtr(*(((PyObject **) args) + 2)));


    *((double *) PyLong_AsVoidPtr(*args)) = _mm512_mask_reduce_min_pd(arg1, arg2);

    Py_RETURN_NONE;
#else
    PyErr_SetString(PyExc_NotImplementedError, "AVX-512 is not supported on this architecture.");
    return nullptr;
#endif
}


extern "C" {

static PyTypeObject SIMDLowAVX512Type = {
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
};

static int SIMDLowAVX512_init([[maybe_unused]] SIMDLowAVX512 *self,
                              [[maybe_unused]] PyObject *args, [[maybe_unused]] PyObject *kwargs) {
    return 0;
}

static void SIMDLowAVX512_dealloc(SIMDLowAVX512 *self) {
    Py_TYPE(self)->tp_free((PyObject *) self);
}

static PyObject *SIMDLowAVX512_enter(PyObject *self, [[maybe_unused]] PyObject *args) {
    Py_INCREF(self);
    return self;
}

static PyObject *SIMDLowAVX512_exit([[maybe_unused]] PyObject *self,
                                    [[maybe_unused]] PyObject *const *args, [[maybe_unused]] Py_ssize_t nargs) {
    Py_RETURN_NONE;
}


static PyObject *SIMDLowAVX512__mm512_int2mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_int2mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask2int([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask2int_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_undefined_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_undefined_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_undefined_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_undefined_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_undefined_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_undefined_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set1_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set1_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set1_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set1_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set1_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set1_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set1_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set1_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set4_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set4_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set4_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set4_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set4_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set4_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set4_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set4_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_setzero_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_setzero_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_setzero([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_setzero_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_setzero_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_setzero_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_setzero_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_setzero_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_setzero_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_setzero_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mov_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mov_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mov_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mov_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mov_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mov_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mov_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mov_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_load_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_load_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_load_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_load_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_load_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_load_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_store_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_store_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_store_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_store_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_load_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_load_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_load_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_load_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_load_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_load_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_store_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_store_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_store_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_store_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mov_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mov_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mov_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mov_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_load_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_load_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_load_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_load_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_load_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_load_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_store_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_store_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_store_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_store_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mov_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mov_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mov_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mov_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_load_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_load_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_load_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_load_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_load_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_load_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_load_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_load_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_store_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_store_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_store_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_store_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_store_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_store_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mullo_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mullo_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mullo_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mullo_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mullo_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mullo_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mullox_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mullox_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mullox_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mullox_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sllv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sllv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sllv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sllv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sllv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sllv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srav_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srav_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srav_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srav_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srav_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srav_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srlv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srlv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srlv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srlv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srlv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srlv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_add_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_add_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_add_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_add_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_add_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_add_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sub_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sub_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sub_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sub_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sub_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sub_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sllv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sllv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sllv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sllv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sllv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sllv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srav_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srav_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srav_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srav_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srav_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srav_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srlv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srlv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srlv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srlv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srlv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srlv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_add_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_add_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_add_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_add_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_add_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_add_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mul_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mul_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mul_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mul_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mul_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mul_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sub_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sub_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sub_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sub_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sub_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sub_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mul_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mul_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mul_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mul_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mul_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mul_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_slli_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_slli_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_slli_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_slli_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_slli_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_slli_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sll_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sll_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sll_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sll_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sll_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sll_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srli_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srli_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srli_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srli_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srli_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srli_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srl_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srl_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srl_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srl_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srl_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srl_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srai_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srai_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srai_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srai_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srai_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srai_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sra_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sra_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sra_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sra_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sra_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sra_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_slli_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_slli_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_slli_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_slli_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_slli_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_slli_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sll_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sll_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sll_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sll_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sll_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sll_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srli_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srli_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srli_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srli_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srli_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srli_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srl_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srl_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srl_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srl_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srl_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srl_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_srai_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_srai_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_srai_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_srai_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_srai_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_srai_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sra_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sra_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sra_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sra_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sra_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sra_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_add_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_add_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_add_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_add_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_add_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_add_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_add_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_add_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_add_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_add_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_add_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_add_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_sub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_sub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_sub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_sub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_sub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_sub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_sub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_sub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_sub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_sub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_sub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_sub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_ternarylogic_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_ternarylogic_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_ternarylogic_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_ternarylogic_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_ternarylogic_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_ternarylogic_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_ternarylogic_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_ternarylogic_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_ternarylogic_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_ternarylogic_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_ternarylogic_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_ternarylogic_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rcp14_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rcp14_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rcp14_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rcp14_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rcp14_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rcp14_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rcp14_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rcp14_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rcp14_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rcp14_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rcp14_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rcp14_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_rcp14_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_rcp14_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_rcp14_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_rcp14_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_rcp14_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_rcp14_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_rcp14_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_rcp14_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_rcp14_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_rcp14_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_rcp14_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_rcp14_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rsqrt14_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rsqrt14_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rsqrt14_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rsqrt14_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rsqrt14_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rsqrt14_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rsqrt14_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rsqrt14_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rsqrt14_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rsqrt14_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rsqrt14_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rsqrt14_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_rsqrt14_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_rsqrt14_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_rsqrt14_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_rsqrt14_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_rsqrt14_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_rsqrt14_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_rsqrt14_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_rsqrt14_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_rsqrt14_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_rsqrt14_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_rsqrt14_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_rsqrt14_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sqrt_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sqrt_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sqrt_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sqrt_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sqrt_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sqrt_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sqrt_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sqrt_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sqrt_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sqrt_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sqrt_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sqrt_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_sqrt_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_sqrt_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_sqrt_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_sqrt_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_sqrt_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_sqrt_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_sqrt_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_sqrt_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_sqrt_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_sqrt_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_sqrt_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_sqrt_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi8_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi8_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi8_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi8_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi8_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi8_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi8_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi8_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi8_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi8_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi8_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi8_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi16_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi16_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi16_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi16_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi16_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi16_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi16_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi16_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi16_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi16_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi16_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi16_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi32_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi32_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi32_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi32_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepu8_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepu8_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepu8_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepu8_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepu8_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepu8_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepu8_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepu8_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepu8_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepu8_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepu8_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepu8_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepu16_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepu16_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepu16_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepu16_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepu16_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepu16_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepu16_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepu16_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepu16_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepu16_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepu16_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepu16_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepu32_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepu32_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepu32_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepu32_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepu32_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepu32_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_add_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_add_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_add_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_add_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_add_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_add_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_add_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_add_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_add_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_add_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_add_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_add_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mul_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mul_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mul_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mul_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mul_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mul_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mul_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mul_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mul_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mul_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mul_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mul_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_div_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_div_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_div_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_div_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_div_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_div_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_div_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_div_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_div_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_div_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_div_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_div_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mul_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mul_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_mul_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_mul_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_mul_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_mul_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mul_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mul_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_mul_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_mul_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_mul_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_mul_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_div_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_div_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_div_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_div_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_div_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_div_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_div_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_div_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_div_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_div_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_div_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_div_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_max_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_max_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_max_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_max_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_max_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_max_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_max_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_max_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_max_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_max_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_max_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_max_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_min_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_min_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_min_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_min_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_min_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_min_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_min_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_min_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_min_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_min_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_min_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_min_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_scalef_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_scalef_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_scalef_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_scalef_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_scalef_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_scalef_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_scalef_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_scalef_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_scalef_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_scalef_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_scalef_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_scalef_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_scalef_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_scalef_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_scalef_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_scalef_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_scalef_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_scalef_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_scalef_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_scalef_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_scalef_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_scalef_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_scalef_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_scalef_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmaddsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmaddsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmaddsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmaddsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmaddsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmaddsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmaddsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmaddsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmaddsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmaddsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmaddsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmaddsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmaddsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmaddsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmaddsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmaddsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmsubadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmsubadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmsubadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmsubadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmsubadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmsubadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmsubadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmsubadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmsubadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmsubadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmsubadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmsubadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmsubadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmsubadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmsubadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmsubadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fnmadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fnmadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fnmadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fnmadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fnmadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fnmadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fnmadd_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fnmadd_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fnmadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fnmadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fnmadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fnmadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fnmadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fnmadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fnmadd_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fnmadd_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fnmsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fnmsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fnmsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fnmsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fnmsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fnmsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fnmsub_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fnmsub_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fnmsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fnmsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fnmsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fnmsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fnmsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fnmsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fnmsub_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fnmsub_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_abs_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_abs_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_abs_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_abs_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_abs_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_abs_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_abs_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_abs_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_abs_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_abs_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_abs_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_abs_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_broadcastss_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_broadcastss_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_broadcastss_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_broadcastss_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_broadcastss_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_broadcastss_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_broadcastsd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_broadcastsd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_broadcastsd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_broadcastsd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_broadcastsd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_broadcastsd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_broadcastd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_broadcastd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_broadcastd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_broadcastd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_broadcastd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_broadcastd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set1_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set1_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_set1_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_set1_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_set1_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_set1_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_broadcastq_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_broadcastq_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_broadcastq_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_broadcastq_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_broadcastq_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_broadcastq_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_set1_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_set1_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_set1_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_set1_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_set1_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_set1_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_broadcast_f32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_broadcast_f32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_broadcast_f32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_broadcast_f32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_broadcast_f32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_broadcast_f32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_broadcast_i32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_broadcast_i32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_broadcast_i32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_broadcast_i32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_broadcast_i32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_broadcast_i32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_broadcast_f64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_broadcast_f64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_broadcast_f64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_broadcast_f64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_broadcast_f64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_broadcast_f64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_broadcast_i64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_broadcast_i64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_broadcast_i64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_broadcast_i64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_broadcast_i64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_broadcast_i64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_shuffle_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_shuffle_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_shuffle_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_shuffle_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_shuffle_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_shuffle_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_shuffle_i64x2([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_shuffle_i64x2_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_shuffle_i64x2([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_shuffle_i64x2_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_shuffle_i64x2([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_shuffle_i64x2_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_shuffle_i32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_shuffle_i32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_shuffle_i32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_shuffle_i32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_shuffle_i32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_shuffle_i32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_shuffle_f64x2([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_shuffle_f64x2_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_shuffle_f64x2([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_shuffle_f64x2_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_shuffle_f64x2([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_shuffle_f64x2_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_shuffle_f32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_shuffle_f32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_shuffle_f32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_shuffle_f32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_shuffle_f32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_shuffle_f32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rolv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rolv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rolv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rolv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rolv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rolv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rorv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rorv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rorv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rorv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rorv_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rorv_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rolv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rolv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rolv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rolv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rolv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rolv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rorv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rorv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rorv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rorv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rorv_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rorv_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtt_roundpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtt_roundpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtt_roundpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtt_roundpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtt_roundpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtt_roundpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtt_roundpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtt_roundpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtt_roundpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtt_roundpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtt_roundpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtt_roundpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtt_roundps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtt_roundps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtt_roundps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtt_roundps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtt_roundps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtt_roundps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtt_roundps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtt_roundps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtt_roundps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtt_roundps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtt_roundps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtt_roundps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtu32_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtu32_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundu64_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundu64_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundi64_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundi64_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsi64_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsi64_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundu32_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundu32_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsi32_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsi32_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundi32_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundi32_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundu64_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundu64_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsi64_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsi64_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundi64_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundi64_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi32_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi32_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_storeu_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi32_storeu_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi32_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi32_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtsepi32_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtsepi32_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi32_storeu_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi32_storeu_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi32_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi32_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi32_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtsepi32_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtusepi32_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtusepi32_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi32_storeu_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi32_storeu_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi32_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi32_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi32_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtusepi32_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi32_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi32_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_storeu_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi32_storeu_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi32_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi32_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtsepi32_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtsepi32_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi32_storeu_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi32_storeu_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi32_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi32_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi32_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtsepi32_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtusepi32_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtusepi32_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi32_storeu_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi32_storeu_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi32_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi32_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi32_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtusepi32_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi64_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi64_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi64_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi64_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi64_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtsepi64_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtsepi64_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi64_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi64_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtsepi64_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtusepi64_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtusepi64_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi64_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi64_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtusepi64_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi64_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi64_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi64_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi64_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi64_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtsepi64_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtsepi64_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi64_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi64_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtsepi64_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtusepi64_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtusepi64_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi64_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi64_epi16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtusepi64_epi16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi64_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi64_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi64_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi64_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi64_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi64_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtsepi64_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtsepi64_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtsepi64_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtsepi64_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtsepi64_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtsepi64_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtusepi64_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtusepi64_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtusepi64_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtusepi64_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtusepi64_epi8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtusepi64_epi8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi32_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi32_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi32_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi32_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepu32_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepu32_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepu32_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepu32_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepu32_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepu32_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundepi32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundepi32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundepi32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundepi32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundepi32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundepi32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundepu32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundepu32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundepu32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundepu32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundepu32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundepu32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_extractf64x4_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_extractf64x4_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_extractf64x4_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_extractf64x4_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_extractf64x4_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_extractf64x4_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_extractf32x4_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_extractf32x4_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_extractf32x4_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_extractf32x4_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_extractf32x4_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_extractf32x4_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_extracti64x4_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_extracti64x4_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_extracti64x4_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_extracti64x4_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_extracti64x4_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_extracti64x4_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_extracti32x4_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_extracti32x4_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_extracti32x4_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_extracti32x4_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_extracti32x4_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_extracti32x4_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_inserti32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_inserti32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_insertf32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_insertf32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_inserti64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_inserti64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_inserti64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_inserti64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_inserti64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_inserti64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_insertf64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_insertf64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_insertf64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_insertf64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_insertf64x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_insertf64x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_loadu_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_loadu_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_loadu_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_loadu_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_loadu_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_loadu_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_storeu_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_storeu_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_storeu_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_storeu_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_loadu_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_loadu_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_loadu_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_loadu_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_loadu_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_loadu_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_storeu_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_storeu_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_storeu_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_storeu_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_load_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_load_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_load_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_load_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_load_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_load_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_load_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_load_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_move_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_move_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_move_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_move_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_move_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_move_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_move_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_move_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_store_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_store_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_store_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_store_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_loadu_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_loadu_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_loadu_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_loadu_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_loadu_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_loadu_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_storeu_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_storeu_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_storeu_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_storeu_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_loadu_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_loadu_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_loadu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_loadu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_loadu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_loadu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_loadu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_loadu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_storeu_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_storeu_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_storeu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_storeu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_storeu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_storeu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutevar_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutevar_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutevar_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutevar_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutevar_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutevar_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutevar_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutevar_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutevar_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutevar_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutevar_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutevar_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutex2var_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutex2var_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutex2var_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutex2var_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask2_permutex2var_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask2_permutex2var_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutex2var_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutex2var_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutex2var_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutex2var_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutex2var_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutex2var_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask2_permutex2var_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask2_permutex2var_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutex2var_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutex2var_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutex2var_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutex2var_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutex2var_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutex2var_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask2_permutex2var_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask2_permutex2var_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutex2var_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutex2var_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutex2var_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutex2var_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutex2var_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutex2var_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask2_permutex2var_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask2_permutex2var_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutex2var_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutex2var_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permute_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permute_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permute_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permute_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permute_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permute_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permute_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permute_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permute_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permute_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permute_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permute_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutex_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutex_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutex_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutex_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutex_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutex_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutex_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutex_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutex_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutex_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutex_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutex_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutexvar_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutexvar_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutexvar_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutexvar_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutexvar_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutexvar_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutexvar_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutexvar_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutexvar_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutexvar_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutexvar_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutexvar_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutexvar_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutexvar_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutexvar_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutexvar_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutexvar_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutexvar_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_permutexvar_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_permutexvar_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_permutexvar_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_permutexvar_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_permutexvar_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_permutexvar_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_shuffle_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_shuffle_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_shuffle_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_shuffle_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_shuffle_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_shuffle_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_shuffle_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_shuffle_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_shuffle_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_shuffle_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_shuffle_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_shuffle_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fixupimm_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fixupimm_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fixupimm_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fixupimm_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fixupimm_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fixupimm_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fixupimm_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fixupimm_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fixupimm_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fixupimm_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fixupimm_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fixupimm_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fixupimm_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fixupimm_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fixupimm_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fixupimm_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fixupimm_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fixupimm_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fixupimm_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fixupimm_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fixupimm_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fixupimm_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fixupimm_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fixupimm_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_movehdup_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_movehdup_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_movehdup_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_movehdup_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_movehdup_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_movehdup_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_moveldup_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_moveldup_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_moveldup_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_moveldup_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_moveldup_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_moveldup_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_or_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_or_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_or_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_or_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_or_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_or_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_or_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_or_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_or_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_or_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_or_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_or_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_or_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_or_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_xor_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_xor_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_xor_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_xor_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_xor_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_xor_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_xor_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_xor_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_xor_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_xor_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_xor_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_xor_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_xor_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_xor_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rol_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rol_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rol_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rol_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rol_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rol_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_ror_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_ror_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_ror_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_ror_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_ror_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_ror_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_rol_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_rol_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_rol_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_rol_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_rol_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_rol_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_ror_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_ror_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_ror_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_ror_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_ror_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_ror_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_and_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_and_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_and_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_and_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_and_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_and_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_and_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_and_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_and_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_and_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_and_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_and_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_and_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_and_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_andnot_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_andnot_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_andnot_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_andnot_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_andnot_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_andnot_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_andnot_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_andnot_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_andnot_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_andnot_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_andnot_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_andnot_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_andnot_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_andnot_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_test_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_test_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_test_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_test_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_test_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_test_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_test_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_test_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_testn_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_testn_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_testn_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_testn_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_testn_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_testn_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_testn_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_testn_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_abs_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_abs_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_abs_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_abs_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_abs_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_abs_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_abs_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_abs_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_unpackhi_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_unpackhi_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_unpackhi_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_unpackhi_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_unpackhi_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_unpackhi_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_unpackhi_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_unpackhi_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_unpackhi_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_unpackhi_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_unpackhi_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_unpackhi_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_unpacklo_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_unpacklo_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_unpacklo_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_unpacklo_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_unpacklo_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_unpacklo_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_unpacklo_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_unpacklo_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_unpacklo_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_unpacklo_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_unpacklo_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_unpacklo_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundss_u64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundss_u64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundss_si64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundss_si64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundss_i64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundss_i64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundss_u64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundss_u64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundss_i64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundss_i64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundss_si64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundss_si64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundss_u32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundss_u32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundss_si32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundss_si32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundss_i32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundss_i32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundss_u32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundss_u32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundss_i32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundss_i32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundss_si32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundss_si32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsd_u64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsd_u64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsd_si64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsd_si64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsd_i64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsd_i64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundsd_u64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundsd_u64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundsd_si64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundsd_si64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundsd_i64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundsd_i64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsd_u32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsd_u32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsd_si32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsd_si32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsd_i32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsd_i32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundsd_u32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundsd_u32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundsd_i32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundsd_i32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtt_roundsd_si32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtt_roundsd_si32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_movedup_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_movedup_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_movedup_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_movedup_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_movedup_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_movedup_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_unpacklo_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_unpacklo_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_unpacklo_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_unpacklo_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_unpacklo_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_unpacklo_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_unpackhi_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_unpackhi_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_unpackhi_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_unpackhi_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_unpackhi_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_unpackhi_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_unpackhi_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_unpackhi_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_unpackhi_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_unpackhi_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_unpackhi_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_unpackhi_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundps_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundps_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundps_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundps_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundps_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundps_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundph_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundph_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundph_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundph_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundph_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundph_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundps_ph([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundps_ph_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtps_ph([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtps_ph_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundps_ph([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundps_ph_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtps_ph([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtps_ph_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundps_ph([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundps_ph_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtps_ph([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtps_ph_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvt_roundpd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvt_roundpd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvt_roundpd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvt_roundpd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvt_roundpd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvt_roundpd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundsd_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundsd_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_cvt_roundsd_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_cvt_roundsd_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_cvt_roundsd_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_cvt_roundsd_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvt_roundss_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvt_roundss_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_cvt_roundss_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_cvt_roundss_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_cvt_roundss_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_cvt_roundss_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_stream_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_stream_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_stream_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_stream_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_stream_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_stream_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_stream_load_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_stream_load_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_getexp_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_getexp_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_getexp_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_getexp_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_getexp_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_getexp_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_getexp_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_getexp_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_getexp_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_getexp_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_getexp_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_getexp_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_getexp_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_getexp_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_getexp_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_getexp_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_getexp_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_getexp_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_getexp_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_getexp_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_getexp_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_getexp_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_getexp_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_getexp_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_getmant_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_getmant_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_getmant_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_getmant_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_getmant_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_getmant_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_getmant_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_getmant_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_getmant_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_getmant_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_getmant_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_getmant_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_getmant_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_getmant_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_getmant_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_getmant_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_getmant_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_getmant_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_getmant_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_getmant_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_getmant_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_getmant_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_getmant_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_getmant_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_roundscale_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_roundscale_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_roundscale_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_roundscale_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_roundscale_round_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_roundscale_round_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_roundscale_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_roundscale_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_roundscale_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_roundscale_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_roundscale_round_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_roundscale_round_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_roundscale_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_roundscale_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_roundscale_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_roundscale_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_roundscale_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_roundscale_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_roundscale_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_roundscale_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_roundscale_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_roundscale_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_roundscale_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_roundscale_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_floor_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_floor_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_floor_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_floor_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_ceil_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_ceil_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_ceil_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_ceil_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_floor_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_floor_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_floor_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_floor_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_ceil_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_ceil_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_ceil_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_ceil_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_alignr_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_alignr_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_alignr_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_alignr_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_alignr_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_alignr_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_alignr_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_alignr_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_alignr_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_alignr_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_alignr_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_alignr_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpeq_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpeq_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpeq_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpeq_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpeq_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpeq_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpeq_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpeq_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpgt_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpgt_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpgt_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpgt_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpgt_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpgt_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpgt_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpgt_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpge_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpge_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpge_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpge_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpge_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpge_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpge_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpge_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpge_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpge_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpge_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpge_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpge_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpge_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpge_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpge_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmple_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmple_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmple_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmple_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmple_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmple_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmple_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmple_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmple_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmple_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmple_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmple_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmple_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmple_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmple_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmple_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmplt_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmplt_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmplt_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmplt_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmplt_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmplt_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmplt_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmplt_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmplt_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmplt_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmplt_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmplt_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmplt_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmplt_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmplt_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmplt_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpneq_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpneq_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpneq_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpneq_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpneq_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpneq_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpneq_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpneq_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpneq_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpneq_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpneq_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpneq_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpneq_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpneq_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpneq_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpneq_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__kshiftli_mask16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__kshiftli_mask16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__kshiftri_mask16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__kshiftri_mask16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmp_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmp_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmp_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmp_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmp_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmp_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmp_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmp_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmp_round_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmp_round_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmp_round_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmp_round_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmp_epi64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmp_epi64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmp_epi32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmp_epi32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmp_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmp_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmp_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmp_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmp_round_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmp_round_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmp_round_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmp_round_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cmp_round_sd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cmp_round_sd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_cmp_round_sd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_cmp_round_sd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cmp_round_ss_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cmp_round_ss_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_cmp_round_ss_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_cmp_round_ss_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i32gather_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i32gather_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i32gather_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i32gather_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i32gather_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i32gather_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i32gather_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i32gather_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i64gather_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i64gather_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i64gather_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i64gather_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i64gather_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i64gather_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i64gather_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i64gather_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i32gather_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i32gather_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i32gather_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i32gather_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i32gather_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i32gather_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i32gather_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i32gather_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i64gather_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i64gather_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i64gather_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i64gather_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i64gather_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i64gather_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i64gather_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i64gather_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i32scatter_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i32scatter_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i32scatter_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i32scatter_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i32scatter_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i32scatter_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i32scatter_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i32scatter_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i64scatter_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i64scatter_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i64scatter_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i64scatter_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i64scatter_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i64scatter_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i64scatter_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i64scatter_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i32scatter_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i32scatter_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i32scatter_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i32scatter_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i32scatter_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i32scatter_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i32scatter_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i32scatter_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i64scatter_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i64scatter_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i64scatter_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i64scatter_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_i64scatter_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_i64scatter_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_i64scatter_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_i64scatter_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_compress_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_compress_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_compress_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_compress_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_compressstoreu_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_compressstoreu_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_compress_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_compress_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_compress_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_compress_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_compressstoreu_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_compressstoreu_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_compress_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_compress_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_compress_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_compress_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_compressstoreu_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_compressstoreu_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_compress_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_compress_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_compress_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_compress_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_compressstoreu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_compressstoreu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_expand_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_expand_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_expand_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_expand_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_expandloadu_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_expandloadu_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_expandloadu_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_expandloadu_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_expand_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_expand_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_expand_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_expand_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_expandloadu_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_expandloadu_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_expandloadu_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_expandloadu_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_expand_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_expand_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_expand_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_expand_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_expandloadu_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_expandloadu_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_expandloadu_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_expandloadu_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_expand_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_expand_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_expand_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_expand_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_expandloadu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_expandloadu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_expandloadu_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_expandloadu_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__kortest_mask16_u8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__kortest_mask16_u8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__kortestz_mask16_u8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__kortestz_mask16_u8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__kortestc_mask16_u8([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__kortestc_mask16_u8_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__cvtmask16_u32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__cvtmask16_u32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__cvtu32_mask16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__cvtu32_mask16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__load_mask16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__load_mask16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__store_mask16([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__store_mask16_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_kand([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_kand_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_kandn([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_kandn_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_kor([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_kor_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_kortestz([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_kortestz_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_kortestc([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_kortestc_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_kxnor([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_kxnor_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_kxor([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_kxor_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_knot([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_knot_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_kunpackb([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_kunpackb_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_inserti32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_inserti32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_insertf32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_insertf32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_inserti32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_inserti32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_insertf32x4([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_insertf32x4_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_max_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_max_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_max_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_max_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_max_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_max_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_min_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_min_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_min_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_min_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_min_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_min_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_max_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_max_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_max_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_max_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_max_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_max_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_min_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_min_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_min_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_min_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_min_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_min_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_max_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_max_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_max_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_max_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_max_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_max_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_min_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_min_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_min_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_min_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_min_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_min_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_max_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_max_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_max_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_max_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_max_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_max_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_min_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_min_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_min_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_min_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_min_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_min_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_unpacklo_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_unpacklo_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_unpacklo_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_unpacklo_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_unpacklo_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_unpacklo_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_max_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_max_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_max_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_max_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_max_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_max_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_max_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_max_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_max_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_max_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_max_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_max_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_min_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_min_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_min_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_min_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_min_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_min_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_min_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_min_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_min_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_min_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_min_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_min_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_blend_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_blend_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_blend_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_blend_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_blend_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_blend_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_blend_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_blend_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fmadd_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fmadd_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fmadd_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fmadd_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fmsub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fmsub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fmsub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fmsub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fnmadd_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fnmadd_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fnmadd_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fnmadd_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fnmsub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fnmsub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fnmsub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fnmsub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fmadd_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fmadd_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fmadd_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fmadd_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fmadd_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fmadd_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fmadd_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fmadd_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fmadd_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fmadd_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fmadd_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fmadd_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fmsub_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fmsub_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fmsub_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fmsub_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fmsub_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fmsub_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fmsub_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fmsub_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fmsub_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fmsub_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fmsub_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fmsub_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fnmadd_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fnmadd_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fnmadd_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fnmadd_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fnmadd_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fnmadd_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fnmadd_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fnmadd_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fnmadd_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fnmadd_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fnmadd_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fnmadd_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fnmsub_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fnmsub_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fnmsub_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fnmsub_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fnmsub_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fnmsub_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fnmsub_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fnmsub_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fnmsub_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fnmsub_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fnmsub_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fnmsub_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fmadd_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fmadd_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fmadd_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fmadd_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fmadd_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fmadd_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fmadd_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fmadd_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fmadd_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fmadd_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fmadd_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fmadd_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fmsub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fmsub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fmsub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fmsub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fmsub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fmsub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fmsub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fmsub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fmsub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fmsub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fmsub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fmsub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fnmadd_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fnmadd_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fnmadd_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fnmadd_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fnmadd_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fnmadd_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fnmadd_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fnmadd_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fnmadd_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fnmadd_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fnmadd_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fnmadd_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fnmsub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fnmsub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fnmsub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fnmsub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fnmsub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fnmsub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask3_fnmsub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask3_fnmsub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fnmsub_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fnmsub_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fnmsub_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fnmsub_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_comi_round_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_comi_round_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_comi_round_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_comi_round_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sqrt_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sqrt_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sqrt_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sqrt_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sqrt_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sqrt_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sqrt_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sqrt_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sqrt_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sqrt_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sqrt_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sqrt_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_add_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_add_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_add_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_add_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_add_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_add_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_add_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_add_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_add_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_add_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_add_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_add_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_add_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_add_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_add_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_add_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_add_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_add_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_add_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_add_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_sub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_sub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_sub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_sub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_sub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_sub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_sub_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_sub_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_sub_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_sub_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_sub_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_sub_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_sub_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_sub_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mul_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mul_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mul_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mul_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mul_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mul_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mul_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mul_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_mul_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_mul_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_mul_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_mul_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_mul_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_mul_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_mul_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_mul_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_mul_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_mul_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_mul_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_mul_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_div_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_div_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_div_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_div_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_div_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_div_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_div_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_div_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_div_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_div_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_div_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_div_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_div_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_div_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_div_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_div_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_div_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_div_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_div_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_div_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_max_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_max_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_max_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_max_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_max_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_max_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_max_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_max_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_max_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_max_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_max_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_max_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_max_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_max_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_max_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_max_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_max_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_max_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_max_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_max_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_min_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_min_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_min_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_min_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_min_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_min_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_min_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_min_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_min_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_min_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_min_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_min_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_min_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_min_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_min_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_min_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_min_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_min_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_min_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_min_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_scalef_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_scalef_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_scalef_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_scalef_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_scalef_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_scalef_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_scalef_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_scalef_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_scalef_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_scalef_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_scalef_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_scalef_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_scalef_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_scalef_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_scalef_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_scalef_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmaddsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmaddsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmaddsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmaddsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmaddsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmaddsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmaddsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmaddsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmaddsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmaddsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmaddsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmaddsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmaddsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmaddsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmaddsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmaddsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmsubadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmsubadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmsubadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmsubadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmsubadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmsubadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmsubadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmsubadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fmsubadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fmsubadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fmsubadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fmsubadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fmsubadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fmsubadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fmsubadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fmsubadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fnmadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fnmadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fnmadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fnmadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fnmadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fnmadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fnmadd_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fnmadd_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fnmadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fnmadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fnmadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fnmadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fnmadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fnmadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fnmadd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fnmadd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fnmsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fnmsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fnmsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fnmsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fnmsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fnmsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fnmsub_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fnmsub_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fnmsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fnmsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fnmsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fnmsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask3_fnmsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask3_fnmsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fnmsub_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fnmsub_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvttpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvttpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvttpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvttpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvttpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvttpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvttpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvttpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvttpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvttpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvttpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvttpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtpd_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtpd_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtpd_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtpd_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvttps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvttps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvttps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvttps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvttps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvttps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvttps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvttps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvttps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvttps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvttps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvttps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtps_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtps_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtps_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtps_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtsd_f64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtsd_f64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtss_f32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtss_f32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtu64_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtu64_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtu64_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtu64_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtu32_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtu32_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepi32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepi32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepi32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepi32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepi32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepi32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtepu32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtepu32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtepu32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtepu32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtepu32_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtepu32_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fixupimm_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fixupimm_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fixupimm_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fixupimm_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fixupimm_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fixupimm_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_fixupimm_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_fixupimm_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_fixupimm_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_fixupimm_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_fixupimm_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_fixupimm_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fixupimm_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fixupimm_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fixupimm_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fixupimm_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fixupimm_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fixupimm_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_fixupimm_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_fixupimm_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_fixupimm_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_fixupimm_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_fixupimm_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_fixupimm_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtss_u64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtss_u64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvttss_u64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvttss_u64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvttss_i64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvttss_i64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtsi512_si32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtsi512_si32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtss_u32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtss_u32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvttss_u32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvttss_u32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvttss_i32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvttss_i32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtsd_i32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtsd_i32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtss_i32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtss_i32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvti32_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvti32_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvti32_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvti32_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtsd_u64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtsd_u64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvttsd_u64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvttsd_u64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvttsd_i64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvttsd_i64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtsd_i64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtsd_i64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtss_i64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtss_i64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvti64_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvti64_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvti64_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvti64_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvtsd_u32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvtsd_u32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvttsd_u32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvttsd_u32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cvttsd_i32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cvttsd_i32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtps_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtps_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtps_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtps_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtps_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtps_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtph_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtph_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtph_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtph_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtph_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtph_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cvtpd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cvtpd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cvtpd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cvtpd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_cvtpd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_cvtpd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_getexp_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_getexp_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_getexp_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_getexp_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_getexp_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_getexp_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_getexp_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_getexp_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_getexp_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_getexp_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_getexp_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_getexp_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_getexp_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_getexp_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_getexp_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_getexp_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_getexp_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_getexp_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_getexp_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_getexp_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_getexp_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_getexp_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_getexp_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_getexp_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_getmant_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_getmant_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_getmant_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_getmant_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_getmant_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_getmant_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_getmant_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_getmant_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_getmant_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_getmant_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_getmant_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_getmant_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_getmant_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_getmant_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_getmant_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_getmant_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_getmant_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_getmant_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_getmant_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_getmant_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_getmant_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_getmant_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_getmant_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_getmant_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_roundscale_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_roundscale_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_roundscale_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_roundscale_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_roundscale_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_roundscale_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_roundscale_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_roundscale_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_roundscale_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_roundscale_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_maskz_roundscale_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_maskz_roundscale_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_roundscale_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_roundscale_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_roundscale_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_roundscale_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_roundscale_ss([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_roundscale_ss_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_roundscale_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_roundscale_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_roundscale_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_roundscale_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_maskz_roundscale_sd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_maskz_roundscale_sd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmp_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmp_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmp_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmp_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmp_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmp_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmp_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmp_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cmp_sd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cmp_sd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_cmp_sd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_cmp_sd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_cmp_ss_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_cmp_ss_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm_mask_cmp_ss_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm_mask_cmp_ss_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpeq_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpeq_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpeq_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpeq_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmplt_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmplt_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmplt_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmplt_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmple_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmple_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmple_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmple_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpunord_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpunord_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpunord_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpunord_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpneq_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpneq_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpneq_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpneq_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpnlt_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpnlt_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpnlt_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpnlt_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpnle_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpnle_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpnle_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpnle_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpord_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpord_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpord_pd_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpord_pd_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpeq_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpeq_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpeq_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpeq_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmplt_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmplt_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmplt_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmplt_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmple_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmple_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmple_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmple_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpunord_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpunord_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpunord_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpunord_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpneq_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpneq_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpneq_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpneq_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpnlt_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpnlt_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpnlt_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpnlt_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpnle_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpnle_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpnle_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpnle_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpord_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpord_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpord_ps_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpord_ps_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_kmov([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_kmov_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castpd_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castpd_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castpd_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castpd_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castps_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castps_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castps_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castps_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castsi512_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castsi512_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castsi512_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castsi512_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castpd512_pd128([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castpd512_pd128_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castps512_ps128([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castps512_ps128_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castsi512_si128([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castsi512_si128_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castpd512_pd256([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castpd512_pd256_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castps512_ps256([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castps512_ps256_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castsi512_si256([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castsi512_si256_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castpd128_pd512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castpd128_pd512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castps128_ps512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castps128_ps512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castsi128_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castsi128_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castpd256_pd512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castpd256_pd512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castps256_ps512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castps256_ps512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_castsi256_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_castsi256_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_zextpd128_pd512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_zextpd128_pd512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_zextps128_ps512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_zextps128_ps512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_zextsi128_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_zextsi128_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_zextpd256_pd512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_zextpd256_pd512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_zextps256_ps512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_zextps256_ps512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_zextsi256_si512([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_zextsi256_si512_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpeq_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpeq_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpeq_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpeq_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpeq_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpeq_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpeq_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpeq_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpgt_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpgt_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpgt_epu32_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpgt_epu32_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_cmpgt_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_cmpgt_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_cmpgt_epu64_mask([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_cmpgt_epu64_mask_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_add_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_add_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_mul_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_mul_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_and_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_and_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_or_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_or_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_add_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_add_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_mul_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_mul_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_and_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_and_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_or_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_or_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_min_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_min_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_max_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_max_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_min_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_min_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_max_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_max_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_min_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_min_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_max_epi32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_max_epi32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_min_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_min_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_max_epu32([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_max_epu32_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_add_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_add_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_mul_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_mul_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_add_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_add_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_mul_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_mul_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_min_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_min_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_max_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_max_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_min_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_min_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_max_ps([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_max_ps_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_add_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_add_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_mul_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_mul_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_and_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_and_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_or_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_or_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_add_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_add_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_mul_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_mul_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_and_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_and_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_or_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_or_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_min_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_min_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_max_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_max_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_min_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_min_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_max_epi64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_max_epi64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_min_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_min_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_max_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_max_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_min_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_min_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_max_epu64([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_max_epu64_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_add_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_add_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_mul_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_mul_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_add_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_add_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_mul_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_mul_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_min_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_min_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_reduce_max_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_reduce_max_pd_impl(args, nargs);
}

static PyObject *SIMDLowAVX512__mm512_mask_reduce_min_pd([[maybe_unused]] PyObject *pySelf, PyObject *const *args, Py_ssize_t nargs) noexcept {
    return SIMDLowAVX512__mm512_mask_reduce_min_pd_impl(args, nargs);
}


static PyMethodDef SIMDLowAVX512_methods[] = {
        {"__enter__", (PyCFunction) SIMDLowAVX512_enter, METH_NOARGS, nullptr},
        {"__exit__", (PyCFunction) SIMDLowAVX512_exit, METH_FASTCALL, nullptr},
    {"_mm512_int2mask", (PyCFunction) SIMDLowAVX512__mm512_int2mask, METH_FASTCALL, nullptr},
    {"_mm512_mask2int", (PyCFunction) SIMDLowAVX512__mm512_mask2int, METH_FASTCALL, nullptr},
    {"_mm512_set_epi64", (PyCFunction) SIMDLowAVX512__mm512_set_epi64, METH_FASTCALL, nullptr},
    {"_mm512_set_epi32", (PyCFunction) SIMDLowAVX512__mm512_set_epi32, METH_FASTCALL, nullptr},
    {"_mm512_set_epi16", (PyCFunction) SIMDLowAVX512__mm512_set_epi16, METH_FASTCALL, nullptr},
    {"_mm512_set_epi8", (PyCFunction) SIMDLowAVX512__mm512_set_epi8, METH_FASTCALL, nullptr},
    {"_mm512_set_pd", (PyCFunction) SIMDLowAVX512__mm512_set_pd, METH_FASTCALL, nullptr},
    {"_mm512_set_ps", (PyCFunction) SIMDLowAVX512__mm512_set_ps, METH_FASTCALL, nullptr},
    {"_mm512_undefined_ps", (PyCFunction) SIMDLowAVX512__mm512_undefined_ps, METH_FASTCALL, nullptr},
    {"_mm512_undefined_pd", (PyCFunction) SIMDLowAVX512__mm512_undefined_pd, METH_FASTCALL, nullptr},
    {"_mm512_undefined_epi32", (PyCFunction) SIMDLowAVX512__mm512_undefined_epi32, METH_FASTCALL, nullptr},
    {"_mm512_set1_epi8", (PyCFunction) SIMDLowAVX512__mm512_set1_epi8, METH_FASTCALL, nullptr},
    {"_mm512_set1_epi16", (PyCFunction) SIMDLowAVX512__mm512_set1_epi16, METH_FASTCALL, nullptr},
    {"_mm512_set1_pd", (PyCFunction) SIMDLowAVX512__mm512_set1_pd, METH_FASTCALL, nullptr},
    {"_mm512_set1_ps", (PyCFunction) SIMDLowAVX512__mm512_set1_ps, METH_FASTCALL, nullptr},
    {"_mm512_set4_epi32", (PyCFunction) SIMDLowAVX512__mm512_set4_epi32, METH_FASTCALL, nullptr},
    {"_mm512_set4_epi64", (PyCFunction) SIMDLowAVX512__mm512_set4_epi64, METH_FASTCALL, nullptr},
    {"_mm512_set4_pd", (PyCFunction) SIMDLowAVX512__mm512_set4_pd, METH_FASTCALL, nullptr},
    {"_mm512_set4_ps", (PyCFunction) SIMDLowAVX512__mm512_set4_ps, METH_FASTCALL, nullptr},
    {"_mm512_setzero_ps", (PyCFunction) SIMDLowAVX512__mm512_setzero_ps, METH_FASTCALL, nullptr},
    {"_mm512_setzero", (PyCFunction) SIMDLowAVX512__mm512_setzero, METH_FASTCALL, nullptr},
    {"_mm512_setzero_pd", (PyCFunction) SIMDLowAVX512__mm512_setzero_pd, METH_FASTCALL, nullptr},
    {"_mm512_setzero_epi32", (PyCFunction) SIMDLowAVX512__mm512_setzero_epi32, METH_FASTCALL, nullptr},
    {"_mm512_setzero_si512", (PyCFunction) SIMDLowAVX512__mm512_setzero_si512, METH_FASTCALL, nullptr},
    {"_mm512_mask_mov_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_mov_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mov_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_mov_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_mov_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_mov_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mov_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_mov_ps, METH_FASTCALL, nullptr},
    {"_mm512_load_pd", (PyCFunction) SIMDLowAVX512__mm512_load_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_load_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_load_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_load_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_load_pd, METH_FASTCALL, nullptr},
    {"_mm512_store_pd", (PyCFunction) SIMDLowAVX512__mm512_store_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_store_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_store_pd, METH_FASTCALL, nullptr},
    {"_mm512_load_ps", (PyCFunction) SIMDLowAVX512__mm512_load_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_load_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_load_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_load_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_load_ps, METH_FASTCALL, nullptr},
    {"_mm512_store_ps", (PyCFunction) SIMDLowAVX512__mm512_store_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_store_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_store_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_mov_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_mov_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mov_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_mov_epi64, METH_FASTCALL, nullptr},
    {"_mm512_load_epi64", (PyCFunction) SIMDLowAVX512__mm512_load_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_load_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_load_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_load_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_load_epi64, METH_FASTCALL, nullptr},
    {"_mm512_store_epi64", (PyCFunction) SIMDLowAVX512__mm512_store_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_store_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_store_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_mov_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_mov_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mov_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_mov_epi32, METH_FASTCALL, nullptr},
    {"_mm512_load_si512", (PyCFunction) SIMDLowAVX512__mm512_load_si512, METH_FASTCALL, nullptr},
    {"_mm512_load_epi32", (PyCFunction) SIMDLowAVX512__mm512_load_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_load_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_load_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_load_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_load_epi32, METH_FASTCALL, nullptr},
    {"_mm512_store_si512", (PyCFunction) SIMDLowAVX512__mm512_store_si512, METH_FASTCALL, nullptr},
    {"_mm512_store_epi32", (PyCFunction) SIMDLowAVX512__mm512_store_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_store_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_store_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mullo_epi32", (PyCFunction) SIMDLowAVX512__mm512_mullo_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mullo_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_mullo_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_mullo_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_mullo_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mullox_epi64", (PyCFunction) SIMDLowAVX512__mm512_mullox_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_mullox_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_mullox_epi64, METH_FASTCALL, nullptr},
    {"_mm512_sllv_epi32", (PyCFunction) SIMDLowAVX512__mm512_sllv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_sllv_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_sllv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sllv_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_sllv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_srav_epi32", (PyCFunction) SIMDLowAVX512__mm512_srav_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_srav_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_srav_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srav_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_srav_epi32, METH_FASTCALL, nullptr},
    {"_mm512_srlv_epi32", (PyCFunction) SIMDLowAVX512__mm512_srlv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_srlv_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_srlv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srlv_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_srlv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_add_epi64", (PyCFunction) SIMDLowAVX512__mm512_add_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_add_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_add_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_add_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_add_epi64, METH_FASTCALL, nullptr},
    {"_mm512_sub_epi64", (PyCFunction) SIMDLowAVX512__mm512_sub_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_sub_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_sub_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sub_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_sub_epi64, METH_FASTCALL, nullptr},
    {"_mm512_sllv_epi64", (PyCFunction) SIMDLowAVX512__mm512_sllv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_sllv_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_sllv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sllv_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_sllv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_srav_epi64", (PyCFunction) SIMDLowAVX512__mm512_srav_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_srav_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_srav_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srav_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_srav_epi64, METH_FASTCALL, nullptr},
    {"_mm512_srlv_epi64", (PyCFunction) SIMDLowAVX512__mm512_srlv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_srlv_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_srlv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srlv_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_srlv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_add_epi32", (PyCFunction) SIMDLowAVX512__mm512_add_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_add_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_add_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_add_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_add_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mul_epi32", (PyCFunction) SIMDLowAVX512__mm512_mul_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_mul_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_mul_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mul_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_mul_epi32, METH_FASTCALL, nullptr},
    {"_mm512_sub_epi32", (PyCFunction) SIMDLowAVX512__mm512_sub_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_sub_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_sub_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sub_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_sub_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mul_epu32", (PyCFunction) SIMDLowAVX512__mm512_mul_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_mul_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_mul_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mul_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_mul_epu32, METH_FASTCALL, nullptr},
    {"_mm512_slli_epi64", (PyCFunction) SIMDLowAVX512__mm512_slli_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_slli_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_slli_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_slli_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_slli_epi64, METH_FASTCALL, nullptr},
    {"_mm512_sll_epi64", (PyCFunction) SIMDLowAVX512__mm512_sll_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_sll_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_sll_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sll_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_sll_epi64, METH_FASTCALL, nullptr},
    {"_mm512_srli_epi64", (PyCFunction) SIMDLowAVX512__mm512_srli_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_srli_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_srli_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srli_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_srli_epi64, METH_FASTCALL, nullptr},
    {"_mm512_srl_epi64", (PyCFunction) SIMDLowAVX512__mm512_srl_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_srl_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_srl_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srl_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_srl_epi64, METH_FASTCALL, nullptr},
    {"_mm512_srai_epi64", (PyCFunction) SIMDLowAVX512__mm512_srai_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_srai_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_srai_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srai_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_srai_epi64, METH_FASTCALL, nullptr},
    {"_mm512_sra_epi64", (PyCFunction) SIMDLowAVX512__mm512_sra_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_sra_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_sra_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sra_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_sra_epi64, METH_FASTCALL, nullptr},
    {"_mm512_slli_epi32", (PyCFunction) SIMDLowAVX512__mm512_slli_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_slli_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_slli_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_slli_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_slli_epi32, METH_FASTCALL, nullptr},
    {"_mm512_sll_epi32", (PyCFunction) SIMDLowAVX512__mm512_sll_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_sll_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_sll_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sll_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_sll_epi32, METH_FASTCALL, nullptr},
    {"_mm512_srli_epi32", (PyCFunction) SIMDLowAVX512__mm512_srli_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_srli_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_srli_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srli_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_srli_epi32, METH_FASTCALL, nullptr},
    {"_mm512_srl_epi32", (PyCFunction) SIMDLowAVX512__mm512_srl_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_srl_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_srl_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srl_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_srl_epi32, METH_FASTCALL, nullptr},
    {"_mm512_srai_epi32", (PyCFunction) SIMDLowAVX512__mm512_srai_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_srai_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_srai_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_srai_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_srai_epi32, METH_FASTCALL, nullptr},
    {"_mm512_sra_epi32", (PyCFunction) SIMDLowAVX512__mm512_sra_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_sra_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_sra_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sra_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_sra_epi32, METH_FASTCALL, nullptr},
    {"_mm_add_round_sd", (PyCFunction) SIMDLowAVX512__mm_add_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_add_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_add_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_add_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_add_round_sd, METH_FASTCALL, nullptr},
    {"_mm_add_round_ss", (PyCFunction) SIMDLowAVX512__mm_add_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_add_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_add_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_add_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_add_round_ss, METH_FASTCALL, nullptr},
    {"_mm_sub_round_sd", (PyCFunction) SIMDLowAVX512__mm_sub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_sub_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_sub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_sub_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_sub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_sub_round_ss", (PyCFunction) SIMDLowAVX512__mm_sub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_sub_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_sub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_sub_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_sub_round_ss, METH_FASTCALL, nullptr},
    {"_mm512_ternarylogic_epi64", (PyCFunction) SIMDLowAVX512__mm512_ternarylogic_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_ternarylogic_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_ternarylogic_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_ternarylogic_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_ternarylogic_epi64, METH_FASTCALL, nullptr},
    {"_mm512_ternarylogic_epi32", (PyCFunction) SIMDLowAVX512__mm512_ternarylogic_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_ternarylogic_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_ternarylogic_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_ternarylogic_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_ternarylogic_epi32, METH_FASTCALL, nullptr},
    {"_mm512_rcp14_pd", (PyCFunction) SIMDLowAVX512__mm512_rcp14_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_rcp14_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_rcp14_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rcp14_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_rcp14_pd, METH_FASTCALL, nullptr},
    {"_mm512_rcp14_ps", (PyCFunction) SIMDLowAVX512__mm512_rcp14_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_rcp14_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_rcp14_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rcp14_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_rcp14_ps, METH_FASTCALL, nullptr},
    {"_mm_rcp14_sd", (PyCFunction) SIMDLowAVX512__mm_rcp14_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_rcp14_sd", (PyCFunction) SIMDLowAVX512__mm_mask_rcp14_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_rcp14_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_rcp14_sd, METH_FASTCALL, nullptr},
    {"_mm_rcp14_ss", (PyCFunction) SIMDLowAVX512__mm_rcp14_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_rcp14_ss", (PyCFunction) SIMDLowAVX512__mm_mask_rcp14_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_rcp14_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_rcp14_ss, METH_FASTCALL, nullptr},
    {"_mm512_rsqrt14_pd", (PyCFunction) SIMDLowAVX512__mm512_rsqrt14_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_rsqrt14_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_rsqrt14_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rsqrt14_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_rsqrt14_pd, METH_FASTCALL, nullptr},
    {"_mm512_rsqrt14_ps", (PyCFunction) SIMDLowAVX512__mm512_rsqrt14_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_rsqrt14_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_rsqrt14_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rsqrt14_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_rsqrt14_ps, METH_FASTCALL, nullptr},
    {"_mm_rsqrt14_sd", (PyCFunction) SIMDLowAVX512__mm_rsqrt14_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_rsqrt14_sd", (PyCFunction) SIMDLowAVX512__mm_mask_rsqrt14_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_rsqrt14_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_rsqrt14_sd, METH_FASTCALL, nullptr},
    {"_mm_rsqrt14_ss", (PyCFunction) SIMDLowAVX512__mm_rsqrt14_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_rsqrt14_ss", (PyCFunction) SIMDLowAVX512__mm_mask_rsqrt14_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_rsqrt14_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_rsqrt14_ss, METH_FASTCALL, nullptr},
    {"_mm512_sqrt_round_pd", (PyCFunction) SIMDLowAVX512__mm512_sqrt_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_sqrt_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_sqrt_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sqrt_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_sqrt_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_sqrt_round_ps", (PyCFunction) SIMDLowAVX512__mm512_sqrt_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_sqrt_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_sqrt_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sqrt_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_sqrt_round_ps, METH_FASTCALL, nullptr},
    {"_mm_sqrt_round_sd", (PyCFunction) SIMDLowAVX512__mm_sqrt_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_sqrt_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_sqrt_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_sqrt_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_sqrt_round_sd, METH_FASTCALL, nullptr},
    {"_mm_sqrt_round_ss", (PyCFunction) SIMDLowAVX512__mm_sqrt_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_sqrt_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_sqrt_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_sqrt_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_sqrt_round_ss, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi8_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtepi8_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi8_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi8_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi8_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi8_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi8_epi64", (PyCFunction) SIMDLowAVX512__mm512_cvtepi8_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi8_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi8_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi8_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi8_epi64, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi16_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtepi16_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi16_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi16_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi16_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi16_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi16_epi64", (PyCFunction) SIMDLowAVX512__mm512_cvtepi16_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi16_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi16_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi16_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi16_epi64, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi32_epi64", (PyCFunction) SIMDLowAVX512__mm512_cvtepi32_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi32_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi32_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi32_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi32_epi64, METH_FASTCALL, nullptr},
    {"_mm512_cvtepu8_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtepu8_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepu8_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepu8_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepu8_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepu8_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtepu8_epi64", (PyCFunction) SIMDLowAVX512__mm512_cvtepu8_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepu8_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepu8_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepu8_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepu8_epi64, METH_FASTCALL, nullptr},
    {"_mm512_cvtepu16_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtepu16_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepu16_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepu16_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepu16_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepu16_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtepu16_epi64", (PyCFunction) SIMDLowAVX512__mm512_cvtepu16_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepu16_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepu16_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepu16_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepu16_epi64, METH_FASTCALL, nullptr},
    {"_mm512_cvtepu32_epi64", (PyCFunction) SIMDLowAVX512__mm512_cvtepu32_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepu32_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepu32_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepu32_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepu32_epi64, METH_FASTCALL, nullptr},
    {"_mm512_add_round_pd", (PyCFunction) SIMDLowAVX512__mm512_add_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_add_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_add_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_add_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_add_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_add_round_ps", (PyCFunction) SIMDLowAVX512__mm512_add_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_add_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_add_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_add_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_add_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_sub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_sub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_sub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_sub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_sub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_sub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_sub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_sub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_sub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_sub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mul_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mul_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_mul_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_mul_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mul_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_mul_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mul_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mul_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_mul_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_mul_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mul_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_mul_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_div_round_pd", (PyCFunction) SIMDLowAVX512__mm512_div_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_div_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_div_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_div_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_div_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_div_round_ps", (PyCFunction) SIMDLowAVX512__mm512_div_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_div_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_div_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_div_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_div_round_ps, METH_FASTCALL, nullptr},
    {"_mm_mul_round_sd", (PyCFunction) SIMDLowAVX512__mm_mul_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_mul_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_mul_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_mul_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_mul_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mul_round_ss", (PyCFunction) SIMDLowAVX512__mm_mul_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_mul_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_mul_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_mul_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_mul_round_ss, METH_FASTCALL, nullptr},
    {"_mm_div_round_sd", (PyCFunction) SIMDLowAVX512__mm_div_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_div_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_div_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_div_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_div_round_sd, METH_FASTCALL, nullptr},
    {"_mm_div_round_ss", (PyCFunction) SIMDLowAVX512__mm_div_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_div_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_div_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_div_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_div_round_ss, METH_FASTCALL, nullptr},
    {"_mm512_max_round_pd", (PyCFunction) SIMDLowAVX512__mm512_max_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_max_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_max_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_max_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_max_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_max_round_ps", (PyCFunction) SIMDLowAVX512__mm512_max_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_max_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_max_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_max_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_max_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_min_round_pd", (PyCFunction) SIMDLowAVX512__mm512_min_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_min_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_min_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_min_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_min_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_min_round_ps", (PyCFunction) SIMDLowAVX512__mm512_min_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_min_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_min_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_min_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_min_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_scalef_round_pd", (PyCFunction) SIMDLowAVX512__mm512_scalef_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_scalef_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_scalef_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_scalef_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_scalef_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_scalef_round_ps", (PyCFunction) SIMDLowAVX512__mm512_scalef_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_scalef_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_scalef_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_scalef_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_scalef_round_ps, METH_FASTCALL, nullptr},
    {"_mm_scalef_round_sd", (PyCFunction) SIMDLowAVX512__mm_scalef_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_scalef_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_scalef_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_scalef_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_scalef_round_sd, METH_FASTCALL, nullptr},
    {"_mm_scalef_round_ss", (PyCFunction) SIMDLowAVX512__mm_scalef_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_scalef_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_scalef_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_scalef_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_scalef_round_ss, METH_FASTCALL, nullptr},
    {"_mm512_fmadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_fmadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fmadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_fmadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_fmadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fmadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_fmsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_fmsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fmsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_fmsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_fmsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fmsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_fmaddsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_fmaddsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmaddsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fmaddsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmaddsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmaddsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmaddsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmaddsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_fmaddsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_fmaddsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmaddsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fmaddsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmaddsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmaddsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmaddsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmaddsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_fmsubadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_fmsubadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmsubadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fmsubadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmsubadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmsubadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmsubadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmsubadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_fmsubadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_fmsubadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmsubadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fmsubadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmsubadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmsubadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmsubadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmsubadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_fnmadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_fnmadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fnmadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fnmadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fnmadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fnmadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fnmadd_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fnmadd_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_fnmadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_fnmadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fnmadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fnmadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fnmadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fnmadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fnmadd_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fnmadd_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_fnmsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_fnmsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fnmsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fnmsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fnmsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fnmsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fnmsub_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fnmsub_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_fnmsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_fnmsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fnmsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fnmsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fnmsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fnmsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fnmsub_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fnmsub_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_abs_epi64", (PyCFunction) SIMDLowAVX512__mm512_abs_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_abs_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_abs_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_abs_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_abs_epi64, METH_FASTCALL, nullptr},
    {"_mm512_abs_epi32", (PyCFunction) SIMDLowAVX512__mm512_abs_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_abs_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_abs_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_abs_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_abs_epi32, METH_FASTCALL, nullptr},
    {"_mm512_broadcastss_ps", (PyCFunction) SIMDLowAVX512__mm512_broadcastss_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_broadcastss_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_broadcastss_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_broadcastss_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_broadcastss_ps, METH_FASTCALL, nullptr},
    {"_mm512_broadcastsd_pd", (PyCFunction) SIMDLowAVX512__mm512_broadcastsd_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_broadcastsd_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_broadcastsd_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_broadcastsd_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_broadcastsd_pd, METH_FASTCALL, nullptr},
    {"_mm512_broadcastd_epi32", (PyCFunction) SIMDLowAVX512__mm512_broadcastd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_broadcastd_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_broadcastd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_broadcastd_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_broadcastd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_set1_epi32", (PyCFunction) SIMDLowAVX512__mm512_set1_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_set1_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_set1_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_set1_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_set1_epi32, METH_FASTCALL, nullptr},
    {"_mm512_broadcastq_epi64", (PyCFunction) SIMDLowAVX512__mm512_broadcastq_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_broadcastq_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_broadcastq_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_broadcastq_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_broadcastq_epi64, METH_FASTCALL, nullptr},
    {"_mm512_set1_epi64", (PyCFunction) SIMDLowAVX512__mm512_set1_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_set1_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_set1_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_set1_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_set1_epi64, METH_FASTCALL, nullptr},
    {"_mm512_broadcast_f32x4", (PyCFunction) SIMDLowAVX512__mm512_broadcast_f32x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_broadcast_f32x4", (PyCFunction) SIMDLowAVX512__mm512_mask_broadcast_f32x4, METH_FASTCALL, nullptr},
    {"_mm512_maskz_broadcast_f32x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_broadcast_f32x4, METH_FASTCALL, nullptr},
    {"_mm512_broadcast_i32x4", (PyCFunction) SIMDLowAVX512__mm512_broadcast_i32x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_broadcast_i32x4", (PyCFunction) SIMDLowAVX512__mm512_mask_broadcast_i32x4, METH_FASTCALL, nullptr},
    {"_mm512_maskz_broadcast_i32x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_broadcast_i32x4, METH_FASTCALL, nullptr},
    {"_mm512_broadcast_f64x4", (PyCFunction) SIMDLowAVX512__mm512_broadcast_f64x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_broadcast_f64x4", (PyCFunction) SIMDLowAVX512__mm512_mask_broadcast_f64x4, METH_FASTCALL, nullptr},
    {"_mm512_maskz_broadcast_f64x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_broadcast_f64x4, METH_FASTCALL, nullptr},
    {"_mm512_broadcast_i64x4", (PyCFunction) SIMDLowAVX512__mm512_broadcast_i64x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_broadcast_i64x4", (PyCFunction) SIMDLowAVX512__mm512_mask_broadcast_i64x4, METH_FASTCALL, nullptr},
    {"_mm512_maskz_broadcast_i64x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_broadcast_i64x4, METH_FASTCALL, nullptr},
    {"_mm512_shuffle_epi32", (PyCFunction) SIMDLowAVX512__mm512_shuffle_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_shuffle_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_shuffle_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_shuffle_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_shuffle_epi32, METH_FASTCALL, nullptr},
    {"_mm512_shuffle_i64x2", (PyCFunction) SIMDLowAVX512__mm512_shuffle_i64x2, METH_FASTCALL, nullptr},
    {"_mm512_mask_shuffle_i64x2", (PyCFunction) SIMDLowAVX512__mm512_mask_shuffle_i64x2, METH_FASTCALL, nullptr},
    {"_mm512_maskz_shuffle_i64x2", (PyCFunction) SIMDLowAVX512__mm512_maskz_shuffle_i64x2, METH_FASTCALL, nullptr},
    {"_mm512_shuffle_i32x4", (PyCFunction) SIMDLowAVX512__mm512_shuffle_i32x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_shuffle_i32x4", (PyCFunction) SIMDLowAVX512__mm512_mask_shuffle_i32x4, METH_FASTCALL, nullptr},
    {"_mm512_maskz_shuffle_i32x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_shuffle_i32x4, METH_FASTCALL, nullptr},
    {"_mm512_shuffle_f64x2", (PyCFunction) SIMDLowAVX512__mm512_shuffle_f64x2, METH_FASTCALL, nullptr},
    {"_mm512_mask_shuffle_f64x2", (PyCFunction) SIMDLowAVX512__mm512_mask_shuffle_f64x2, METH_FASTCALL, nullptr},
    {"_mm512_maskz_shuffle_f64x2", (PyCFunction) SIMDLowAVX512__mm512_maskz_shuffle_f64x2, METH_FASTCALL, nullptr},
    {"_mm512_shuffle_f32x4", (PyCFunction) SIMDLowAVX512__mm512_shuffle_f32x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_shuffle_f32x4", (PyCFunction) SIMDLowAVX512__mm512_mask_shuffle_f32x4, METH_FASTCALL, nullptr},
    {"_mm512_maskz_shuffle_f32x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_shuffle_f32x4, METH_FASTCALL, nullptr},
    {"_mm512_rolv_epi32", (PyCFunction) SIMDLowAVX512__mm512_rolv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_rolv_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_rolv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rolv_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_rolv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_rorv_epi32", (PyCFunction) SIMDLowAVX512__mm512_rorv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_rorv_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_rorv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rorv_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_rorv_epi32, METH_FASTCALL, nullptr},
    {"_mm512_rolv_epi64", (PyCFunction) SIMDLowAVX512__mm512_rolv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_rolv_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_rolv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rolv_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_rolv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_rorv_epi64", (PyCFunction) SIMDLowAVX512__mm512_rorv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_rorv_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_rorv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rorv_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_rorv_epi64, METH_FASTCALL, nullptr},
    {"_mm512_cvtt_roundpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtt_roundpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtt_roundpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtt_roundpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtt_roundpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtt_roundpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtt_roundpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_cvtt_roundpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtt_roundpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtt_roundpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtt_roundpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtt_roundpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_cvtt_roundps_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtt_roundps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtt_roundps_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtt_roundps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtt_roundps_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtt_roundps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtt_roundps_epu32", (PyCFunction) SIMDLowAVX512__mm512_cvtt_roundps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtt_roundps_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtt_roundps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtt_roundps_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtt_roundps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundps_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundps_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundps_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundps_epu32", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundps_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundps_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundps_epu32, METH_FASTCALL, nullptr},
    {"_mm_cvtu32_sd", (PyCFunction) SIMDLowAVX512__mm_cvtu32_sd, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundu64_sd", (PyCFunction) SIMDLowAVX512__mm_cvt_roundu64_sd, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundi64_sd", (PyCFunction) SIMDLowAVX512__mm_cvt_roundi64_sd, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsi64_sd", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsi64_sd, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundu32_ss", (PyCFunction) SIMDLowAVX512__mm_cvt_roundu32_ss, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsi32_ss", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsi32_ss, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundi32_ss", (PyCFunction) SIMDLowAVX512__mm_cvt_roundi32_ss, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundu64_ss", (PyCFunction) SIMDLowAVX512__mm_cvt_roundu64_ss, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsi64_ss", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsi64_ss, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundi64_ss", (PyCFunction) SIMDLowAVX512__mm_cvt_roundi64_ss, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi32_epi8", (PyCFunction) SIMDLowAVX512__mm512_cvtepi32_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi32_storeu_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi32_storeu_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi32_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi32_epi8, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi32_epi8", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi32_epi8, METH_FASTCALL, nullptr},
    {"_mm512_cvtsepi32_epi8", (PyCFunction) SIMDLowAVX512__mm512_cvtsepi32_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi32_storeu_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi32_storeu_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi32_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi32_epi8, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtsepi32_epi8", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtsepi32_epi8, METH_FASTCALL, nullptr},
    {"_mm512_cvtusepi32_epi8", (PyCFunction) SIMDLowAVX512__mm512_cvtusepi32_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi32_storeu_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi32_storeu_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi32_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi32_epi8, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtusepi32_epi8", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtusepi32_epi8, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi32_epi16", (PyCFunction) SIMDLowAVX512__mm512_cvtepi32_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi32_storeu_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi32_storeu_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi32_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi32_epi16, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi32_epi16", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi32_epi16, METH_FASTCALL, nullptr},
    {"_mm512_cvtsepi32_epi16", (PyCFunction) SIMDLowAVX512__mm512_cvtsepi32_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi32_storeu_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi32_storeu_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi32_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi32_epi16, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtsepi32_epi16", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtsepi32_epi16, METH_FASTCALL, nullptr},
    {"_mm512_cvtusepi32_epi16", (PyCFunction) SIMDLowAVX512__mm512_cvtusepi32_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi32_storeu_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi32_storeu_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi32_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi32_epi16, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtusepi32_epi16", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtusepi32_epi16, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi64_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtepi64_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi64_storeu_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi64_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi64_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi64_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi64_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtsepi64_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtsepi64_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi64_storeu_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi64_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi64_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtsepi64_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtsepi64_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtusepi64_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtusepi64_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi64_storeu_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi64_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi64_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtusepi64_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtusepi64_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi64_epi16", (PyCFunction) SIMDLowAVX512__mm512_cvtepi64_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi64_storeu_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi64_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi64_epi16, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi64_epi16", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi64_epi16, METH_FASTCALL, nullptr},
    {"_mm512_cvtsepi64_epi16", (PyCFunction) SIMDLowAVX512__mm512_cvtsepi64_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi64_storeu_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi64_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi64_epi16, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtsepi64_epi16", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtsepi64_epi16, METH_FASTCALL, nullptr},
    {"_mm512_cvtusepi64_epi16", (PyCFunction) SIMDLowAVX512__mm512_cvtusepi64_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi64_storeu_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi16, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi64_epi16", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi64_epi16, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtusepi64_epi16", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtusepi64_epi16, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi64_epi8", (PyCFunction) SIMDLowAVX512__mm512_cvtepi64_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi64_storeu_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi64_storeu_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi64_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi64_epi8, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi64_epi8", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi64_epi8, METH_FASTCALL, nullptr},
    {"_mm512_cvtsepi64_epi8", (PyCFunction) SIMDLowAVX512__mm512_cvtsepi64_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi64_storeu_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi64_storeu_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtsepi64_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtsepi64_epi8, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtsepi64_epi8", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtsepi64_epi8, METH_FASTCALL, nullptr},
    {"_mm512_cvtusepi64_epi8", (PyCFunction) SIMDLowAVX512__mm512_cvtusepi64_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi64_storeu_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi64_storeu_epi8, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtusepi64_epi8", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtusepi64_epi8, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtusepi64_epi8", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtusepi64_epi8, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi32_pd", (PyCFunction) SIMDLowAVX512__mm512_cvtepi32_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi32_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi32_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi32_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi32_pd, METH_FASTCALL, nullptr},
    {"_mm512_cvtepu32_pd", (PyCFunction) SIMDLowAVX512__mm512_cvtepu32_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepu32_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepu32_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepu32_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepu32_pd, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundepi32_ps", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundepi32_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundepi32_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundepi32_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundepi32_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundepi32_ps, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundepu32_ps", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundepu32_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundepu32_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundepu32_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundepu32_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundepu32_ps, METH_FASTCALL, nullptr},
    {"_mm512_extractf64x4_pd", (PyCFunction) SIMDLowAVX512__mm512_extractf64x4_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_extractf64x4_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_extractf64x4_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_extractf64x4_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_extractf64x4_pd, METH_FASTCALL, nullptr},
    {"_mm512_extractf32x4_ps", (PyCFunction) SIMDLowAVX512__mm512_extractf32x4_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_extractf32x4_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_extractf32x4_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_extractf32x4_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_extractf32x4_ps, METH_FASTCALL, nullptr},
    {"_mm512_extracti64x4_epi64", (PyCFunction) SIMDLowAVX512__mm512_extracti64x4_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_extracti64x4_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_extracti64x4_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_extracti64x4_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_extracti64x4_epi64, METH_FASTCALL, nullptr},
    {"_mm512_extracti32x4_epi32", (PyCFunction) SIMDLowAVX512__mm512_extracti32x4_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_extracti32x4_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_extracti32x4_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_extracti32x4_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_extracti32x4_epi32, METH_FASTCALL, nullptr},
    {"_mm512_inserti32x4", (PyCFunction) SIMDLowAVX512__mm512_inserti32x4, METH_FASTCALL, nullptr},
    {"_mm512_insertf32x4", (PyCFunction) SIMDLowAVX512__mm512_insertf32x4, METH_FASTCALL, nullptr},
    {"_mm512_inserti64x4", (PyCFunction) SIMDLowAVX512__mm512_inserti64x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_inserti64x4", (PyCFunction) SIMDLowAVX512__mm512_mask_inserti64x4, METH_FASTCALL, nullptr},
    {"_mm512_maskz_inserti64x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_inserti64x4, METH_FASTCALL, nullptr},
    {"_mm512_insertf64x4", (PyCFunction) SIMDLowAVX512__mm512_insertf64x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_insertf64x4", (PyCFunction) SIMDLowAVX512__mm512_mask_insertf64x4, METH_FASTCALL, nullptr},
    {"_mm512_maskz_insertf64x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_insertf64x4, METH_FASTCALL, nullptr},
    {"_mm512_loadu_pd", (PyCFunction) SIMDLowAVX512__mm512_loadu_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_loadu_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_loadu_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_loadu_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_loadu_pd, METH_FASTCALL, nullptr},
    {"_mm512_storeu_pd", (PyCFunction) SIMDLowAVX512__mm512_storeu_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_storeu_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_storeu_pd, METH_FASTCALL, nullptr},
    {"_mm512_loadu_ps", (PyCFunction) SIMDLowAVX512__mm512_loadu_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_loadu_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_loadu_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_loadu_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_loadu_ps, METH_FASTCALL, nullptr},
    {"_mm512_storeu_ps", (PyCFunction) SIMDLowAVX512__mm512_storeu_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_storeu_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_storeu_ps, METH_FASTCALL, nullptr},
    {"_mm_mask_load_ss", (PyCFunction) SIMDLowAVX512__mm_mask_load_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_load_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_load_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_load_sd", (PyCFunction) SIMDLowAVX512__mm_mask_load_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_load_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_load_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_move_ss", (PyCFunction) SIMDLowAVX512__mm_mask_move_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_move_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_move_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_move_sd", (PyCFunction) SIMDLowAVX512__mm_mask_move_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_move_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_move_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_store_ss", (PyCFunction) SIMDLowAVX512__mm_mask_store_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_store_sd", (PyCFunction) SIMDLowAVX512__mm_mask_store_sd, METH_FASTCALL, nullptr},
    {"_mm512_loadu_epi64", (PyCFunction) SIMDLowAVX512__mm512_loadu_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_loadu_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_loadu_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_loadu_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_loadu_epi64, METH_FASTCALL, nullptr},
    {"_mm512_storeu_epi64", (PyCFunction) SIMDLowAVX512__mm512_storeu_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_storeu_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_storeu_epi64, METH_FASTCALL, nullptr},
    {"_mm512_loadu_si512", (PyCFunction) SIMDLowAVX512__mm512_loadu_si512, METH_FASTCALL, nullptr},
    {"_mm512_loadu_epi32", (PyCFunction) SIMDLowAVX512__mm512_loadu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_loadu_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_loadu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_loadu_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_loadu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_storeu_si512", (PyCFunction) SIMDLowAVX512__mm512_storeu_si512, METH_FASTCALL, nullptr},
    {"_mm512_storeu_epi32", (PyCFunction) SIMDLowAVX512__mm512_storeu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_storeu_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_storeu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_permutevar_pd", (PyCFunction) SIMDLowAVX512__mm512_permutevar_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutevar_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_permutevar_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutevar_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutevar_pd, METH_FASTCALL, nullptr},
    {"_mm512_permutevar_ps", (PyCFunction) SIMDLowAVX512__mm512_permutevar_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutevar_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_permutevar_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutevar_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutevar_ps, METH_FASTCALL, nullptr},
    {"_mm512_permutex2var_epi64", (PyCFunction) SIMDLowAVX512__mm512_permutex2var_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutex2var_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_permutex2var_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask2_permutex2var_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask2_permutex2var_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutex2var_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutex2var_epi64, METH_FASTCALL, nullptr},
    {"_mm512_permutex2var_epi32", (PyCFunction) SIMDLowAVX512__mm512_permutex2var_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutex2var_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_permutex2var_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask2_permutex2var_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask2_permutex2var_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutex2var_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutex2var_epi32, METH_FASTCALL, nullptr},
    {"_mm512_permutex2var_pd", (PyCFunction) SIMDLowAVX512__mm512_permutex2var_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutex2var_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_permutex2var_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask2_permutex2var_pd", (PyCFunction) SIMDLowAVX512__mm512_mask2_permutex2var_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutex2var_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutex2var_pd, METH_FASTCALL, nullptr},
    {"_mm512_permutex2var_ps", (PyCFunction) SIMDLowAVX512__mm512_permutex2var_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutex2var_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_permutex2var_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask2_permutex2var_ps", (PyCFunction) SIMDLowAVX512__mm512_mask2_permutex2var_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutex2var_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutex2var_ps, METH_FASTCALL, nullptr},
    {"_mm512_permute_pd", (PyCFunction) SIMDLowAVX512__mm512_permute_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_permute_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_permute_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permute_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_permute_pd, METH_FASTCALL, nullptr},
    {"_mm512_permute_ps", (PyCFunction) SIMDLowAVX512__mm512_permute_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_permute_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_permute_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permute_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_permute_ps, METH_FASTCALL, nullptr},
    {"_mm512_permutex_epi64", (PyCFunction) SIMDLowAVX512__mm512_permutex_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutex_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_permutex_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutex_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutex_epi64, METH_FASTCALL, nullptr},
    {"_mm512_permutex_pd", (PyCFunction) SIMDLowAVX512__mm512_permutex_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutex_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_permutex_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutex_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutex_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutexvar_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutexvar_epi64, METH_FASTCALL, nullptr},
    {"_mm512_permutexvar_epi64", (PyCFunction) SIMDLowAVX512__mm512_permutexvar_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutexvar_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_permutexvar_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutexvar_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutexvar_epi32, METH_FASTCALL, nullptr},
    {"_mm512_permutexvar_epi32", (PyCFunction) SIMDLowAVX512__mm512_permutexvar_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutexvar_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_permutexvar_epi32, METH_FASTCALL, nullptr},
    {"_mm512_permutexvar_pd", (PyCFunction) SIMDLowAVX512__mm512_permutexvar_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutexvar_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_permutexvar_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutexvar_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutexvar_pd, METH_FASTCALL, nullptr},
    {"_mm512_permutexvar_ps", (PyCFunction) SIMDLowAVX512__mm512_permutexvar_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_permutexvar_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_permutexvar_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_permutexvar_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_permutexvar_ps, METH_FASTCALL, nullptr},
    {"_mm512_shuffle_ps", (PyCFunction) SIMDLowAVX512__mm512_shuffle_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_shuffle_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_shuffle_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_shuffle_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_shuffle_ps, METH_FASTCALL, nullptr},
    {"_mm512_shuffle_pd", (PyCFunction) SIMDLowAVX512__mm512_shuffle_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_shuffle_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_shuffle_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_shuffle_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_shuffle_pd, METH_FASTCALL, nullptr},
    {"_mm512_fixupimm_round_pd", (PyCFunction) SIMDLowAVX512__mm512_fixupimm_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fixupimm_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fixupimm_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fixupimm_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fixupimm_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_fixupimm_round_ps", (PyCFunction) SIMDLowAVX512__mm512_fixupimm_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fixupimm_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fixupimm_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fixupimm_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fixupimm_round_ps, METH_FASTCALL, nullptr},
    {"_mm_fixupimm_round_sd", (PyCFunction) SIMDLowAVX512__mm_fixupimm_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fixupimm_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fixupimm_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fixupimm_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fixupimm_round_sd, METH_FASTCALL, nullptr},
    {"_mm_fixupimm_round_ss", (PyCFunction) SIMDLowAVX512__mm_fixupimm_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fixupimm_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fixupimm_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fixupimm_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fixupimm_round_ss, METH_FASTCALL, nullptr},
    {"_mm512_movehdup_ps", (PyCFunction) SIMDLowAVX512__mm512_movehdup_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_movehdup_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_movehdup_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_movehdup_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_movehdup_ps, METH_FASTCALL, nullptr},
    {"_mm512_moveldup_ps", (PyCFunction) SIMDLowAVX512__mm512_moveldup_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_moveldup_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_moveldup_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_moveldup_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_moveldup_ps, METH_FASTCALL, nullptr},
    {"_mm512_or_si512", (PyCFunction) SIMDLowAVX512__mm512_or_si512, METH_FASTCALL, nullptr},
    {"_mm512_or_epi32", (PyCFunction) SIMDLowAVX512__mm512_or_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_or_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_or_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_or_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_or_epi32, METH_FASTCALL, nullptr},
    {"_mm512_or_epi64", (PyCFunction) SIMDLowAVX512__mm512_or_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_or_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_or_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_or_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_or_epi64, METH_FASTCALL, nullptr},
    {"_mm512_xor_si512", (PyCFunction) SIMDLowAVX512__mm512_xor_si512, METH_FASTCALL, nullptr},
    {"_mm512_xor_epi32", (PyCFunction) SIMDLowAVX512__mm512_xor_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_xor_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_xor_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_xor_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_xor_epi32, METH_FASTCALL, nullptr},
    {"_mm512_xor_epi64", (PyCFunction) SIMDLowAVX512__mm512_xor_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_xor_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_xor_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_xor_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_xor_epi64, METH_FASTCALL, nullptr},
    {"_mm512_rol_epi32", (PyCFunction) SIMDLowAVX512__mm512_rol_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_rol_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_rol_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rol_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_rol_epi32, METH_FASTCALL, nullptr},
    {"_mm512_ror_epi32", (PyCFunction) SIMDLowAVX512__mm512_ror_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_ror_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_ror_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_ror_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_ror_epi32, METH_FASTCALL, nullptr},
    {"_mm512_rol_epi64", (PyCFunction) SIMDLowAVX512__mm512_rol_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_rol_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_rol_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_rol_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_rol_epi64, METH_FASTCALL, nullptr},
    {"_mm512_ror_epi64", (PyCFunction) SIMDLowAVX512__mm512_ror_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_ror_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_ror_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_ror_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_ror_epi64, METH_FASTCALL, nullptr},
    {"_mm512_and_si512", (PyCFunction) SIMDLowAVX512__mm512_and_si512, METH_FASTCALL, nullptr},
    {"_mm512_and_epi32", (PyCFunction) SIMDLowAVX512__mm512_and_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_and_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_and_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_and_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_and_epi32, METH_FASTCALL, nullptr},
    {"_mm512_and_epi64", (PyCFunction) SIMDLowAVX512__mm512_and_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_and_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_and_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_and_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_and_epi64, METH_FASTCALL, nullptr},
    {"_mm512_andnot_si512", (PyCFunction) SIMDLowAVX512__mm512_andnot_si512, METH_FASTCALL, nullptr},
    {"_mm512_andnot_epi32", (PyCFunction) SIMDLowAVX512__mm512_andnot_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_andnot_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_andnot_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_andnot_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_andnot_epi32, METH_FASTCALL, nullptr},
    {"_mm512_andnot_epi64", (PyCFunction) SIMDLowAVX512__mm512_andnot_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_andnot_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_andnot_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_andnot_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_andnot_epi64, METH_FASTCALL, nullptr},
    {"_mm512_test_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_test_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_test_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_test_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_test_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_test_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_test_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_test_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_testn_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_testn_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_testn_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_testn_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_testn_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_testn_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_testn_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_testn_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_abs_ps", (PyCFunction) SIMDLowAVX512__mm512_abs_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_abs_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_abs_ps, METH_FASTCALL, nullptr},
    {"_mm512_abs_pd", (PyCFunction) SIMDLowAVX512__mm512_abs_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_abs_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_abs_pd, METH_FASTCALL, nullptr},
    {"_mm512_unpackhi_epi32", (PyCFunction) SIMDLowAVX512__mm512_unpackhi_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_unpackhi_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_unpackhi_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_unpackhi_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_unpackhi_epi32, METH_FASTCALL, nullptr},
    {"_mm512_unpackhi_epi64", (PyCFunction) SIMDLowAVX512__mm512_unpackhi_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_unpackhi_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_unpackhi_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_unpackhi_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_unpackhi_epi64, METH_FASTCALL, nullptr},
    {"_mm512_unpacklo_epi32", (PyCFunction) SIMDLowAVX512__mm512_unpacklo_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_unpacklo_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_unpacklo_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_unpacklo_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_unpacklo_epi32, METH_FASTCALL, nullptr},
    {"_mm512_unpacklo_epi64", (PyCFunction) SIMDLowAVX512__mm512_unpacklo_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_unpacklo_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_unpacklo_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_unpacklo_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_unpacklo_epi64, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundss_u64", (PyCFunction) SIMDLowAVX512__mm_cvt_roundss_u64, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundss_si64", (PyCFunction) SIMDLowAVX512__mm_cvt_roundss_si64, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundss_i64", (PyCFunction) SIMDLowAVX512__mm_cvt_roundss_i64, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundss_u64", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundss_u64, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundss_i64", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundss_i64, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundss_si64", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundss_si64, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundss_u32", (PyCFunction) SIMDLowAVX512__mm_cvt_roundss_u32, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundss_si32", (PyCFunction) SIMDLowAVX512__mm_cvt_roundss_si32, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundss_i32", (PyCFunction) SIMDLowAVX512__mm_cvt_roundss_i32, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundss_u32", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundss_u32, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundss_i32", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundss_i32, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundss_si32", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundss_si32, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsd_u64", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsd_u64, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsd_si64", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsd_si64, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsd_i64", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsd_i64, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundsd_u64", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundsd_u64, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundsd_si64", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundsd_si64, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundsd_i64", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundsd_i64, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsd_u32", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsd_u32, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsd_si32", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsd_si32, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsd_i32", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsd_i32, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundsd_u32", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundsd_u32, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundsd_i32", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundsd_i32, METH_FASTCALL, nullptr},
    {"_mm_cvtt_roundsd_si32", (PyCFunction) SIMDLowAVX512__mm_cvtt_roundsd_si32, METH_FASTCALL, nullptr},
    {"_mm512_movedup_pd", (PyCFunction) SIMDLowAVX512__mm512_movedup_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_movedup_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_movedup_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_movedup_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_movedup_pd, METH_FASTCALL, nullptr},
    {"_mm512_unpacklo_pd", (PyCFunction) SIMDLowAVX512__mm512_unpacklo_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_unpacklo_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_unpacklo_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_unpacklo_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_unpacklo_pd, METH_FASTCALL, nullptr},
    {"_mm512_unpackhi_pd", (PyCFunction) SIMDLowAVX512__mm512_unpackhi_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_unpackhi_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_unpackhi_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_unpackhi_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_unpackhi_pd, METH_FASTCALL, nullptr},
    {"_mm512_unpackhi_ps", (PyCFunction) SIMDLowAVX512__mm512_unpackhi_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_unpackhi_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_unpackhi_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_unpackhi_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_unpackhi_ps, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundps_pd", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundps_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundps_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundps_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundps_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundps_pd, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundph_ps", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundph_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundph_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundph_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundph_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundph_ps, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundps_ph", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundps_ph, METH_FASTCALL, nullptr},
    {"_mm512_cvtps_ph", (PyCFunction) SIMDLowAVX512__mm512_cvtps_ph, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundps_ph", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundps_ph, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtps_ph", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtps_ph, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundps_ph", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundps_ph, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtps_ph", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtps_ph, METH_FASTCALL, nullptr},
    {"_mm512_cvt_roundpd_ps", (PyCFunction) SIMDLowAVX512__mm512_cvt_roundpd_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvt_roundpd_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_cvt_roundpd_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvt_roundpd_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvt_roundpd_ps, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundsd_ss", (PyCFunction) SIMDLowAVX512__mm_cvt_roundsd_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_cvt_roundsd_ss", (PyCFunction) SIMDLowAVX512__mm_mask_cvt_roundsd_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_cvt_roundsd_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_cvt_roundsd_ss, METH_FASTCALL, nullptr},
    {"_mm_cvt_roundss_sd", (PyCFunction) SIMDLowAVX512__mm_cvt_roundss_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_cvt_roundss_sd", (PyCFunction) SIMDLowAVX512__mm_mask_cvt_roundss_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_cvt_roundss_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_cvt_roundss_sd, METH_FASTCALL, nullptr},
    {"_mm512_stream_si512", (PyCFunction) SIMDLowAVX512__mm512_stream_si512, METH_FASTCALL, nullptr},
    {"_mm512_stream_ps", (PyCFunction) SIMDLowAVX512__mm512_stream_ps, METH_FASTCALL, nullptr},
    {"_mm512_stream_pd", (PyCFunction) SIMDLowAVX512__mm512_stream_pd, METH_FASTCALL, nullptr},
    {"_mm512_stream_load_si512", (PyCFunction) SIMDLowAVX512__mm512_stream_load_si512, METH_FASTCALL, nullptr},
    {"_mm_getexp_round_ss", (PyCFunction) SIMDLowAVX512__mm_getexp_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_getexp_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_getexp_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_getexp_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_getexp_round_ss, METH_FASTCALL, nullptr},
    {"_mm_getexp_round_sd", (PyCFunction) SIMDLowAVX512__mm_getexp_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_getexp_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_getexp_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_getexp_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_getexp_round_sd, METH_FASTCALL, nullptr},
    {"_mm512_getexp_round_ps", (PyCFunction) SIMDLowAVX512__mm512_getexp_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_getexp_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_getexp_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_getexp_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_getexp_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_getexp_round_pd", (PyCFunction) SIMDLowAVX512__mm512_getexp_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_getexp_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_getexp_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_getexp_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_getexp_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_getmant_round_pd", (PyCFunction) SIMDLowAVX512__mm512_getmant_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_getmant_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_getmant_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_getmant_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_getmant_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_getmant_round_ps", (PyCFunction) SIMDLowAVX512__mm512_getmant_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_getmant_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_getmant_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_getmant_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_getmant_round_ps, METH_FASTCALL, nullptr},
    {"_mm_getmant_round_sd", (PyCFunction) SIMDLowAVX512__mm_getmant_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_getmant_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_getmant_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_getmant_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_getmant_round_sd, METH_FASTCALL, nullptr},
    {"_mm_getmant_round_ss", (PyCFunction) SIMDLowAVX512__mm_getmant_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_getmant_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_getmant_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_getmant_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_getmant_round_ss, METH_FASTCALL, nullptr},
    {"_mm512_roundscale_round_ps", (PyCFunction) SIMDLowAVX512__mm512_roundscale_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_roundscale_round_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_roundscale_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_roundscale_round_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_roundscale_round_ps, METH_FASTCALL, nullptr},
    {"_mm512_roundscale_round_pd", (PyCFunction) SIMDLowAVX512__mm512_roundscale_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_roundscale_round_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_roundscale_round_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_roundscale_round_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_roundscale_round_pd, METH_FASTCALL, nullptr},
    {"_mm_roundscale_round_ss", (PyCFunction) SIMDLowAVX512__mm_roundscale_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_roundscale_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_roundscale_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_roundscale_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_roundscale_round_ss, METH_FASTCALL, nullptr},
    {"_mm_roundscale_round_sd", (PyCFunction) SIMDLowAVX512__mm_roundscale_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_roundscale_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_roundscale_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_roundscale_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_roundscale_round_sd, METH_FASTCALL, nullptr},
    {"_mm512_floor_ps", (PyCFunction) SIMDLowAVX512__mm512_floor_ps, METH_FASTCALL, nullptr},
    {"_mm512_floor_pd", (PyCFunction) SIMDLowAVX512__mm512_floor_pd, METH_FASTCALL, nullptr},
    {"_mm512_ceil_ps", (PyCFunction) SIMDLowAVX512__mm512_ceil_ps, METH_FASTCALL, nullptr},
    {"_mm512_ceil_pd", (PyCFunction) SIMDLowAVX512__mm512_ceil_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_floor_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_floor_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_floor_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_floor_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_ceil_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_ceil_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_ceil_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_ceil_pd, METH_FASTCALL, nullptr},
    {"_mm512_alignr_epi32", (PyCFunction) SIMDLowAVX512__mm512_alignr_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_alignr_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_alignr_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_alignr_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_alignr_epi32, METH_FASTCALL, nullptr},
    {"_mm512_alignr_epi64", (PyCFunction) SIMDLowAVX512__mm512_alignr_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_alignr_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_alignr_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_alignr_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_alignr_epi64, METH_FASTCALL, nullptr},
    {"_mm512_cmpeq_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpeq_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpeq_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpeq_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpeq_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpeq_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpeq_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpeq_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpgt_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpgt_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpgt_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpgt_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpgt_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpgt_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpgt_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpgt_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpge_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpge_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpge_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpge_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpge_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpge_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpge_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpge_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpge_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpge_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpge_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpge_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpge_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpge_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpge_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpge_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmple_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmple_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmple_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmple_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmple_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmple_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmple_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmple_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmple_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmple_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmple_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmple_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmple_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmple_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmple_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmple_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmplt_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmplt_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmplt_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmplt_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmplt_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmplt_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmplt_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmplt_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmplt_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmplt_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmplt_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmplt_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmplt_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmplt_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmplt_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmplt_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpneq_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpneq_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpneq_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpneq_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpneq_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpneq_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpneq_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpneq_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpneq_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpneq_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpneq_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpneq_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpneq_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpneq_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpneq_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpneq_epu64_mask, METH_FASTCALL, nullptr},
    {"_kshiftli_mask16", (PyCFunction) SIMDLowAVX512__kshiftli_mask16, METH_FASTCALL, nullptr},
    {"_kshiftri_mask16", (PyCFunction) SIMDLowAVX512__kshiftri_mask16, METH_FASTCALL, nullptr},
    {"_mm512_cmp_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmp_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmp_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmp_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmp_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmp_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmp_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmp_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmp_round_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmp_round_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmp_round_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmp_round_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmp_epi64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmp_epi64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmp_epi32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmp_epi32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmp_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmp_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmp_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmp_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmp_round_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmp_round_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmp_round_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmp_round_ps_mask, METH_FASTCALL, nullptr},
    {"_mm_cmp_round_sd_mask", (PyCFunction) SIMDLowAVX512__mm_cmp_round_sd_mask, METH_FASTCALL, nullptr},
    {"_mm_mask_cmp_round_sd_mask", (PyCFunction) SIMDLowAVX512__mm_mask_cmp_round_sd_mask, METH_FASTCALL, nullptr},
    {"_mm_cmp_round_ss_mask", (PyCFunction) SIMDLowAVX512__mm_cmp_round_ss_mask, METH_FASTCALL, nullptr},
    {"_mm_mask_cmp_round_ss_mask", (PyCFunction) SIMDLowAVX512__mm_mask_cmp_round_ss_mask, METH_FASTCALL, nullptr},
    {"_mm512_i32gather_ps", (PyCFunction) SIMDLowAVX512__mm512_i32gather_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_i32gather_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_i32gather_ps, METH_FASTCALL, nullptr},
    {"_mm512_i32gather_pd", (PyCFunction) SIMDLowAVX512__mm512_i32gather_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_i32gather_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_i32gather_pd, METH_FASTCALL, nullptr},
    {"_mm512_i64gather_ps", (PyCFunction) SIMDLowAVX512__mm512_i64gather_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_i64gather_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_i64gather_ps, METH_FASTCALL, nullptr},
    {"_mm512_i64gather_pd", (PyCFunction) SIMDLowAVX512__mm512_i64gather_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_i64gather_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_i64gather_pd, METH_FASTCALL, nullptr},
    {"_mm512_i32gather_epi32", (PyCFunction) SIMDLowAVX512__mm512_i32gather_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_i32gather_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_i32gather_epi32, METH_FASTCALL, nullptr},
    {"_mm512_i32gather_epi64", (PyCFunction) SIMDLowAVX512__mm512_i32gather_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_i32gather_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_i32gather_epi64, METH_FASTCALL, nullptr},
    {"_mm512_i64gather_epi32", (PyCFunction) SIMDLowAVX512__mm512_i64gather_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_i64gather_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_i64gather_epi32, METH_FASTCALL, nullptr},
    {"_mm512_i64gather_epi64", (PyCFunction) SIMDLowAVX512__mm512_i64gather_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_i64gather_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_i64gather_epi64, METH_FASTCALL, nullptr},
    {"_mm512_i32scatter_ps", (PyCFunction) SIMDLowAVX512__mm512_i32scatter_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_i32scatter_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_i32scatter_ps, METH_FASTCALL, nullptr},
    {"_mm512_i32scatter_pd", (PyCFunction) SIMDLowAVX512__mm512_i32scatter_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_i32scatter_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_i32scatter_pd, METH_FASTCALL, nullptr},
    {"_mm512_i64scatter_ps", (PyCFunction) SIMDLowAVX512__mm512_i64scatter_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_i64scatter_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_i64scatter_ps, METH_FASTCALL, nullptr},
    {"_mm512_i64scatter_pd", (PyCFunction) SIMDLowAVX512__mm512_i64scatter_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_i64scatter_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_i64scatter_pd, METH_FASTCALL, nullptr},
    {"_mm512_i32scatter_epi32", (PyCFunction) SIMDLowAVX512__mm512_i32scatter_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_i32scatter_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_i32scatter_epi32, METH_FASTCALL, nullptr},
    {"_mm512_i32scatter_epi64", (PyCFunction) SIMDLowAVX512__mm512_i32scatter_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_i32scatter_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_i32scatter_epi64, METH_FASTCALL, nullptr},
    {"_mm512_i64scatter_epi32", (PyCFunction) SIMDLowAVX512__mm512_i64scatter_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_i64scatter_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_i64scatter_epi32, METH_FASTCALL, nullptr},
    {"_mm512_i64scatter_epi64", (PyCFunction) SIMDLowAVX512__mm512_i64scatter_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_i64scatter_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_i64scatter_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_compress_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_compress_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_compress_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_compress_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_compressstoreu_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_compressstoreu_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_compress_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_compress_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_compress_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_compress_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_compressstoreu_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_compressstoreu_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_compress_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_compress_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_compress_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_compress_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_compressstoreu_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_compressstoreu_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_compress_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_compress_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_compress_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_compress_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_compressstoreu_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_compressstoreu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_expand_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_expand_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_expand_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_expand_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_expandloadu_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_expandloadu_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_expandloadu_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_expandloadu_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_expand_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_expand_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_expand_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_expand_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_expandloadu_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_expandloadu_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_expandloadu_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_expandloadu_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_expand_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_expand_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_expand_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_expand_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_expandloadu_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_expandloadu_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_expandloadu_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_expandloadu_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_expand_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_expand_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_expand_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_expand_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_expandloadu_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_expandloadu_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_expandloadu_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_expandloadu_epi32, METH_FASTCALL, nullptr},
    {"_kortest_mask16_u8", (PyCFunction) SIMDLowAVX512__kortest_mask16_u8, METH_FASTCALL, nullptr},
    {"_kortestz_mask16_u8", (PyCFunction) SIMDLowAVX512__kortestz_mask16_u8, METH_FASTCALL, nullptr},
    {"_kortestc_mask16_u8", (PyCFunction) SIMDLowAVX512__kortestc_mask16_u8, METH_FASTCALL, nullptr},
    {"_cvtmask16_u32", (PyCFunction) SIMDLowAVX512__cvtmask16_u32, METH_FASTCALL, nullptr},
    {"_cvtu32_mask16", (PyCFunction) SIMDLowAVX512__cvtu32_mask16, METH_FASTCALL, nullptr},
    {"_load_mask16", (PyCFunction) SIMDLowAVX512__load_mask16, METH_FASTCALL, nullptr},
    {"_store_mask16", (PyCFunction) SIMDLowAVX512__store_mask16, METH_FASTCALL, nullptr},
    {"_mm512_kand", (PyCFunction) SIMDLowAVX512__mm512_kand, METH_FASTCALL, nullptr},
    {"_mm512_kandn", (PyCFunction) SIMDLowAVX512__mm512_kandn, METH_FASTCALL, nullptr},
    {"_mm512_kor", (PyCFunction) SIMDLowAVX512__mm512_kor, METH_FASTCALL, nullptr},
    {"_mm512_kortestz", (PyCFunction) SIMDLowAVX512__mm512_kortestz, METH_FASTCALL, nullptr},
    {"_mm512_kortestc", (PyCFunction) SIMDLowAVX512__mm512_kortestc, METH_FASTCALL, nullptr},
    {"_mm512_kxnor", (PyCFunction) SIMDLowAVX512__mm512_kxnor, METH_FASTCALL, nullptr},
    {"_mm512_kxor", (PyCFunction) SIMDLowAVX512__mm512_kxor, METH_FASTCALL, nullptr},
    {"_mm512_knot", (PyCFunction) SIMDLowAVX512__mm512_knot, METH_FASTCALL, nullptr},
    {"_mm512_kunpackb", (PyCFunction) SIMDLowAVX512__mm512_kunpackb, METH_FASTCALL, nullptr},
    {"_mm512_maskz_inserti32x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_inserti32x4, METH_FASTCALL, nullptr},
    {"_mm512_maskz_insertf32x4", (PyCFunction) SIMDLowAVX512__mm512_maskz_insertf32x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_inserti32x4", (PyCFunction) SIMDLowAVX512__mm512_mask_inserti32x4, METH_FASTCALL, nullptr},
    {"_mm512_mask_insertf32x4", (PyCFunction) SIMDLowAVX512__mm512_mask_insertf32x4, METH_FASTCALL, nullptr},
    {"_mm512_max_epi64", (PyCFunction) SIMDLowAVX512__mm512_max_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_max_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_max_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_max_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_max_epi64, METH_FASTCALL, nullptr},
    {"_mm512_min_epi64", (PyCFunction) SIMDLowAVX512__mm512_min_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_min_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_min_epi64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_min_epi64", (PyCFunction) SIMDLowAVX512__mm512_maskz_min_epi64, METH_FASTCALL, nullptr},
    {"_mm512_max_epu64", (PyCFunction) SIMDLowAVX512__mm512_max_epu64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_max_epu64", (PyCFunction) SIMDLowAVX512__mm512_maskz_max_epu64, METH_FASTCALL, nullptr},
    {"_mm512_mask_max_epu64", (PyCFunction) SIMDLowAVX512__mm512_mask_max_epu64, METH_FASTCALL, nullptr},
    {"_mm512_min_epu64", (PyCFunction) SIMDLowAVX512__mm512_min_epu64, METH_FASTCALL, nullptr},
    {"_mm512_mask_min_epu64", (PyCFunction) SIMDLowAVX512__mm512_mask_min_epu64, METH_FASTCALL, nullptr},
    {"_mm512_maskz_min_epu64", (PyCFunction) SIMDLowAVX512__mm512_maskz_min_epu64, METH_FASTCALL, nullptr},
    {"_mm512_max_epi32", (PyCFunction) SIMDLowAVX512__mm512_max_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_max_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_max_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_max_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_max_epi32, METH_FASTCALL, nullptr},
    {"_mm512_min_epi32", (PyCFunction) SIMDLowAVX512__mm512_min_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_min_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_min_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_min_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_min_epi32, METH_FASTCALL, nullptr},
    {"_mm512_max_epu32", (PyCFunction) SIMDLowAVX512__mm512_max_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_max_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_max_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_max_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_max_epu32, METH_FASTCALL, nullptr},
    {"_mm512_min_epu32", (PyCFunction) SIMDLowAVX512__mm512_min_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_min_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_min_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_min_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_min_epu32, METH_FASTCALL, nullptr},
    {"_mm512_unpacklo_ps", (PyCFunction) SIMDLowAVX512__mm512_unpacklo_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_unpacklo_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_unpacklo_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_unpacklo_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_unpacklo_ps, METH_FASTCALL, nullptr},
    {"_mm_max_round_sd", (PyCFunction) SIMDLowAVX512__mm_max_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_max_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_max_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_max_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_max_round_sd, METH_FASTCALL, nullptr},
    {"_mm_max_round_ss", (PyCFunction) SIMDLowAVX512__mm_max_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_max_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_max_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_max_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_max_round_ss, METH_FASTCALL, nullptr},
    {"_mm_min_round_sd", (PyCFunction) SIMDLowAVX512__mm_min_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_min_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_min_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_min_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_min_round_sd, METH_FASTCALL, nullptr},
    {"_mm_min_round_ss", (PyCFunction) SIMDLowAVX512__mm_min_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_min_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_min_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_min_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_min_round_ss, METH_FASTCALL, nullptr},
    {"_mm512_mask_blend_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_blend_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_blend_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_blend_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_blend_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_blend_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_blend_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_blend_epi32, METH_FASTCALL, nullptr},
    {"_mm_fmadd_round_sd", (PyCFunction) SIMDLowAVX512__mm_fmadd_round_sd, METH_FASTCALL, nullptr},
    {"_mm_fmadd_round_ss", (PyCFunction) SIMDLowAVX512__mm_fmadd_round_ss, METH_FASTCALL, nullptr},
    {"_mm_fmsub_round_sd", (PyCFunction) SIMDLowAVX512__mm_fmsub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_fmsub_round_ss", (PyCFunction) SIMDLowAVX512__mm_fmsub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_fnmadd_round_sd", (PyCFunction) SIMDLowAVX512__mm_fnmadd_round_sd, METH_FASTCALL, nullptr},
    {"_mm_fnmadd_round_ss", (PyCFunction) SIMDLowAVX512__mm_fnmadd_round_ss, METH_FASTCALL, nullptr},
    {"_mm_fnmsub_round_sd", (PyCFunction) SIMDLowAVX512__mm_fnmsub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_fnmsub_round_ss", (PyCFunction) SIMDLowAVX512__mm_fnmsub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fmadd_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fmadd_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fmadd_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fmadd_ss, METH_FASTCALL, nullptr},
    {"_mm_mask3_fmadd_sd", (PyCFunction) SIMDLowAVX512__mm_mask3_fmadd_sd, METH_FASTCALL, nullptr},
    {"_mm_mask3_fmadd_ss", (PyCFunction) SIMDLowAVX512__mm_mask3_fmadd_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fmadd_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fmadd_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fmadd_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fmadd_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fmsub_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fmsub_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fmsub_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fmsub_ss, METH_FASTCALL, nullptr},
    {"_mm_mask3_fmsub_sd", (PyCFunction) SIMDLowAVX512__mm_mask3_fmsub_sd, METH_FASTCALL, nullptr},
    {"_mm_mask3_fmsub_ss", (PyCFunction) SIMDLowAVX512__mm_mask3_fmsub_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fmsub_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fmsub_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fmsub_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fmsub_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fnmadd_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fnmadd_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fnmadd_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fnmadd_ss, METH_FASTCALL, nullptr},
    {"_mm_mask3_fnmadd_sd", (PyCFunction) SIMDLowAVX512__mm_mask3_fnmadd_sd, METH_FASTCALL, nullptr},
    {"_mm_mask3_fnmadd_ss", (PyCFunction) SIMDLowAVX512__mm_mask3_fnmadd_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fnmadd_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fnmadd_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fnmadd_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fnmadd_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fnmsub_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fnmsub_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fnmsub_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fnmsub_ss, METH_FASTCALL, nullptr},
    {"_mm_mask3_fnmsub_sd", (PyCFunction) SIMDLowAVX512__mm_mask3_fnmsub_sd, METH_FASTCALL, nullptr},
    {"_mm_mask3_fnmsub_ss", (PyCFunction) SIMDLowAVX512__mm_mask3_fnmsub_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fnmsub_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fnmsub_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fnmsub_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fnmsub_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fmadd_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fmadd_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fmadd_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fmadd_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask3_fmadd_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask3_fmadd_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask3_fmadd_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask3_fmadd_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fmadd_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fmadd_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fmadd_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fmadd_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fmsub_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fmsub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fmsub_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fmsub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask3_fmsub_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask3_fmsub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask3_fmsub_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask3_fmsub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fmsub_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fmsub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fmsub_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fmsub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fnmadd_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fnmadd_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fnmadd_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fnmadd_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask3_fnmadd_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask3_fnmadd_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask3_fnmadd_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask3_fnmadd_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fnmadd_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fnmadd_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fnmadd_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fnmadd_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fnmsub_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fnmsub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fnmsub_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fnmsub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_mask3_fnmsub_round_sd", (PyCFunction) SIMDLowAVX512__mm_mask3_fnmsub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_mask3_fnmsub_round_ss", (PyCFunction) SIMDLowAVX512__mm_mask3_fnmsub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fnmsub_round_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fnmsub_round_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fnmsub_round_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fnmsub_round_ss, METH_FASTCALL, nullptr},
    {"_mm_comi_round_ss", (PyCFunction) SIMDLowAVX512__mm_comi_round_ss, METH_FASTCALL, nullptr},
    {"_mm_comi_round_sd", (PyCFunction) SIMDLowAVX512__mm_comi_round_sd, METH_FASTCALL, nullptr},
    {"_mm512_sqrt_pd", (PyCFunction) SIMDLowAVX512__mm512_sqrt_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_sqrt_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_sqrt_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sqrt_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_sqrt_pd, METH_FASTCALL, nullptr},
    {"_mm512_sqrt_ps", (PyCFunction) SIMDLowAVX512__mm512_sqrt_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_sqrt_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_sqrt_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sqrt_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_sqrt_ps, METH_FASTCALL, nullptr},
    {"_mm512_add_pd", (PyCFunction) SIMDLowAVX512__mm512_add_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_add_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_add_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_add_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_add_pd, METH_FASTCALL, nullptr},
    {"_mm512_add_ps", (PyCFunction) SIMDLowAVX512__mm512_add_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_add_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_add_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_add_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_add_ps, METH_FASTCALL, nullptr},
    {"_mm_mask_add_sd", (PyCFunction) SIMDLowAVX512__mm_mask_add_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_add_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_add_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_add_ss", (PyCFunction) SIMDLowAVX512__mm_mask_add_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_add_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_add_ss, METH_FASTCALL, nullptr},
    {"_mm512_sub_pd", (PyCFunction) SIMDLowAVX512__mm512_sub_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_sub_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_sub_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sub_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_sub_pd, METH_FASTCALL, nullptr},
    {"_mm512_sub_ps", (PyCFunction) SIMDLowAVX512__mm512_sub_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_sub_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_sub_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_sub_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_sub_ps, METH_FASTCALL, nullptr},
    {"_mm_mask_sub_sd", (PyCFunction) SIMDLowAVX512__mm_mask_sub_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_sub_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_sub_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_sub_ss", (PyCFunction) SIMDLowAVX512__mm_mask_sub_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_sub_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_sub_ss, METH_FASTCALL, nullptr},
    {"_mm512_mul_pd", (PyCFunction) SIMDLowAVX512__mm512_mul_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_mul_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_mul_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mul_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_mul_pd, METH_FASTCALL, nullptr},
    {"_mm512_mul_ps", (PyCFunction) SIMDLowAVX512__mm512_mul_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_mul_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_mul_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_mul_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_mul_ps, METH_FASTCALL, nullptr},
    {"_mm_mask_mul_sd", (PyCFunction) SIMDLowAVX512__mm_mask_mul_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_mul_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_mul_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_mul_ss", (PyCFunction) SIMDLowAVX512__mm_mask_mul_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_mul_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_mul_ss, METH_FASTCALL, nullptr},
    {"_mm512_div_pd", (PyCFunction) SIMDLowAVX512__mm512_div_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_div_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_div_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_div_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_div_pd, METH_FASTCALL, nullptr},
    {"_mm512_div_ps", (PyCFunction) SIMDLowAVX512__mm512_div_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_div_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_div_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_div_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_div_ps, METH_FASTCALL, nullptr},
    {"_mm_mask_div_sd", (PyCFunction) SIMDLowAVX512__mm_mask_div_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_div_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_div_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_div_ss", (PyCFunction) SIMDLowAVX512__mm_mask_div_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_div_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_div_ss, METH_FASTCALL, nullptr},
    {"_mm512_max_pd", (PyCFunction) SIMDLowAVX512__mm512_max_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_max_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_max_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_max_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_max_pd, METH_FASTCALL, nullptr},
    {"_mm512_max_ps", (PyCFunction) SIMDLowAVX512__mm512_max_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_max_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_max_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_max_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_max_ps, METH_FASTCALL, nullptr},
    {"_mm_mask_max_sd", (PyCFunction) SIMDLowAVX512__mm_mask_max_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_max_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_max_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_max_ss", (PyCFunction) SIMDLowAVX512__mm_mask_max_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_max_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_max_ss, METH_FASTCALL, nullptr},
    {"_mm512_min_pd", (PyCFunction) SIMDLowAVX512__mm512_min_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_min_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_min_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_min_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_min_pd, METH_FASTCALL, nullptr},
    {"_mm512_min_ps", (PyCFunction) SIMDLowAVX512__mm512_min_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_min_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_min_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_min_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_min_ps, METH_FASTCALL, nullptr},
    {"_mm_mask_min_sd", (PyCFunction) SIMDLowAVX512__mm_mask_min_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_min_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_min_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_min_ss", (PyCFunction) SIMDLowAVX512__mm_mask_min_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_min_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_min_ss, METH_FASTCALL, nullptr},
    {"_mm512_scalef_pd", (PyCFunction) SIMDLowAVX512__mm512_scalef_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_scalef_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_scalef_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_scalef_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_scalef_pd, METH_FASTCALL, nullptr},
    {"_mm512_scalef_ps", (PyCFunction) SIMDLowAVX512__mm512_scalef_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_scalef_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_scalef_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_scalef_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_scalef_ps, METH_FASTCALL, nullptr},
    {"_mm_scalef_sd", (PyCFunction) SIMDLowAVX512__mm_scalef_sd, METH_FASTCALL, nullptr},
    {"_mm_scalef_ss", (PyCFunction) SIMDLowAVX512__mm_scalef_ss, METH_FASTCALL, nullptr},
    {"_mm512_fmadd_pd", (PyCFunction) SIMDLowAVX512__mm512_fmadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmadd_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fmadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmadd_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmadd_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_fmadd_ps", (PyCFunction) SIMDLowAVX512__mm512_fmadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmadd_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fmadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmadd_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmadd_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_fmsub_pd", (PyCFunction) SIMDLowAVX512__mm512_fmsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmsub_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fmsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmsub_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmsub_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_fmsub_ps", (PyCFunction) SIMDLowAVX512__mm512_fmsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmsub_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fmsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmsub_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmsub_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_fmaddsub_pd", (PyCFunction) SIMDLowAVX512__mm512_fmaddsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmaddsub_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fmaddsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmaddsub_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmaddsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmaddsub_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmaddsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_fmaddsub_ps", (PyCFunction) SIMDLowAVX512__mm512_fmaddsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmaddsub_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fmaddsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmaddsub_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmaddsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmaddsub_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmaddsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_fmsubadd_pd", (PyCFunction) SIMDLowAVX512__mm512_fmsubadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmsubadd_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fmsubadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmsubadd_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmsubadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmsubadd_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmsubadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_fmsubadd_ps", (PyCFunction) SIMDLowAVX512__mm512_fmsubadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fmsubadd_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fmsubadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fmsubadd_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fmsubadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fmsubadd_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fmsubadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_fnmadd_pd", (PyCFunction) SIMDLowAVX512__mm512_fnmadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fnmadd_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fnmadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fnmadd_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fnmadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fnmadd_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fnmadd_pd, METH_FASTCALL, nullptr},
    {"_mm512_fnmadd_ps", (PyCFunction) SIMDLowAVX512__mm512_fnmadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fnmadd_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fnmadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fnmadd_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fnmadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fnmadd_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fnmadd_ps, METH_FASTCALL, nullptr},
    {"_mm512_fnmsub_pd", (PyCFunction) SIMDLowAVX512__mm512_fnmsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fnmsub_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fnmsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fnmsub_pd", (PyCFunction) SIMDLowAVX512__mm512_mask3_fnmsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fnmsub_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fnmsub_pd, METH_FASTCALL, nullptr},
    {"_mm512_fnmsub_ps", (PyCFunction) SIMDLowAVX512__mm512_fnmsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fnmsub_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fnmsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask3_fnmsub_ps", (PyCFunction) SIMDLowAVX512__mm512_mask3_fnmsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fnmsub_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fnmsub_ps, METH_FASTCALL, nullptr},
    {"_mm512_cvttpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvttpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvttpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvttpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvttpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvttpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvttpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_cvttpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvttpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvttpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvttpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvttpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_cvtpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtpd_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtpd_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_cvtpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtpd_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtpd_epu32, METH_FASTCALL, nullptr},
    {"_mm512_cvttps_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvttps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvttps_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvttps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvttps_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvttps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvttps_epu32", (PyCFunction) SIMDLowAVX512__mm512_cvttps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvttps_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvttps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvttps_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvttps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_cvtps_epi32", (PyCFunction) SIMDLowAVX512__mm512_cvtps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtps_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtps_epi32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtps_epi32, METH_FASTCALL, nullptr},
    {"_mm512_cvtps_epu32", (PyCFunction) SIMDLowAVX512__mm512_cvtps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtps_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtps_epu32", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtps_epu32, METH_FASTCALL, nullptr},
    {"_mm512_cvtsd_f64", (PyCFunction) SIMDLowAVX512__mm512_cvtsd_f64, METH_FASTCALL, nullptr},
    {"_mm512_cvtss_f32", (PyCFunction) SIMDLowAVX512__mm512_cvtss_f32, METH_FASTCALL, nullptr},
    {"_mm_cvtu64_ss", (PyCFunction) SIMDLowAVX512__mm_cvtu64_ss, METH_FASTCALL, nullptr},
    {"_mm_cvtu64_sd", (PyCFunction) SIMDLowAVX512__mm_cvtu64_sd, METH_FASTCALL, nullptr},
    {"_mm_cvtu32_ss", (PyCFunction) SIMDLowAVX512__mm_cvtu32_ss, METH_FASTCALL, nullptr},
    {"_mm512_cvtepi32_ps", (PyCFunction) SIMDLowAVX512__mm512_cvtepi32_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepi32_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepi32_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepi32_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepi32_ps, METH_FASTCALL, nullptr},
    {"_mm512_cvtepu32_ps", (PyCFunction) SIMDLowAVX512__mm512_cvtepu32_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtepu32_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtepu32_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtepu32_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtepu32_ps, METH_FASTCALL, nullptr},
    {"_mm512_fixupimm_pd", (PyCFunction) SIMDLowAVX512__mm512_fixupimm_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_fixupimm_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_fixupimm_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fixupimm_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_fixupimm_pd, METH_FASTCALL, nullptr},
    {"_mm512_fixupimm_ps", (PyCFunction) SIMDLowAVX512__mm512_fixupimm_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_fixupimm_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_fixupimm_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_fixupimm_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_fixupimm_ps, METH_FASTCALL, nullptr},
    {"_mm_fixupimm_sd", (PyCFunction) SIMDLowAVX512__mm_fixupimm_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_fixupimm_sd", (PyCFunction) SIMDLowAVX512__mm_mask_fixupimm_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_fixupimm_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_fixupimm_sd, METH_FASTCALL, nullptr},
    {"_mm_fixupimm_ss", (PyCFunction) SIMDLowAVX512__mm_fixupimm_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_fixupimm_ss", (PyCFunction) SIMDLowAVX512__mm_mask_fixupimm_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_fixupimm_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_fixupimm_ss, METH_FASTCALL, nullptr},
    {"_mm_cvtss_u64", (PyCFunction) SIMDLowAVX512__mm_cvtss_u64, METH_FASTCALL, nullptr},
    {"_mm_cvttss_u64", (PyCFunction) SIMDLowAVX512__mm_cvttss_u64, METH_FASTCALL, nullptr},
    {"_mm_cvttss_i64", (PyCFunction) SIMDLowAVX512__mm_cvttss_i64, METH_FASTCALL, nullptr},
    {"_mm512_cvtsi512_si32", (PyCFunction) SIMDLowAVX512__mm512_cvtsi512_si32, METH_FASTCALL, nullptr},
    {"_mm_cvtss_u32", (PyCFunction) SIMDLowAVX512__mm_cvtss_u32, METH_FASTCALL, nullptr},
    {"_mm_cvttss_u32", (PyCFunction) SIMDLowAVX512__mm_cvttss_u32, METH_FASTCALL, nullptr},
    {"_mm_cvttss_i32", (PyCFunction) SIMDLowAVX512__mm_cvttss_i32, METH_FASTCALL, nullptr},
    {"_mm_cvtsd_i32", (PyCFunction) SIMDLowAVX512__mm_cvtsd_i32, METH_FASTCALL, nullptr},
    {"_mm_cvtss_i32", (PyCFunction) SIMDLowAVX512__mm_cvtss_i32, METH_FASTCALL, nullptr},
    {"_mm_cvti32_sd", (PyCFunction) SIMDLowAVX512__mm_cvti32_sd, METH_FASTCALL, nullptr},
    {"_mm_cvti32_ss", (PyCFunction) SIMDLowAVX512__mm_cvti32_ss, METH_FASTCALL, nullptr},
    {"_mm_cvtsd_u64", (PyCFunction) SIMDLowAVX512__mm_cvtsd_u64, METH_FASTCALL, nullptr},
    {"_mm_cvttsd_u64", (PyCFunction) SIMDLowAVX512__mm_cvttsd_u64, METH_FASTCALL, nullptr},
    {"_mm_cvttsd_i64", (PyCFunction) SIMDLowAVX512__mm_cvttsd_i64, METH_FASTCALL, nullptr},
    {"_mm_cvtsd_i64", (PyCFunction) SIMDLowAVX512__mm_cvtsd_i64, METH_FASTCALL, nullptr},
    {"_mm_cvtss_i64", (PyCFunction) SIMDLowAVX512__mm_cvtss_i64, METH_FASTCALL, nullptr},
    {"_mm_cvti64_sd", (PyCFunction) SIMDLowAVX512__mm_cvti64_sd, METH_FASTCALL, nullptr},
    {"_mm_cvti64_ss", (PyCFunction) SIMDLowAVX512__mm_cvti64_ss, METH_FASTCALL, nullptr},
    {"_mm_cvtsd_u32", (PyCFunction) SIMDLowAVX512__mm_cvtsd_u32, METH_FASTCALL, nullptr},
    {"_mm_cvttsd_u32", (PyCFunction) SIMDLowAVX512__mm_cvttsd_u32, METH_FASTCALL, nullptr},
    {"_mm_cvttsd_i32", (PyCFunction) SIMDLowAVX512__mm_cvttsd_i32, METH_FASTCALL, nullptr},
    {"_mm512_cvtps_pd", (PyCFunction) SIMDLowAVX512__mm512_cvtps_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtps_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtps_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtps_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtps_pd, METH_FASTCALL, nullptr},
    {"_mm512_cvtph_ps", (PyCFunction) SIMDLowAVX512__mm512_cvtph_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtph_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtph_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtph_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtph_ps, METH_FASTCALL, nullptr},
    {"_mm512_cvtpd_ps", (PyCFunction) SIMDLowAVX512__mm512_cvtpd_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_cvtpd_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_cvtpd_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_cvtpd_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_cvtpd_ps, METH_FASTCALL, nullptr},
    {"_mm512_getexp_ps", (PyCFunction) SIMDLowAVX512__mm512_getexp_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_getexp_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_getexp_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_getexp_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_getexp_ps, METH_FASTCALL, nullptr},
    {"_mm512_getexp_pd", (PyCFunction) SIMDLowAVX512__mm512_getexp_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_getexp_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_getexp_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_getexp_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_getexp_pd, METH_FASTCALL, nullptr},
    {"_mm_getexp_ss", (PyCFunction) SIMDLowAVX512__mm_getexp_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_getexp_ss", (PyCFunction) SIMDLowAVX512__mm_mask_getexp_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_getexp_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_getexp_ss, METH_FASTCALL, nullptr},
    {"_mm_getexp_sd", (PyCFunction) SIMDLowAVX512__mm_getexp_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_getexp_sd", (PyCFunction) SIMDLowAVX512__mm_mask_getexp_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_getexp_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_getexp_sd, METH_FASTCALL, nullptr},
    {"_mm512_getmant_pd", (PyCFunction) SIMDLowAVX512__mm512_getmant_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_getmant_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_getmant_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_getmant_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_getmant_pd, METH_FASTCALL, nullptr},
    {"_mm512_getmant_ps", (PyCFunction) SIMDLowAVX512__mm512_getmant_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_getmant_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_getmant_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_getmant_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_getmant_ps, METH_FASTCALL, nullptr},
    {"_mm_getmant_sd", (PyCFunction) SIMDLowAVX512__mm_getmant_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_getmant_sd", (PyCFunction) SIMDLowAVX512__mm_mask_getmant_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_getmant_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_getmant_sd, METH_FASTCALL, nullptr},
    {"_mm_getmant_ss", (PyCFunction) SIMDLowAVX512__mm_getmant_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_getmant_ss", (PyCFunction) SIMDLowAVX512__mm_mask_getmant_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_getmant_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_getmant_ss, METH_FASTCALL, nullptr},
    {"_mm512_roundscale_ps", (PyCFunction) SIMDLowAVX512__mm512_roundscale_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_roundscale_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_roundscale_ps, METH_FASTCALL, nullptr},
    {"_mm512_maskz_roundscale_ps", (PyCFunction) SIMDLowAVX512__mm512_maskz_roundscale_ps, METH_FASTCALL, nullptr},
    {"_mm512_roundscale_pd", (PyCFunction) SIMDLowAVX512__mm512_roundscale_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_roundscale_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_roundscale_pd, METH_FASTCALL, nullptr},
    {"_mm512_maskz_roundscale_pd", (PyCFunction) SIMDLowAVX512__mm512_maskz_roundscale_pd, METH_FASTCALL, nullptr},
    {"_mm_roundscale_ss", (PyCFunction) SIMDLowAVX512__mm_roundscale_ss, METH_FASTCALL, nullptr},
    {"_mm_mask_roundscale_ss", (PyCFunction) SIMDLowAVX512__mm_mask_roundscale_ss, METH_FASTCALL, nullptr},
    {"_mm_maskz_roundscale_ss", (PyCFunction) SIMDLowAVX512__mm_maskz_roundscale_ss, METH_FASTCALL, nullptr},
    {"_mm_roundscale_sd", (PyCFunction) SIMDLowAVX512__mm_roundscale_sd, METH_FASTCALL, nullptr},
    {"_mm_mask_roundscale_sd", (PyCFunction) SIMDLowAVX512__mm_mask_roundscale_sd, METH_FASTCALL, nullptr},
    {"_mm_maskz_roundscale_sd", (PyCFunction) SIMDLowAVX512__mm_maskz_roundscale_sd, METH_FASTCALL, nullptr},
    {"_mm512_cmp_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmp_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmp_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmp_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmp_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmp_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmp_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmp_pd_mask, METH_FASTCALL, nullptr},
    {"_mm_cmp_sd_mask", (PyCFunction) SIMDLowAVX512__mm_cmp_sd_mask, METH_FASTCALL, nullptr},
    {"_mm_mask_cmp_sd_mask", (PyCFunction) SIMDLowAVX512__mm_mask_cmp_sd_mask, METH_FASTCALL, nullptr},
    {"_mm_cmp_ss_mask", (PyCFunction) SIMDLowAVX512__mm_cmp_ss_mask, METH_FASTCALL, nullptr},
    {"_mm_mask_cmp_ss_mask", (PyCFunction) SIMDLowAVX512__mm_mask_cmp_ss_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpeq_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpeq_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpeq_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpeq_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmplt_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmplt_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmplt_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmplt_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmple_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmple_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmple_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmple_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpunord_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpunord_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpunord_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpunord_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpneq_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpneq_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpneq_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpneq_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpnlt_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpnlt_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpnlt_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpnlt_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpnle_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpnle_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpnle_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpnle_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpord_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpord_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpord_pd_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpord_pd_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpeq_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpeq_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpeq_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpeq_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmplt_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmplt_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmplt_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmplt_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmple_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmple_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmple_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmple_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpunord_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpunord_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpunord_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpunord_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpneq_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpneq_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpneq_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpneq_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpnlt_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpnlt_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpnlt_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpnlt_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpnle_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpnle_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpnle_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpnle_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpord_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpord_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpord_ps_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpord_ps_mask, METH_FASTCALL, nullptr},
    {"_mm512_kmov", (PyCFunction) SIMDLowAVX512__mm512_kmov, METH_FASTCALL, nullptr},
    {"_mm512_castpd_ps", (PyCFunction) SIMDLowAVX512__mm512_castpd_ps, METH_FASTCALL, nullptr},
    {"_mm512_castpd_si512", (PyCFunction) SIMDLowAVX512__mm512_castpd_si512, METH_FASTCALL, nullptr},
    {"_mm512_castps_pd", (PyCFunction) SIMDLowAVX512__mm512_castps_pd, METH_FASTCALL, nullptr},
    {"_mm512_castps_si512", (PyCFunction) SIMDLowAVX512__mm512_castps_si512, METH_FASTCALL, nullptr},
    {"_mm512_castsi512_ps", (PyCFunction) SIMDLowAVX512__mm512_castsi512_ps, METH_FASTCALL, nullptr},
    {"_mm512_castsi512_pd", (PyCFunction) SIMDLowAVX512__mm512_castsi512_pd, METH_FASTCALL, nullptr},
    {"_mm512_castpd512_pd128", (PyCFunction) SIMDLowAVX512__mm512_castpd512_pd128, METH_FASTCALL, nullptr},
    {"_mm512_castps512_ps128", (PyCFunction) SIMDLowAVX512__mm512_castps512_ps128, METH_FASTCALL, nullptr},
    {"_mm512_castsi512_si128", (PyCFunction) SIMDLowAVX512__mm512_castsi512_si128, METH_FASTCALL, nullptr},
    {"_mm512_castpd512_pd256", (PyCFunction) SIMDLowAVX512__mm512_castpd512_pd256, METH_FASTCALL, nullptr},
    {"_mm512_castps512_ps256", (PyCFunction) SIMDLowAVX512__mm512_castps512_ps256, METH_FASTCALL, nullptr},
    {"_mm512_castsi512_si256", (PyCFunction) SIMDLowAVX512__mm512_castsi512_si256, METH_FASTCALL, nullptr},
    {"_mm512_castpd128_pd512", (PyCFunction) SIMDLowAVX512__mm512_castpd128_pd512, METH_FASTCALL, nullptr},
    {"_mm512_castps128_ps512", (PyCFunction) SIMDLowAVX512__mm512_castps128_ps512, METH_FASTCALL, nullptr},
    {"_mm512_castsi128_si512", (PyCFunction) SIMDLowAVX512__mm512_castsi128_si512, METH_FASTCALL, nullptr},
    {"_mm512_castpd256_pd512", (PyCFunction) SIMDLowAVX512__mm512_castpd256_pd512, METH_FASTCALL, nullptr},
    {"_mm512_castps256_ps512", (PyCFunction) SIMDLowAVX512__mm512_castps256_ps512, METH_FASTCALL, nullptr},
    {"_mm512_castsi256_si512", (PyCFunction) SIMDLowAVX512__mm512_castsi256_si512, METH_FASTCALL, nullptr},
    {"_mm512_zextpd128_pd512", (PyCFunction) SIMDLowAVX512__mm512_zextpd128_pd512, METH_FASTCALL, nullptr},
    {"_mm512_zextps128_ps512", (PyCFunction) SIMDLowAVX512__mm512_zextps128_ps512, METH_FASTCALL, nullptr},
    {"_mm512_zextsi128_si512", (PyCFunction) SIMDLowAVX512__mm512_zextsi128_si512, METH_FASTCALL, nullptr},
    {"_mm512_zextpd256_pd512", (PyCFunction) SIMDLowAVX512__mm512_zextpd256_pd512, METH_FASTCALL, nullptr},
    {"_mm512_zextps256_ps512", (PyCFunction) SIMDLowAVX512__mm512_zextps256_ps512, METH_FASTCALL, nullptr},
    {"_mm512_zextsi256_si512", (PyCFunction) SIMDLowAVX512__mm512_zextsi256_si512, METH_FASTCALL, nullptr},
    {"_mm512_cmpeq_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpeq_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpeq_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpeq_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpeq_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpeq_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpeq_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpeq_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpgt_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpgt_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpgt_epu32_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpgt_epu32_mask, METH_FASTCALL, nullptr},
    {"_mm512_mask_cmpgt_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_mask_cmpgt_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_cmpgt_epu64_mask", (PyCFunction) SIMDLowAVX512__mm512_cmpgt_epu64_mask, METH_FASTCALL, nullptr},
    {"_mm512_reduce_add_epi32", (PyCFunction) SIMDLowAVX512__mm512_reduce_add_epi32, METH_FASTCALL, nullptr},
    {"_mm512_reduce_mul_epi32", (PyCFunction) SIMDLowAVX512__mm512_reduce_mul_epi32, METH_FASTCALL, nullptr},
    {"_mm512_reduce_and_epi32", (PyCFunction) SIMDLowAVX512__mm512_reduce_and_epi32, METH_FASTCALL, nullptr},
    {"_mm512_reduce_or_epi32", (PyCFunction) SIMDLowAVX512__mm512_reduce_or_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_add_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_add_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_mul_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_mul_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_and_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_and_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_or_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_or_epi32, METH_FASTCALL, nullptr},
    {"_mm512_reduce_min_epi32", (PyCFunction) SIMDLowAVX512__mm512_reduce_min_epi32, METH_FASTCALL, nullptr},
    {"_mm512_reduce_max_epi32", (PyCFunction) SIMDLowAVX512__mm512_reduce_max_epi32, METH_FASTCALL, nullptr},
    {"_mm512_reduce_min_epu32", (PyCFunction) SIMDLowAVX512__mm512_reduce_min_epu32, METH_FASTCALL, nullptr},
    {"_mm512_reduce_max_epu32", (PyCFunction) SIMDLowAVX512__mm512_reduce_max_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_min_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_min_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_max_epi32", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_max_epi32, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_min_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_min_epu32, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_max_epu32", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_max_epu32, METH_FASTCALL, nullptr},
    {"_mm512_reduce_add_ps", (PyCFunction) SIMDLowAVX512__mm512_reduce_add_ps, METH_FASTCALL, nullptr},
    {"_mm512_reduce_mul_ps", (PyCFunction) SIMDLowAVX512__mm512_reduce_mul_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_add_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_add_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_mul_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_mul_ps, METH_FASTCALL, nullptr},
    {"_mm512_reduce_min_ps", (PyCFunction) SIMDLowAVX512__mm512_reduce_min_ps, METH_FASTCALL, nullptr},
    {"_mm512_reduce_max_ps", (PyCFunction) SIMDLowAVX512__mm512_reduce_max_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_min_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_min_ps, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_max_ps", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_max_ps, METH_FASTCALL, nullptr},
    {"_mm512_reduce_add_epi64", (PyCFunction) SIMDLowAVX512__mm512_reduce_add_epi64, METH_FASTCALL, nullptr},
    {"_mm512_reduce_mul_epi64", (PyCFunction) SIMDLowAVX512__mm512_reduce_mul_epi64, METH_FASTCALL, nullptr},
    {"_mm512_reduce_and_epi64", (PyCFunction) SIMDLowAVX512__mm512_reduce_and_epi64, METH_FASTCALL, nullptr},
    {"_mm512_reduce_or_epi64", (PyCFunction) SIMDLowAVX512__mm512_reduce_or_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_add_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_add_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_mul_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_mul_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_and_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_and_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_or_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_or_epi64, METH_FASTCALL, nullptr},
    {"_mm512_reduce_min_epi64", (PyCFunction) SIMDLowAVX512__mm512_reduce_min_epi64, METH_FASTCALL, nullptr},
    {"_mm512_reduce_max_epi64", (PyCFunction) SIMDLowAVX512__mm512_reduce_max_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_min_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_min_epi64, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_max_epi64", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_max_epi64, METH_FASTCALL, nullptr},
    {"_mm512_reduce_min_epu64", (PyCFunction) SIMDLowAVX512__mm512_reduce_min_epu64, METH_FASTCALL, nullptr},
    {"_mm512_reduce_max_epu64", (PyCFunction) SIMDLowAVX512__mm512_reduce_max_epu64, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_min_epu64", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_min_epu64, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_max_epu64", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_max_epu64, METH_FASTCALL, nullptr},
    {"_mm512_reduce_add_pd", (PyCFunction) SIMDLowAVX512__mm512_reduce_add_pd, METH_FASTCALL, nullptr},
    {"_mm512_reduce_mul_pd", (PyCFunction) SIMDLowAVX512__mm512_reduce_mul_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_add_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_add_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_mul_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_mul_pd, METH_FASTCALL, nullptr},
    {"_mm512_reduce_min_pd", (PyCFunction) SIMDLowAVX512__mm512_reduce_min_pd, METH_FASTCALL, nullptr},
    {"_mm512_reduce_max_pd", (PyCFunction) SIMDLowAVX512__mm512_reduce_max_pd, METH_FASTCALL, nullptr},
    {"_mm512_mask_reduce_min_pd", (PyCFunction) SIMDLowAVX512__mm512_mask_reduce_min_pd, METH_FASTCALL, nullptr},

};

void initializeSIMDLowAVX512Type(PyTypeObject &type) {
    type.tp_name = "SIMDLowAVX512";
    type.tp_basicsize = sizeof(SIMDLowAVX512);
    type.tp_itemsize = 0;
    type.tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE;
    type.tp_methods = SIMDLowAVX512_methods;
    type.tp_init = (initproc) SIMDLowAVX512_init;
    type.tp_new = PyType_GenericNew;
    type.tp_dealloc = (destructor) SIMDLowAVX512_dealloc;
    type.tp_alloc = PyType_GenericAlloc;
    type.tp_free = PyObject_Del;
}

static struct PyModuleDef SIMDLowAVX512_module = {
        PyModuleDef_HEAD_INIT,
        "__pyfastutil.SIMDLowAVX512",
        "Allow access to raw C AVX512 APIs.",
        -1,
        nullptr, nullptr, nullptr, nullptr, nullptr
};

#pragma clang diagnostic push
#pragma ide diagnostic ignored "OCUnusedGlobalDeclarationInspection"
PyMODINIT_FUNC PyInit_SIMDLowAVX512() {
    initializeSIMDLowAVX512Type(SIMDLowAVX512Type);

    PyObject *object = PyModule_Create(&SIMDLowAVX512_module);
    if (object == nullptr)
        return nullptr;

    Py_INCREF(&SIMDLowAVX512Type);
    if (PyModule_AddObject(object, "SIMDLowAVX512", (PyObject *) &SIMDLowAVX512Type) < 0) {
        Py_DECREF(&SIMDLowAVX512Type);
        Py_DECREF(object);
        return nullptr;
    }

    return object;
}
#pragma clang diagnostic pop
}
