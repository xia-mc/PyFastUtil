from typing import TypeVar, NoReturn

Ptr = TypeVar("Ptr", bound=int)
NULL: Ptr


class Unsafe:
    """
    A class for performing low-level, unsafe memory operations. This class allows direct memory
    management and manipulation, akin to C-style malloc, free, and memcpy. It should be used with
    extreme caution, as improper use can lead to memory corruption, crashes, or other undefined behavior.

    **Best Practice**:
        Use this class within a `with` statement to limit the scope of unsafe operations, similar to
        the concept of `unsafe` blocks in Rust. This ensures that unsafe actions are confined to a
        small, controlled section of code.

        Example:
        ```python
        with Unsafe() as unsafe:
            # Perform unsafe operations here
        ```

    **Warning**:
        This class bypasses Python's automatic memory management and should only be used by advanced
        users who understand the risks of manual memory management.
    """

    def __init__(self) -> None:
        """
        Initializes the Unsafe context. This constructor does not allocate any memory or perform any
        unsafe operations. It simply prepares the object to be used in a `with` statement.
        """
        pass

    def __enter__(self) -> Unsafe: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def malloc(self, __size: int) -> Ptr:
        """
        Allocates a block of memory of the given size.

        :param __size: The number of bytes to allocate.
        :return: A pointer (integer representing the memory address) to the allocated memory block.

        **Warning**: The allocated memory is uninitialized. You are responsible for managing this memory
        and freeing it when no longer needed.
        """
        pass

    def calloc(self, __num: int, __size: int) -> Ptr:
        """
        Allocates a block of memory for an array of elements, initializing all bytes to zero.

        :param __num: The number of elements to allocate.
        :param __size: The size of each element in bytes.
        :return: A pointer (integer representing the memory address) to the allocated and initialized memory block.

        **Warning**: You are responsible for managing this memory and freeing it when no longer needed.
        """
        pass

    def realloc(self, __pointer: Ptr, __newSize: int) -> Ptr:
        """
        Reallocates a block of memory to a new size.

        :param __pointer: The pointer to the previously allocated memory block.
        :param __newSize: The new size of the memory block in bytes.
        :return: A pointer (integer representing the memory address) to the reallocated memory block.

        **Warning**: You are responsible for managing this memory and freeing it when no longer needed.
        """
        pass

    def free(self, __pointer: Ptr) -> None:
        """
        Frees a previously allocated block of memory.

        :param __pointer: The pointer to the memory block to free.

        **Warning**: After calling this function, the pointer becomes invalid and should not be used.
        """
        pass

    def aligned_malloc(self, __size: int, __alignment: int) -> Ptr:
        """
        Allocates a block of memory of the given size, aligned to the specified boundary.

        :param __size: The number of bytes to allocate.
        :param __alignment: The alignment boundary in bytes. Must be a power of two.
        :return: A pointer (integer representing the memory address) to the allocated and aligned memory block.

        **Warning**: The allocated memory is uninitialized. You are responsible for managing this memory
        and freeing it with `aligned_free` when no longer needed.
        """
        pass

    def aligned_free(self, __pointer: Ptr) -> None:
        """
        Frees a previously allocated block of memory that was aligned with `aligned_malloc`.

        :param __pointer: The pointer to the aligned memory block to free.

        **Warning**: After calling this function, the pointer becomes invalid and should not be used.
        """
        pass

    def get(self, __pointer: Ptr, __size: int) -> bytes:
        """
        Reads a block of memory and returns its contents as a bytes object.

        :param __pointer: The pointer to the memory block to read from.
        :param __size: The number of bytes to read.
        :return: A bytes object containing the data read from memory.

        **Warning**: Ensure that the memory block is valid and accessible. Accessing invalid memory
        can cause undefined behavior.
        """
        pass

    def set(self, __pointer: Ptr, __bytes: bytes) -> None:
        """
        Writes a bytes object to a block of memory.

        :param __pointer: The pointer to the memory block to write to.
        :param __bytes: The bytes object containing the data to write.

        **Warning**: Ensure that the memory block is large enough to hold the data. Writing beyond
        the allocated memory can cause undefined behavior.
        """
        pass

    def get_address(self, __object: object) -> Ptr:
        """
        Returns the memory address of a Python object.

        :param __object: The Python object to get the address of.
        :return: A pointer (integer representing the memory address) of the object.

        **Warning**: Directly manipulating the memory of Python objects can lead to interpreter crashes
        and undefined behavior. Use with caution.
        """
        pass

    def as_object(self, __pointer: Ptr) -> object:
        """
        Converts a memory address (pointer) back into a Python object.

        This method allows you to interpret the raw memory at the given pointer as a Python object. It is
        the inverse of `get_address()`, which retrieves the memory address of a Python object.

        :param __pointer: The pointer (memory address) to the object.
        :return: The Python object located at the given memory address.

        **Warning**: This is an extremely unsafe operation. Only use this method if you are absolutely
        certain that the memory address points to a valid Python object. Incorrect use can lead to
        interpreter crashes, memory corruption, or undefined behavior.
        """
        pass

    def memcpy(self, __from: Ptr, __to: Ptr, __size: int) -> None:
        """
        Copies a block of memory from one location to another.

        :param __from: The pointer to the source memory block.
        :param __to: The pointer to the destination memory block.
        :param __size: The number of bytes to copy.

        **Warning**: Ensure that both the source and destination memory blocks are valid and large enough
        to hold the data being copied. Copying invalid memory can cause undefined behavior.
        """
        pass

    def memset(self, __address: Ptr, __val: int, __size: int) -> None:
        """
        Sets a block of memory to a specified value.

        :param __address: The pointer to the memory block to be set.
        :param __val: The value to set each byte of the memory block to (0-255).
        :param __size: The number of bytes to set.

        **Description**:
        This function initializes a memory block with a specified value. Each byte in the block of
        memory, starting from the given address, will be set to the provided value.

        **Warning**:
        - Ensure that the memory block starting at `__address` is valid and large enough to hold
          `__size` bytes. Writing to invalid memory can cause undefined behavior.
        - The value `__val` is treated as a single byte (0-255). If a value outside this range is
          provided, it will be truncated to fit within a byte.
        ```
        """
        pass

    def incref(self, __object: object) -> None:
        """
        Increments the reference count of a Python object.

        :param __object: The Python object whose reference count will be incremented.

        **Warning**: Misusing reference counts can lead to memory leaks or premature object destruction.
        """
        pass

    def decref(self, __object: object) -> None:
        """
        Decrements the reference count of a Python object.

        :param __object: The Python object whose reference count will be decremented.

        **Warning**: Misusing reference counts can lead to memory leaks or premature object destruction.
        """
        pass

    def refcnt(self, __object: object) -> int:
        """
        Get the reference count of a Python object.

        :param __object: The Python object.
        """
        pass

    def fputs(self, __str: str) -> None:
        """
        Writes a string to a low-level output stream.

        This method writes the given string to a file or output stream, similar to the C `fputs` function.
        The exact behavior depends on the underlying implementation of the output stream.

        :param __str: The string to write to the output stream.

        **Warning**: This method performs a low-level write operation, so it does not handle automatic
        newline conversion or character encoding. Ensure the string is in the correct format before writing.
        """
        pass

    def fflush(self) -> None:
        """
        Flushes the output buffer of the stream.

        This method forces any buffered output data to be written to the underlying device or file.
        It is similar to the C `fflush` function.

        **Use Case**: This is useful when you want to ensure that all data written to the stream is
        physically written out (for example, when writing to a file or sending data over a network).

        **Warning**: Improper use of this method can lead to performance degradation if called too frequently.
        """
        pass

    def fgets(self, __bufferSize: int) -> str:
        """
        Reads a line from a low-level input stream into a buffer.

        This method reads up to `__bufferSize - 1` characters from the input stream, stopping when a newline
        character is encountered or the buffer is full. It is similar to the C `fgets` function.

        :param __bufferSize: The maximum number of characters to read, including the null terminator.
        :return: A string containing the characters read from the stream, or an empty string if the end of
                 the stream is reached.

        **Warning**: Ensure that the buffer size is large enough to hold the expected input. Reading from an
        invalid or closed stream can result in undefined behavior.
        """
        pass


class SIMD:
    """
    A class for performing low-level, SIMD-optimized memory operations.

    This class provides methods for memory operations that leverage SIMD (Single Instruction, Multiple Data)
    instructions such as SSE4.1, AVX2, and AVX-512 for high-performance memory manipulation. It is designed
    for advanced users who are familiar with SIMD and low-level memory operations.

    **Best Practice**:
        Use this class within a `with` statement to limit the scope of SIMD operations, ensuring that
        SIMD-specific actions are confined to a controlled section of code.

        Example:
        ```python
        with SIMD() as simd:
            # Perform SIMD-optimized operations here
        ```

    **Warning**:
        - This class bypasses Python's automatic memory management and relies on low-level memory manipulation.
        - Improper use can lead to memory corruption, crashes, or other undefined behavior.
    """

    def __init__(self) -> None:
        """
        Initializes the SIMD context. This constructor does not allocate any memory or perform any
        SIMD operations. It simply prepares the object to be used in a `with` statement.
        """
        pass

    def __enter__(self) -> SIMD: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

    def isSSE41Supported(self) -> bool:
        """
        Checks if the current CPU supports SSE4.1 instructions.

        :return: True if SSE4.1 is supported, False otherwise.
        """
        pass

    def isAVX2Supported(self) -> bool:
        """
        Checks if the current CPU supports AVX2 instructions.

        :return: True if AVX2 is supported, False otherwise.
        """
        pass

    def isAVX512Supported(self) -> bool:
        """
        Checks if the current CPU supports AVX-512 instructions.

        :return: True if AVX-512 is supported, False otherwise.
        """
        pass

    def isSSSE3Supported(self) -> bool:
        """
        Checks if the current CPU supports SSSE3 instructions.

        :return: True if SSSE3 is supported, False otherwise.
        """
        pass

    def isArmNeonSupported(self) -> bool:
        """
        Checks if the current CPU supports Arm-Neon instructions.

        :return: True if Arm-Neon is supported, False otherwise.
        """
        pass

    def setAVX512Vector32(self, __ptr: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int, __I: int, __J: int, __K: int, __L: int, __M: int, __N: int, __O: int, __P: int) -> None: ...
    def setAVX512Vector16(self, __ptr: Ptr, __q31: int, __q30: int, __q29: int, __q28: int, __q27: int, __q26: int, __q25: int, __q24: int, __q23: int, __q22: int, __q21: int, __q20: int, __q19: int, __q18: int, __q17: int, __q16: int, __q15: int, __q14: int, __q13: int, __q12: int, __q11: int, __q10: int, __q09: int, __q08: int, __q07: int, __q06: int, __q05: int, __q04: int, __q03: int, __q02: int, __q01: int, __q00: int) -> None: ...
    def setAVX512Vector8(self, __ptr: Ptr, __q63: int, __q62: int, __q61: int, __q60: int, __q59: int, __q58: int, __q57: int, __q56: int, __q55: int, __q54: int, __q53: int, __q52: int, __q51: int, __q50: int, __q49: int, __q48: int, __q47: int, __q46: int, __q45: int, __q44: int, __q43: int, __q42: int, __q41: int, __q40: int, __q39: int, __q38: int, __q37: int, __q36: int, __q35: int, __q34: int, __q33: int, __q32: int, __q31: int, __q30: int, __q29: int, __q28: int, __q27: int, __q26: int, __q25: int, __q24: int, __q23: int, __q22: int, __q21: int, __q20: int, __q19: int, __q18: int, __q17: int, __q16: int, __q15: int, __q14: int, __q13: int, __q12: int, __q11: int, __q10: int, __q09: int, __q08: int, __q07: int, __q06: int, __q05: int, __q04: int, __q03: int, __q02: int, __q01: int, __q00: int) -> None: ...
    def setAVX2Vector32(self, __ptr: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int) -> None: ...
    def setAVX2Vector16(self, __ptr: Ptr, __q15: int, __q14: int, __q13: int, __q12: int, __q11: int, __q10: int, __q09: int, __q08: int, __q07: int, __q06: int, __q05: int, __q04: int, __q03: int, __q02: int, __q01: int, __q00: int) -> None: ...
    def setAVX2Vector8(self, __ptr: Ptr, __q31: int, __q30: int, __q29: int, __q28: int, __q27: int, __q26: int, __q25: int, __q24: int, __q23: int, __q22: int, __q21: int, __q20: int, __q19: int, __q18: int, __q17: int, __q16: int, __q15: int, __q14: int, __q13: int, __q12: int, __q11: int, __q10: int, __q09: int, __q08: int, __q07: int, __q06: int, __q05: int, __q04: int, __q03: int, __q02: int, __q01: int, __q00: int) -> None: ...
    def memcpyInt(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyIntAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseInt(self, __address: Ptr, __count: int) -> None: ...
    def memcpyUnsignedInt(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyUnsignedIntAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseUnsignedInt(self, __address: Ptr, __count: int) -> None: ...
    def memcpyLong(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyLongAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseLong(self, __address: Ptr, __count: int) -> None: ...
    def memcpyUnsignedLong(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyUnsignedLongAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseUnsignedLong(self, __address: Ptr, __count: int) -> None: ...
    def memcpyLongLong(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyLongLongAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseLongLong(self, __address: Ptr, __count: int) -> None: ...
    def memcpyUnsignedLongLong(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyUnsignedLongLongAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseUnsignedLongLong(self, __address: Ptr, __count: int) -> None: ...
    def memcpyShort(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyShortAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseShort(self, __address: Ptr, __count: int) -> None: ...
    def memcpyUnsignedShort(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyUnsignedShortAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseUnsignedShort(self, __address: Ptr, __count: int) -> None: ...
    def memcpyFloat(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyFloatAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseFloat(self, __address: Ptr, __count: int) -> None: ...
    def memcpyDouble(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyDoubleAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseDouble(self, __address: Ptr, __count: int) -> None: ...
    def memcpyLongDouble(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyLongDoubleAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseLongDouble(self, __address: Ptr, __count: int) -> None: ...
    def memcpyChar(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyCharAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseChar(self, __address: Ptr, __count: int) -> None: ...
    def memcpyUnsignedChar(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyUnsignedCharAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseUnsignedChar(self, __address: Ptr, __count: int) -> None: ...
    def memcpyWChar(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyWCharAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseWChar(self, __address: Ptr, __count: int) -> None: ...
    def memcpyChar16(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyChar16Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseChar16(self, __address: Ptr, __count: int) -> None: ...
    def memcpyChar32(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyChar32Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseChar32(self, __address: Ptr, __count: int) -> None: ...
    def memcpyBool(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyBoolAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseBool(self, __address: Ptr, __count: int) -> None: ...
    def memcpyInt8(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyInt8Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseInt8(self, __address: Ptr, __count: int) -> None: ...
    def memcpyUInt8(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyUInt8Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseUInt8(self, __address: Ptr, __count: int) -> None: ...
    def memcpyInt16(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyInt16Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseInt16(self, __address: Ptr, __count: int) -> None: ...
    def memcpyUInt16(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyUInt16Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseUInt16(self, __address: Ptr, __count: int) -> None: ...
    def memcpyInt32(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyInt32Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseInt32(self, __address: Ptr, __count: int) -> None: ...
    def memcpyUInt32(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyUInt32Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseUInt32(self, __address: Ptr, __count: int) -> None: ...
    def memcpyInt64(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyInt64Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseInt64(self, __address: Ptr, __count: int) -> None: ...
    def memcpyUInt64(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyUInt64Aligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseUInt64(self, __address: Ptr, __count: int) -> None: ...
    def memcpyVoidPtr(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyVoidPtrAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseVoidPtr(self, __address: Ptr, __count: int) -> None: ...
    def memcpyIntPtr(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyIntPtrAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseIntPtr(self, __address: Ptr, __count: int) -> None: ...
    def memcpyFloatPtr(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyFloatPtrAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reverseFloatPtr(self, __address: Ptr, __count: int) -> None: ...
    def memcpyPyObjectPtr(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def memcpyPyObjectPtrAligned(self, __addressFrom: Ptr, __addressTo: Ptr, __count: int) -> None: ...
    def reversePyObjectPtr(self, __address: Ptr, __count: int) -> None: ...


RaisesNotImplementedError = TypeVar("RaisesNotImplementedError", bound=NoReturn)
"""
A marker type to indicate that a function raises a NotImplementedError.

This type is used to explicitly document functions that are not currently
supported in PyFastUtil and will raise a NotImplementedError when called.
"""

class SIMDLowAVX512:
    """
    A class for performing AVX-512 SIMD operations.

    This class provides Python bindings for low-level AVX-512 SIMD instructions. It is automatically
    generated and designed for advanced users who need direct access to AVX-512 operations. All
    methods in this class map directly to C methods and are intended to be used with aligned memory
    pointers.

    **Key Features**:
        - Supports operations on AVX-512 vectors via 64-byte aligned pointers.
        - Methods directly map to C AVX-512 intrinsics with minimal abstraction.
        - Best used in conjunction with the `Unsafe` class for memory management.

    **Best Practice**:
        Use this class within a `with` statement to ensure that SIMD operations are scoped and
        memory management is clear. For example:

        ```python
        with Unsafe() as unsafe, SIMDLowAVX512() as simd:
            vec512i: Ptr = unsafe.aligned_malloc(64, 64)
            simd._mm512_set_epi64(vec512i, 1, 2, 3, 4, 5, 6, 7, 8)
            // do some operations ...
            unsafe.aligned_free(vec512i)
            vec512i = NULL
        ```

    **Implementation Details**:
        - This class is automatically generated by a script.
        - Non-POD (Plain Old Data) types are mapped via pointers.
        - For C methods with non-void return types, the return value is mapped to the first argument
          `__result`, which must be a pointer to memory with the appropriate alignment.

    **Warnings**:
        - All pointers passed to this class must be 64-byte aligned.
        - Improper use of these methods can lead to memory corruption, crashes, or undefined behavior.
    """

    def __init__(self) -> None:
        """
        Initializes the SIMDLowAVX512 context.

        This constructor does not perform any AVX-512 operations. It prepares the object to be
        used in a `with` statement for scoping SIMD operations.
        """
        pass

    def __enter__(self) -> SIMDLowAVX512: ...

    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

    def _mm512_int2mask(self, __result: Ptr, __M: int) -> RaisesNotImplementedError:
        """
        _mm512_int2mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_int2mask(__M: int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask2int(self, __result: Ptr, __M: Ptr) -> None:
        """
        Executes the _mm512_mask2int operation.

        C method prototype:
            _mm512_mask2int(__M: __mmask16) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set_epi64(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int) -> None:
        """
        Executes the _mm512_set_epi64 operation.

        C method prototype:
            _mm512_set_epi64(__A: long long, __B: long long, __C: long long, __D: long long, __E: long long, __F: long long, __G: long long, __H: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set_epi32(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int, __I: int, __J: int, __K: int, __L: int, __M: int, __N: int, __O: int, __P: int) -> None:
        """
        Executes the _mm512_set_epi32 operation.

        C method prototype:
            _mm512_set_epi32(__A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int, __I: int, __J: int, __K: int, __L: int, __M: int, __N: int, __O: int, __P: int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set_epi16(self, __result: Ptr, __q31: int, __q30: int, __q29: int, __q28: int, __q27: int, __q26: int, __q25: int, __q24: int, __q23: int, __q22: int, __q21: int, __q20: int, __q19: int, __q18: int, __q17: int, __q16: int, __q15: int, __q14: int, __q13: int, __q12: int, __q11: int, __q10: int, __q09: int, __q08: int, __q07: int, __q06: int, __q05: int, __q04: int, __q03: int, __q02: int, __q01: int, __q00: int) -> None:
        """
        Executes the _mm512_set_epi16 operation.

        C method prototype:
            _mm512_set_epi16(__q31: short, __q30: short, __q29: short, __q28: short, __q27: short, __q26: short, __q25: short, __q24: short, __q23: short, __q22: short, __q21: short, __q20: short, __q19: short, __q18: short, __q17: short, __q16: short, __q15: short, __q14: short, __q13: short, __q12: short, __q11: short, __q10: short, __q09: short, __q08: short, __q07: short, __q06: short, __q05: short, __q04: short, __q03: short, __q02: short, __q01: short, __q00: short) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set_epi8(self, __result: Ptr, __q63: int, __q62: int, __q61: int, __q60: int, __q59: int, __q58: int, __q57: int, __q56: int, __q55: int, __q54: int, __q53: int, __q52: int, __q51: int, __q50: int, __q49: int, __q48: int, __q47: int, __q46: int, __q45: int, __q44: int, __q43: int, __q42: int, __q41: int, __q40: int, __q39: int, __q38: int, __q37: int, __q36: int, __q35: int, __q34: int, __q33: int, __q32: int, __q31: int, __q30: int, __q29: int, __q28: int, __q27: int, __q26: int, __q25: int, __q24: int, __q23: int, __q22: int, __q21: int, __q20: int, __q19: int, __q18: int, __q17: int, __q16: int, __q15: int, __q14: int, __q13: int, __q12: int, __q11: int, __q10: int, __q09: int, __q08: int, __q07: int, __q06: int, __q05: int, __q04: int, __q03: int, __q02: int, __q01: int, __q00: int) -> None:
        """
        Executes the _mm512_set_epi8 operation.

        C method prototype:
            _mm512_set_epi8(__q63: char, __q62: char, __q61: char, __q60: char, __q59: char, __q58: char, __q57: char, __q56: char, __q55: char, __q54: char, __q53: char, __q52: char, __q51: char, __q50: char, __q49: char, __q48: char, __q47: char, __q46: char, __q45: char, __q44: char, __q43: char, __q42: char, __q41: char, __q40: char, __q39: char, __q38: char, __q37: char, __q36: char, __q35: char, __q34: char, __q33: char, __q32: char, __q31: char, __q30: char, __q29: char, __q28: char, __q27: char, __q26: char, __q25: char, __q24: char, __q23: char, __q22: char, __q21: char, __q20: char, __q19: char, __q18: char, __q17: char, __q16: char, __q15: char, __q14: char, __q13: char, __q12: char, __q11: char, __q10: char, __q09: char, __q08: char, __q07: char, __q06: char, __q05: char, __q04: char, __q03: char, __q02: char, __q01: char, __q00: char) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set_pd(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int) -> None:
        """
        Executes the _mm512_set_pd operation.

        C method prototype:
            _mm512_set_pd(__A: double, __B: double, __C: double, __D: double, __E: double, __F: double, __G: double, __H: double) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set_ps(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int, __I: int, __J: int, __K: int, __L: int, __M: int, __N: int, __O: int, __P: int) -> None:
        """
        Executes the _mm512_set_ps operation.

        C method prototype:
            _mm512_set_ps(__A: float, __B: float, __C: float, __D: float, __E: float, __F: float, __G: float, __H: float, __I: float, __J: float, __K: float, __L: float, __M: float, __N: float, __O: float, __P: float) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_undefined_ps(self, __result: Ptr) -> None:
        """
        Executes the _mm512_undefined_ps operation.

        C method prototype:
            _mm512_undefined_ps() -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_undefined_pd(self, __result: Ptr) -> None:
        """
        Executes the _mm512_undefined_pd operation.

        C method prototype:
            _mm512_undefined_pd() -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_undefined_epi32(self, __result: Ptr) -> None:
        """
        Executes the _mm512_undefined_epi32 operation.

        C method prototype:
            _mm512_undefined_epi32() -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set1_epi8(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_epi8 operation.

        C method prototype:
            _mm512_set1_epi8(__A: char) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set1_epi16(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_epi16 operation.

        C method prototype:
            _mm512_set1_epi16(__A: short) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set1_pd(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_pd operation.

        C method prototype:
            _mm512_set1_pd(__A: double) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set1_ps(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_ps operation.

        C method prototype:
            _mm512_set1_ps(__A: float) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set4_epi32(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm512_set4_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_set4_epi32(__A: int, __B: int, __C: int, __D: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_set4_epi64(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int) -> None:
        """
        Executes the _mm512_set4_epi64 operation.

        C method prototype:
            _mm512_set4_epi64(__A: long long, __B: long long, __C: long long, __D: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set4_pd(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int) -> None:
        """
        Executes the _mm512_set4_pd operation.

        C method prototype:
            _mm512_set4_pd(__A: double, __B: double, __C: double, __D: double) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set4_ps(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int) -> None:
        """
        Executes the _mm512_set4_ps operation.

        C method prototype:
            _mm512_set4_ps(__A: float, __B: float, __C: float, __D: float) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_setzero_ps(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero_ps operation.

        C method prototype:
            _mm512_setzero_ps() -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_setzero(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero operation.

        C method prototype:
            _mm512_setzero() -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_setzero_pd(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero_pd operation.

        C method prototype:
            _mm512_setzero_pd() -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_setzero_epi32(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero_epi32 operation.

        C method prototype:
            _mm512_setzero_epi32() -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_setzero_si512(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero_si512 operation.

        C method prototype:
            _mm512_setzero_si512() -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mov_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_mov_pd operation.

        C method prototype:
            _mm512_mask_mov_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_mov_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_mov_pd operation.

        C method prototype:
            _mm512_maskz_mov_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mov_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_mov_ps operation.

        C method prototype:
            _mm512_mask_mov_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_mov_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_mov_ps operation.

        C method prototype:
            _mm512_maskz_mov_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_load_pd(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_pd operation.

        C method prototype:
            _mm512_load_pd(__P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_load_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_load_pd operation.

        C method prototype:
            _mm512_mask_load_pd(__W: __m512d, __U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_load_pd(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_load_pd operation.

        C method prototype:
            _mm512_maskz_load_pd(__U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_store_pd(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_pd operation.

        C method prototype:
            _mm512_store_pd(__P: void *, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_store_pd(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_store_pd operation.

        C method prototype:
            _mm512_mask_store_pd(__P: void *, __U: __mmask8, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_load_ps(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_ps operation.

        C method prototype:
            _mm512_load_ps(__P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_load_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_load_ps operation.

        C method prototype:
            _mm512_mask_load_ps(__W: __m512, __U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_load_ps(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_load_ps operation.

        C method prototype:
            _mm512_maskz_load_ps(__U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_store_ps(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_ps operation.

        C method prototype:
            _mm512_store_ps(__P: void *, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_store_ps(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_store_ps operation.

        C method prototype:
            _mm512_mask_store_ps(__P: void *, __U: __mmask16, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mov_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_mov_epi64 operation.

        C method prototype:
            _mm512_mask_mov_epi64(__W: __m512i, __U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_mov_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_mov_epi64 operation.

        C method prototype:
            _mm512_maskz_mov_epi64(__U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_load_epi64(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_epi64 operation.

        C method prototype:
            _mm512_load_epi64(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_load_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_load_epi64 operation.

        C method prototype:
            _mm512_mask_load_epi64(__W: __m512i, __U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_load_epi64(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_load_epi64 operation.

        C method prototype:
            _mm512_maskz_load_epi64(__U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_store_epi64(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_epi64 operation.

        C method prototype:
            _mm512_store_epi64(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_store_epi64(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_store_epi64 operation.

        C method prototype:
            _mm512_mask_store_epi64(__P: void *, __U: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mov_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_mov_epi32 operation.

        C method prototype:
            _mm512_mask_mov_epi32(__W: __m512i, __U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_mov_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_mov_epi32 operation.

        C method prototype:
            _mm512_maskz_mov_epi32(__U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_load_si512(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_si512 operation.

        C method prototype:
            _mm512_load_si512(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_load_epi32(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_epi32 operation.

        C method prototype:
            _mm512_load_epi32(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_load_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_load_epi32 operation.

        C method prototype:
            _mm512_mask_load_epi32(__W: __m512i, __U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_load_epi32(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_load_epi32 operation.

        C method prototype:
            _mm512_maskz_load_epi32(__U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_store_si512(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_si512 operation.

        C method prototype:
            _mm512_store_si512(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_store_epi32(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_epi32 operation.

        C method prototype:
            _mm512_store_epi32(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_store_epi32(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_store_epi32 operation.

        C method prototype:
            _mm512_mask_store_epi32(__P: void *, __U: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mullo_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mullo_epi32 operation.

        C method prototype:
            _mm512_mullo_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_mullo_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_mullo_epi32 operation.

        C method prototype:
            _mm512_maskz_mullo_epi32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mullo_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_mullo_epi32 operation.

        C method prototype:
            _mm512_mask_mullo_epi32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mullox_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mullox_epi64 operation.

        C method prototype:
            _mm512_mullox_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mullox_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_mullox_epi64 operation.

        C method prototype:
            _mm512_mask_mullox_epi64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sllv_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_sllv_epi32 operation.

        C method prototype:
            _mm512_sllv_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sllv_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_sllv_epi32 operation.

        C method prototype:
            _mm512_mask_sllv_epi32(__W: __m512i, __U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sllv_epi32(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_sllv_epi32 operation.

        C method prototype:
            _mm512_maskz_sllv_epi32(__U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srav_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_srav_epi32 operation.

        C method prototype:
            _mm512_srav_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srav_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_srav_epi32 operation.

        C method prototype:
            _mm512_mask_srav_epi32(__W: __m512i, __U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srav_epi32(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_srav_epi32 operation.

        C method prototype:
            _mm512_maskz_srav_epi32(__U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srlv_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_srlv_epi32 operation.

        C method prototype:
            _mm512_srlv_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srlv_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_srlv_epi32 operation.

        C method prototype:
            _mm512_mask_srlv_epi32(__W: __m512i, __U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srlv_epi32(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_srlv_epi32 operation.

        C method prototype:
            _mm512_maskz_srlv_epi32(__U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_add_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_add_epi64 operation.

        C method prototype:
            _mm512_add_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_add_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_add_epi64 operation.

        C method prototype:
            _mm512_mask_add_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_add_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_add_epi64 operation.

        C method prototype:
            _mm512_maskz_add_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sub_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sub_epi64 operation.

        C method prototype:
            _mm512_sub_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sub_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sub_epi64 operation.

        C method prototype:
            _mm512_mask_sub_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sub_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sub_epi64 operation.

        C method prototype:
            _mm512_maskz_sub_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sllv_epi64(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_sllv_epi64 operation.

        C method prototype:
            _mm512_sllv_epi64(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sllv_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_sllv_epi64 operation.

        C method prototype:
            _mm512_mask_sllv_epi64(__W: __m512i, __U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sllv_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_sllv_epi64 operation.

        C method prototype:
            _mm512_maskz_sllv_epi64(__U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srav_epi64(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_srav_epi64 operation.

        C method prototype:
            _mm512_srav_epi64(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srav_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_srav_epi64 operation.

        C method prototype:
            _mm512_mask_srav_epi64(__W: __m512i, __U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srav_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_srav_epi64 operation.

        C method prototype:
            _mm512_maskz_srav_epi64(__U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srlv_epi64(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_srlv_epi64 operation.

        C method prototype:
            _mm512_srlv_epi64(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srlv_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_srlv_epi64 operation.

        C method prototype:
            _mm512_mask_srlv_epi64(__W: __m512i, __U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srlv_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_srlv_epi64 operation.

        C method prototype:
            _mm512_maskz_srlv_epi64(__U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_add_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_add_epi32 operation.

        C method prototype:
            _mm512_add_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_add_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_add_epi32 operation.

        C method prototype:
            _mm512_mask_add_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_add_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_add_epi32 operation.

        C method prototype:
            _mm512_maskz_add_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mul_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mul_epi32 operation.

        C method prototype:
            _mm512_mul_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mul_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_mul_epi32 operation.

        C method prototype:
            _mm512_mask_mul_epi32(__W: __m512i, __M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_mul_epi32(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_mul_epi32 operation.

        C method prototype:
            _mm512_maskz_mul_epi32(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sub_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sub_epi32 operation.

        C method prototype:
            _mm512_sub_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sub_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sub_epi32 operation.

        C method prototype:
            _mm512_mask_sub_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sub_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sub_epi32 operation.

        C method prototype:
            _mm512_maskz_sub_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mul_epu32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mul_epu32 operation.

        C method prototype:
            _mm512_mul_epu32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mul_epu32(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_mul_epu32 operation.

        C method prototype:
            _mm512_mask_mul_epu32(__W: __m512i, __M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_mul_epu32(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_mul_epu32 operation.

        C method prototype:
            _mm512_maskz_mul_epu32(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_slli_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_slli_epi64 operation.

        C method prototype:
            _mm512_slli_epi64(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_slli_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_slli_epi64 operation.

        C method prototype:
            _mm512_mask_slli_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_slli_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_slli_epi64 operation.

        C method prototype:
            _mm512_maskz_slli_epi64(__U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sll_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sll_epi64 operation.

        C method prototype:
            _mm512_sll_epi64(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sll_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sll_epi64 operation.

        C method prototype:
            _mm512_mask_sll_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sll_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sll_epi64 operation.

        C method prototype:
            _mm512_maskz_sll_epi64(__U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srli_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_srli_epi64 operation.

        C method prototype:
            _mm512_srli_epi64(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srli_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_srli_epi64 operation.

        C method prototype:
            _mm512_mask_srli_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srli_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_srli_epi64 operation.

        C method prototype:
            _mm512_maskz_srli_epi64(__U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srl_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_srl_epi64 operation.

        C method prototype:
            _mm512_srl_epi64(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srl_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_srl_epi64 operation.

        C method prototype:
            _mm512_mask_srl_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srl_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_srl_epi64 operation.

        C method prototype:
            _mm512_maskz_srl_epi64(__U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srai_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_srai_epi64 operation.

        C method prototype:
            _mm512_srai_epi64(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srai_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_srai_epi64 operation.

        C method prototype:
            _mm512_mask_srai_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srai_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_srai_epi64 operation.

        C method prototype:
            _mm512_maskz_srai_epi64(__U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sra_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sra_epi64 operation.

        C method prototype:
            _mm512_sra_epi64(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sra_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sra_epi64 operation.

        C method prototype:
            _mm512_mask_sra_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sra_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sra_epi64 operation.

        C method prototype:
            _mm512_maskz_sra_epi64(__U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_slli_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_slli_epi32 operation.

        C method prototype:
            _mm512_slli_epi32(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_slli_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_slli_epi32 operation.

        C method prototype:
            _mm512_mask_slli_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_slli_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_slli_epi32 operation.

        C method prototype:
            _mm512_maskz_slli_epi32(__U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sll_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sll_epi32 operation.

        C method prototype:
            _mm512_sll_epi32(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sll_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sll_epi32 operation.

        C method prototype:
            _mm512_mask_sll_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sll_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sll_epi32 operation.

        C method prototype:
            _mm512_maskz_sll_epi32(__U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srli_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_srli_epi32 operation.

        C method prototype:
            _mm512_srli_epi32(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srli_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_srli_epi32 operation.

        C method prototype:
            _mm512_mask_srli_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srli_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_srli_epi32 operation.

        C method prototype:
            _mm512_maskz_srli_epi32(__U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srl_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_srl_epi32 operation.

        C method prototype:
            _mm512_srl_epi32(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srl_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_srl_epi32 operation.

        C method prototype:
            _mm512_mask_srl_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srl_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_srl_epi32 operation.

        C method prototype:
            _mm512_maskz_srl_epi32(__U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_srai_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_srai_epi32 operation.

        C method prototype:
            _mm512_srai_epi32(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_srai_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_srai_epi32 operation.

        C method prototype:
            _mm512_mask_srai_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_srai_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_srai_epi32 operation.

        C method prototype:
            _mm512_maskz_srai_epi32(__U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sra_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sra_epi32 operation.

        C method prototype:
            _mm512_sra_epi32(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sra_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sra_epi32 operation.

        C method prototype:
            _mm512_mask_sra_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sra_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sra_epi32 operation.

        C method prototype:
            _mm512_maskz_sra_epi32(__U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_add_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_add_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_add_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_add_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_add_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_add_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_add_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_add_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_add_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_add_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_add_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_add_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_add_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_add_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_add_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_add_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_add_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_add_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_sub_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_sub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_sub_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_sub_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_sub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_sub_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_sub_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_sub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_sub_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_sub_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_sub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_sub_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_sub_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_sub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_sub_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_sub_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_sub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_sub_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_ternarylogic_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_ternarylogic_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_ternarylogic_epi64(__A: __m512i, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_ternarylogic_epi64(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_ternarylogic_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_ternarylogic_epi64(__A: __m512i, __U: __mmask8, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_ternarylogic_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_ternarylogic_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_ternarylogic_epi64(__U: __mmask8, __A: __m512i, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_ternarylogic_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_ternarylogic_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_ternarylogic_epi32(__A: __m512i, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_ternarylogic_epi32(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_ternarylogic_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_ternarylogic_epi32(__A: __m512i, __U: __mmask16, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_ternarylogic_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_ternarylogic_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_ternarylogic_epi32(__U: __mmask16, __A: __m512i, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_rcp14_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_rcp14_pd operation.

        C method prototype:
            _mm512_rcp14_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_rcp14_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_rcp14_pd operation.

        C method prototype:
            _mm512_mask_rcp14_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_rcp14_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_rcp14_pd operation.

        C method prototype:
            _mm512_maskz_rcp14_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_rcp14_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_rcp14_ps operation.

        C method prototype:
            _mm512_rcp14_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_rcp14_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_rcp14_ps operation.

        C method prototype:
            _mm512_mask_rcp14_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_rcp14_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_rcp14_ps operation.

        C method prototype:
            _mm512_maskz_rcp14_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_rcp14_sd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_rcp14_sd operation.

        C method prototype:
            _mm_rcp14_sd(__A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_rcp14_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_rcp14_sd operation.

        C method prototype:
            _mm_mask_rcp14_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_rcp14_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_rcp14_sd operation.

        C method prototype:
            _mm_maskz_rcp14_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_rcp14_ss(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_rcp14_ss operation.

        C method prototype:
            _mm_rcp14_ss(__A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_rcp14_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_rcp14_ss operation.

        C method prototype:
            _mm_mask_rcp14_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_rcp14_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_rcp14_ss operation.

        C method prototype:
            _mm_maskz_rcp14_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_rsqrt14_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_rsqrt14_pd operation.

        C method prototype:
            _mm512_rsqrt14_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_rsqrt14_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_rsqrt14_pd operation.

        C method prototype:
            _mm512_mask_rsqrt14_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_rsqrt14_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_rsqrt14_pd operation.

        C method prototype:
            _mm512_maskz_rsqrt14_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_rsqrt14_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_rsqrt14_ps operation.

        C method prototype:
            _mm512_rsqrt14_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_rsqrt14_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_rsqrt14_ps operation.

        C method prototype:
            _mm512_mask_rsqrt14_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_rsqrt14_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_rsqrt14_ps operation.

        C method prototype:
            _mm512_maskz_rsqrt14_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_rsqrt14_sd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_rsqrt14_sd operation.

        C method prototype:
            _mm_rsqrt14_sd(__A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_rsqrt14_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_rsqrt14_sd operation.

        C method prototype:
            _mm_mask_rsqrt14_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_rsqrt14_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_rsqrt14_sd operation.

        C method prototype:
            _mm_maskz_rsqrt14_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_rsqrt14_ss(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_rsqrt14_ss operation.

        C method prototype:
            _mm_rsqrt14_ss(__A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_rsqrt14_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_rsqrt14_ss operation.

        C method prototype:
            _mm_mask_rsqrt14_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_rsqrt14_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_rsqrt14_ss operation.

        C method prototype:
            _mm_maskz_rsqrt14_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sqrt_round_pd(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_sqrt_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_sqrt_round_pd(__A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_sqrt_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_sqrt_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_sqrt_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_sqrt_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_sqrt_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_sqrt_round_pd(__U: __mmask8, __A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_sqrt_round_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_sqrt_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_sqrt_round_ps(__A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_sqrt_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_sqrt_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_sqrt_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_sqrt_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_sqrt_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_sqrt_round_ps(__U: __mmask16, __A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_sqrt_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_sqrt_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_sqrt_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_sqrt_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_sqrt_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_sqrt_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_sqrt_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_sqrt_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_sqrt_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_sqrt_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_sqrt_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_sqrt_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_sqrt_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_sqrt_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_sqrt_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_sqrt_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_sqrt_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_sqrt_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtepi8_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi8_epi32 operation.

        C method prototype:
            _mm512_cvtepi8_epi32(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi8_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi8_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepi8_epi32(__W: __m512i, __U: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi8_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi8_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepi8_epi32(__U: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi8_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi8_epi64 operation.

        C method prototype:
            _mm512_cvtepi8_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi8_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi8_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepi8_epi64(__W: __m512i, __U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi8_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi8_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepi8_epi64(__U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi16_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi16_epi32 operation.

        C method prototype:
            _mm512_cvtepi16_epi32(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi16_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi16_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepi16_epi32(__W: __m512i, __U: __mmask16, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi16_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi16_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepi16_epi32(__U: __mmask16, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi16_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi16_epi64 operation.

        C method prototype:
            _mm512_cvtepi16_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi16_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi16_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepi16_epi64(__W: __m512i, __U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi16_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi16_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepi16_epi64(__U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi32_epi64(self, __result: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_epi64 operation.

        C method prototype:
            _mm512_cvtepi32_epi64(__X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepi32_epi64(__W: __m512i, __U: __mmask8, __X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepi32_epi64(__U: __mmask8, __X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepu8_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu8_epi32 operation.

        C method prototype:
            _mm512_cvtepu8_epi32(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu8_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu8_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepu8_epi32(__W: __m512i, __U: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu8_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu8_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepu8_epi32(__U: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepu8_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu8_epi64 operation.

        C method prototype:
            _mm512_cvtepu8_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu8_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu8_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepu8_epi64(__W: __m512i, __U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu8_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu8_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepu8_epi64(__U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepu16_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu16_epi32 operation.

        C method prototype:
            _mm512_cvtepu16_epi32(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu16_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu16_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepu16_epi32(__W: __m512i, __U: __mmask16, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu16_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu16_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepu16_epi32(__U: __mmask16, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepu16_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu16_epi64 operation.

        C method prototype:
            _mm512_cvtepu16_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu16_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu16_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepu16_epi64(__W: __m512i, __U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu16_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu16_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepu16_epi64(__U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepu32_epi64(self, __result: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_cvtepu32_epi64 operation.

        C method prototype:
            _mm512_cvtepu32_epi64(__X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu32_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu32_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepu32_epi64(__W: __m512i, __U: __mmask8, __X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu32_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu32_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepu32_epi64(__U: __mmask8, __X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_add_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_add_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_add_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_add_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_add_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_add_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_add_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_add_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_add_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_add_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_add_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_add_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_add_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_add_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_add_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_add_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_add_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_add_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_sub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_sub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_sub_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_sub_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_sub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_sub_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_sub_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_sub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_sub_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_sub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_sub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_sub_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_sub_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_sub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_sub_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_sub_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_sub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_sub_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mul_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mul_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mul_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_mul_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_mul_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_mul_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_mul_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_mul_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_mul_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mul_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mul_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mul_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_mul_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_mul_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_mul_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_mul_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_mul_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_mul_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_div_round_pd(self, __result: Ptr, __M: Ptr, __V: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_div_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_div_round_pd(__M: __m512d, __V: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_div_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_div_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_div_round_pd(__W: __m512d, __U: __mmask8, __M: __m512d, __V: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_div_round_pd(self, __result: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_div_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_div_round_pd(__U: __mmask8, __M: __m512d, __V: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_div_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_div_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_div_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_div_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_div_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_div_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_div_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_div_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_div_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mul_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mul_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mul_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_mul_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_mul_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_mul_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_mul_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_mul_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_mul_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mul_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mul_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mul_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_mul_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_mul_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_mul_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_mul_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_mul_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_mul_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_div_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_div_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_div_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_div_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_div_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_div_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_div_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_div_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_div_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_div_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_div_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_div_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_div_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_div_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_div_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_div_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_div_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_div_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_max_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_max_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_max_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_max_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_max_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_max_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_max_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_max_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_max_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_max_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_max_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_max_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_max_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_max_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_max_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_max_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_max_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_max_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_min_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_min_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_min_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_min_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_min_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_min_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_min_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_min_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_min_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_min_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_min_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_min_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_min_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_min_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_min_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_min_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_min_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_min_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_scalef_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_scalef_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_scalef_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_scalef_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_scalef_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_scalef_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_scalef_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_scalef_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_scalef_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_scalef_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_scalef_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_scalef_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_scalef_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_scalef_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_scalef_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_scalef_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_scalef_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_scalef_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_scalef_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_scalef_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_scalef_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_scalef_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_scalef_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_scalef_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_scalef_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_scalef_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_scalef_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_scalef_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_scalef_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_scalef_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_scalef_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_scalef_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_scalef_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_scalef_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_scalef_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_scalef_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmadd_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmadd_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmadd_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmadd_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmadd_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmadd_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmadd_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmadd_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmsub_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmsub_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmsub_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmsub_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmsub_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmsub_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmsub_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmsub_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmaddsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmaddsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmaddsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmaddsub_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmaddsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmaddsub_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmaddsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmaddsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmaddsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmaddsub_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmaddsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmaddsub_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmaddsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmaddsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmaddsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmaddsub_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmaddsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmaddsub_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmaddsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmaddsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmaddsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmaddsub_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmaddsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmaddsub_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmsubadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmsubadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmsubadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmsubadd_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmsubadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmsubadd_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmsubadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmsubadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmsubadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmsubadd_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmsubadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmsubadd_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmsubadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmsubadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmsubadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmsubadd_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmsubadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmsubadd_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmsubadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmsubadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmsubadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmsubadd_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmsubadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmsubadd_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fnmadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fnmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fnmadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fnmadd_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fnmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fnmadd_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fnmadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fnmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fnmadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fnmadd_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fnmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fnmadd_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fnmadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fnmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fnmadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fnmadd_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fnmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fnmadd_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fnmadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fnmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fnmadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fnmadd_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fnmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fnmadd_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fnmsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fnmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fnmsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fnmsub_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fnmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fnmsub_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fnmsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fnmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fnmsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fnmsub_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fnmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fnmsub_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fnmsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fnmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fnmsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fnmsub_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fnmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fnmsub_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fnmsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fnmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fnmsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fnmsub_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fnmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fnmsub_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_abs_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_abs_epi64 operation.

        C method prototype:
            _mm512_abs_epi64(__A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_abs_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_abs_epi64 operation.

        C method prototype:
            _mm512_mask_abs_epi64(__W: __m512i, __U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_abs_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_abs_epi64 operation.

        C method prototype:
            _mm512_maskz_abs_epi64(__U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_abs_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_abs_epi32 operation.

        C method prototype:
            _mm512_abs_epi32(__A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_abs_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_abs_epi32 operation.

        C method prototype:
            _mm512_mask_abs_epi32(__W: __m512i, __U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_abs_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_abs_epi32 operation.

        C method prototype:
            _mm512_maskz_abs_epi32(__U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_broadcastss_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcastss_ps operation.

        C method prototype:
            _mm512_broadcastss_ps(__A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_broadcastss_ps(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcastss_ps operation.

        C method prototype:
            _mm512_mask_broadcastss_ps(__O: __m512, __M: __mmask16, __A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_broadcastss_ps(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcastss_ps operation.

        C method prototype:
            _mm512_maskz_broadcastss_ps(__M: __mmask16, __A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_broadcastsd_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcastsd_pd operation.

        C method prototype:
            _mm512_broadcastsd_pd(__A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_broadcastsd_pd(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcastsd_pd operation.

        C method prototype:
            _mm512_mask_broadcastsd_pd(__O: __m512d, __M: __mmask8, __A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_broadcastsd_pd(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcastsd_pd operation.

        C method prototype:
            _mm512_maskz_broadcastsd_pd(__M: __mmask8, __A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_broadcastd_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcastd_epi32 operation.

        C method prototype:
            _mm512_broadcastd_epi32(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_broadcastd_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcastd_epi32 operation.

        C method prototype:
            _mm512_mask_broadcastd_epi32(__O: __m512i, __M: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_broadcastd_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcastd_epi32 operation.

        C method prototype:
            _mm512_maskz_broadcastd_epi32(__M: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set1_epi32(self, __result: Ptr, __A: int) -> RaisesNotImplementedError:
        """
        _mm512_set1_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_set1_epi32(__A: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_set1_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_set1_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_set1_epi32(__O: __m512i, __M: __mmask16, __A: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_set1_epi32(self, __result: Ptr, __M: Ptr, __A: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_set1_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_set1_epi32(__M: __mmask16, __A: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_broadcastq_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcastq_epi64 operation.

        C method prototype:
            _mm512_broadcastq_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_broadcastq_epi64(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcastq_epi64 operation.

        C method prototype:
            _mm512_mask_broadcastq_epi64(__O: __m512i, __M: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_broadcastq_epi64(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcastq_epi64 operation.

        C method prototype:
            _mm512_maskz_broadcastq_epi64(__M: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_set1_epi64(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_epi64 operation.

        C method prototype:
            _mm512_set1_epi64(__A: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_set1_epi64(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: int) -> None:
        """
        Executes the _mm512_mask_set1_epi64 operation.

        C method prototype:
            _mm512_mask_set1_epi64(__O: __m512i, __M: __mmask8, __A: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_set1_epi64(self, __result: Ptr, __M: Ptr, __A: int) -> None:
        """
        Executes the _mm512_maskz_set1_epi64 operation.

        C method prototype:
            _mm512_maskz_set1_epi64(__M: __mmask8, __A: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_broadcast_f32x4(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcast_f32x4 operation.

        C method prototype:
            _mm512_broadcast_f32x4(__A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_broadcast_f32x4(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcast_f32x4 operation.

        C method prototype:
            _mm512_mask_broadcast_f32x4(__O: __m512, __M: __mmask16, __A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_broadcast_f32x4(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcast_f32x4 operation.

        C method prototype:
            _mm512_maskz_broadcast_f32x4(__M: __mmask16, __A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_broadcast_i32x4(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcast_i32x4 operation.

        C method prototype:
            _mm512_broadcast_i32x4(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_broadcast_i32x4(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcast_i32x4 operation.

        C method prototype:
            _mm512_mask_broadcast_i32x4(__O: __m512i, __M: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_broadcast_i32x4(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcast_i32x4 operation.

        C method prototype:
            _mm512_maskz_broadcast_i32x4(__M: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_broadcast_f64x4(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcast_f64x4 operation.

        C method prototype:
            _mm512_broadcast_f64x4(__A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_broadcast_f64x4(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcast_f64x4 operation.

        C method prototype:
            _mm512_mask_broadcast_f64x4(__O: __m512d, __M: __mmask8, __A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_broadcast_f64x4(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcast_f64x4 operation.

        C method prototype:
            _mm512_maskz_broadcast_f64x4(__M: __mmask8, __A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_broadcast_i64x4(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcast_i64x4 operation.

        C method prototype:
            _mm512_broadcast_i64x4(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_broadcast_i64x4(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcast_i64x4 operation.

        C method prototype:
            _mm512_mask_broadcast_i64x4(__O: __m512i, __M: __mmask8, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_broadcast_i64x4(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcast_i64x4 operation.

        C method prototype:
            _mm512_maskz_broadcast_i64x4(__M: __mmask8, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_shuffle_epi32(self, __result: Ptr, __A: Ptr, __mask: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_epi32(__A: __m512i, __mask: _MM_PERM_ENUM) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __mask: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __mask: _MM_PERM_ENUM) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __mask: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_epi32(__U: __mmask16, __A: __m512i, __mask: _MM_PERM_ENUM) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_i64x2(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_i64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_i64x2(__A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_i64x2(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_i64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_i64x2(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_i64x2(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_i64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_i64x2(__U: __mmask8, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_i32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_i32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_i32x4(__A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_i32x4(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_i32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_i32x4(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_i32x4(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_i32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_i32x4(__U: __mmask16, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_f64x2(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_f64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_f64x2(__A: __m512d, __B: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_f64x2(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_f64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_f64x2(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_f64x2(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_f64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_f64x2(__U: __mmask8, __A: __m512d, __B: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_f32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_f32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_f32x4(__A: __m512, __B: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_f32x4(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_f32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_f32x4(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_f32x4(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_f32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_f32x4(__U: __mmask16, __A: __m512, __B: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_rolv_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_rolv_epi32 operation.

        C method prototype:
            _mm512_rolv_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_rolv_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_rolv_epi32 operation.

        C method prototype:
            _mm512_mask_rolv_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_rolv_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_rolv_epi32 operation.

        C method prototype:
            _mm512_maskz_rolv_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_rorv_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_rorv_epi32 operation.

        C method prototype:
            _mm512_rorv_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_rorv_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_rorv_epi32 operation.

        C method prototype:
            _mm512_mask_rorv_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_rorv_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_rorv_epi32 operation.

        C method prototype:
            _mm512_maskz_rorv_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_rolv_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_rolv_epi64 operation.

        C method prototype:
            _mm512_rolv_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_rolv_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_rolv_epi64 operation.

        C method prototype:
            _mm512_mask_rolv_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_rolv_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_rolv_epi64 operation.

        C method prototype:
            _mm512_maskz_rolv_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_rorv_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_rorv_epi64 operation.

        C method prototype:
            _mm512_rorv_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_rorv_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_rorv_epi64 operation.

        C method prototype:
            _mm512_mask_rorv_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_rorv_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_rorv_epi64 operation.

        C method prototype:
            _mm512_maskz_rorv_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtt_roundpd_epi32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtt_roundpd_epi32(__A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtt_roundpd_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtt_roundpd_epi32(__W: __m256i, __U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtt_roundpd_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtt_roundpd_epi32(__U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtt_roundpd_epu32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtt_roundpd_epu32(__A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtt_roundpd_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtt_roundpd_epu32(__W: __m256i, __U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtt_roundpd_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtt_roundpd_epu32(__U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundpd_epi32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundpd_epi32(__A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundpd_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundpd_epi32(__W: __m256i, __U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundpd_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundpd_epi32(__U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundpd_epu32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundpd_epu32(__A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundpd_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundpd_epu32(__W: __m256i, __U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundpd_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundpd_epu32(__U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtt_roundps_epi32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtt_roundps_epi32(__A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtt_roundps_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtt_roundps_epi32(__W: __m512i, __U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtt_roundps_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtt_roundps_epi32(__U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtt_roundps_epu32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtt_roundps_epu32(__A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtt_roundps_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtt_roundps_epu32(__W: __m512i, __U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtt_roundps_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtt_roundps_epu32(__U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundps_epi32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundps_epi32(__A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundps_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundps_epi32(__W: __m512i, __U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundps_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundps_epi32(__U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundps_epu32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundps_epu32(__A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundps_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundps_epu32(__W: __m512i, __U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundps_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundps_epu32(__U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtu32_sd(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvtu32_sd operation.

        C method prototype:
            _mm_cvtu32_sd(__A: __m128d, __B: unsigned) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvt_roundu64_sd(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundu64_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundu64_sd(__A: __m128d, __B: unsigned long long, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundi64_sd(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundi64_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundi64_sd(__A: __m128d, __B: long long, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsi64_sd(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsi64_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsi64_sd(__A: __m128d, __B: long long, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundu32_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundu32_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundu32_ss(__A: __m128, __B: unsigned, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsi32_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsi32_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsi32_ss(__A: __m128, __B: int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundi32_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundi32_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundi32_ss(__A: __m128, __B: int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundu64_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundu64_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundu64_ss(__A: __m128, __B: unsigned long long, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsi64_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsi64_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsi64_ss(__A: __m128, __B: long long, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundi64_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundi64_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundi64_ss(__A: __m128, __B: long long, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtepi32_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_epi8 operation.

        C method prototype:
            _mm512_cvtepi32_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtepi32_storeu_epi8(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_epi8 operation.

        C method prototype:
            _mm512_mask_cvtepi32_epi8(__O: __m128i, __M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtepi32_epi8(__M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtsepi32_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi32_epi8 operation.

        C method prototype:
            _mm512_cvtsepi32_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi32_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi32_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtsepi32_storeu_epi8(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi32_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi32_epi8 operation.

        C method prototype:
            _mm512_mask_cvtsepi32_epi8(__O: __m128i, __M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi32_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi32_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtsepi32_epi8(__M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtusepi32_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi32_epi8 operation.

        C method prototype:
            _mm512_cvtusepi32_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi32_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi32_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtusepi32_storeu_epi8(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi32_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi32_epi8 operation.

        C method prototype:
            _mm512_mask_cvtusepi32_epi8(__O: __m128i, __M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi32_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi32_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtusepi32_epi8(__M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi32_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_epi16 operation.

        C method prototype:
            _mm512_cvtepi32_epi16(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtepi32_storeu_epi16(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_epi16 operation.

        C method prototype:
            _mm512_mask_cvtepi32_epi16(__O: __m256i, __M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtepi32_epi16(__M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtsepi32_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi32_epi16 operation.

        C method prototype:
            _mm512_cvtsepi32_epi16(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi32_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi32_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtsepi32_storeu_epi16(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi32_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi32_epi16 operation.

        C method prototype:
            _mm512_mask_cvtsepi32_epi16(__O: __m256i, __M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi32_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi32_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtsepi32_epi16(__M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtusepi32_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi32_epi16 operation.

        C method prototype:
            _mm512_cvtusepi32_epi16(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi32_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi32_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtusepi32_storeu_epi16(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi32_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi32_epi16 operation.

        C method prototype:
            _mm512_mask_cvtusepi32_epi16(__O: __m256i, __M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi32_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi32_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtusepi32_epi16(__M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi64_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi64_epi32 operation.

        C method prototype:
            _mm512_cvtepi64_epi32(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_storeu_epi32(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_storeu_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepi64_storeu_epi32(__P: void*, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepi64_epi32(__O: __m256i, __M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi64_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi64_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepi64_epi32(__M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtsepi64_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi64_epi32 operation.

        C method prototype:
            _mm512_cvtsepi64_epi32(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_storeu_epi32(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_storeu_epi32 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_storeu_epi32(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_epi32 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_epi32(__O: __m256i, __M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi64_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi64_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtsepi64_epi32(__M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtusepi64_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi64_epi32 operation.

        C method prototype:
            _mm512_cvtusepi64_epi32(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_storeu_epi32(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_storeu_epi32 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_storeu_epi32(__P: void*, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_epi32 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_epi32(__O: __m256i, __M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi64_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi64_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtusepi64_epi32(__M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi64_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi64_epi16 operation.

        C method prototype:
            _mm512_cvtepi64_epi16(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtepi64_storeu_epi16(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_epi16 operation.

        C method prototype:
            _mm512_mask_cvtepi64_epi16(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi64_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi64_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtepi64_epi16(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtsepi64_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi64_epi16 operation.

        C method prototype:
            _mm512_cvtsepi64_epi16(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_storeu_epi16(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_epi16 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_epi16(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi64_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi64_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtsepi64_epi16(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtusepi64_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi64_epi16 operation.

        C method prototype:
            _mm512_cvtusepi64_epi16(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_storeu_epi16(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_epi16 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_epi16(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi64_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi64_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtusepi64_epi16(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi64_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi64_epi8 operation.

        C method prototype:
            _mm512_cvtepi64_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtepi64_storeu_epi8(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_epi8 operation.

        C method prototype:
            _mm512_mask_cvtepi64_epi8(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi64_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi64_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtepi64_epi8(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtsepi64_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi64_epi8 operation.

        C method prototype:
            _mm512_cvtsepi64_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_storeu_epi8(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_epi8 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_epi8(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi64_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi64_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtsepi64_epi8(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtusepi64_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi64_epi8 operation.

        C method prototype:
            _mm512_cvtusepi64_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_storeu_epi8(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_epi8 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_epi8(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi64_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi64_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtusepi64_epi8(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi32_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_pd operation.

        C method prototype:
            _mm512_cvtepi32_pd(__A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_pd operation.

        C method prototype:
            _mm512_mask_cvtepi32_pd(__W: __m512d, __U: __mmask8, __A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_pd operation.

        C method prototype:
            _mm512_maskz_cvtepi32_pd(__U: __mmask8, __A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepu32_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu32_pd operation.

        C method prototype:
            _mm512_cvtepu32_pd(__A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu32_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu32_pd operation.

        C method prototype:
            _mm512_mask_cvtepu32_pd(__W: __m512d, __U: __mmask8, __A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu32_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu32_pd operation.

        C method prototype:
            _mm512_maskz_cvtepu32_pd(__U: __mmask8, __A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvt_roundepi32_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundepi32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundepi32_ps(__A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundepi32_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundepi32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundepi32_ps(__W: __m512, __U: __mmask16, __A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundepi32_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundepi32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundepi32_ps(__U: __mmask16, __A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundepu32_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundepu32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundepu32_ps(__A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundepu32_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundepu32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundepu32_ps(__W: __m512, __U: __mmask16, __A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundepu32_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundepu32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundepu32_ps(__U: __mmask16, __A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_extractf64x4_pd(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_extractf64x4_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_extractf64x4_pd(__A: __m512d, __imm: const int) -> __m256d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_extractf64x4_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_extractf64x4_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_extractf64x4_pd(__W: __m256d, __U: __mmask8, __A: __m512d, __imm: const int) -> __m256d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_extractf64x4_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_extractf64x4_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_extractf64x4_pd(__U: __mmask8, __A: __m512d, __imm: const int) -> __m256d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_extractf32x4_ps(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_extractf32x4_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_extractf32x4_ps(__A: __m512, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_extractf32x4_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_extractf32x4_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_extractf32x4_ps(__W: __m128, __U: __mmask8, __A: __m512, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_extractf32x4_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_extractf32x4_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_extractf32x4_ps(__U: __mmask8, __A: __m512, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_extracti64x4_epi64(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_extracti64x4_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_extracti64x4_epi64(__A: __m512i, __imm: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_extracti64x4_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_extracti64x4_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_extracti64x4_epi64(__W: __m256i, __U: __mmask8, __A: __m512i, __imm: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_extracti64x4_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_extracti64x4_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_extracti64x4_epi64(__U: __mmask8, __A: __m512i, __imm: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_extracti32x4_epi32(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_extracti32x4_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_extracti32x4_epi32(__A: __m512i, __imm: const int) -> __m128i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_extracti32x4_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_extracti32x4_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_extracti32x4_epi32(__W: __m128i, __U: __mmask8, __A: __m512i, __imm: const int) -> __m128i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_extracti32x4_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_extracti32x4_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_extracti32x4_epi32(__U: __mmask8, __A: __m512i, __imm: const int) -> __m128i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_inserti32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_inserti32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_inserti32x4(__A: __m512i, __B: __m128i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_insertf32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_insertf32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_insertf32x4(__A: __m512, __B: __m128, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_inserti64x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_inserti64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_inserti64x4(__A: __m512i, __B: __m256i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_inserti64x4(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_inserti64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_inserti64x4(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m256i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_inserti64x4(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_inserti64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_inserti64x4(__U: __mmask8, __A: __m512i, __B: __m256i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_insertf64x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_insertf64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_insertf64x4(__A: __m512d, __B: __m256d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_insertf64x4(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_insertf64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_insertf64x4(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m256d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_insertf64x4(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_insertf64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_insertf64x4(__U: __mmask8, __A: __m512d, __B: __m256d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_loadu_pd(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_pd operation.

        C method prototype:
            _mm512_loadu_pd(__P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_loadu_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_loadu_pd operation.

        C method prototype:
            _mm512_mask_loadu_pd(__W: __m512d, __U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_loadu_pd(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_loadu_pd operation.

        C method prototype:
            _mm512_maskz_loadu_pd(__U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_storeu_pd(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_pd operation.

        C method prototype:
            _mm512_storeu_pd(__P: void *, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_storeu_pd(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_storeu_pd operation.

        C method prototype:
            _mm512_mask_storeu_pd(__P: void *, __U: __mmask8, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_loadu_ps(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_ps operation.

        C method prototype:
            _mm512_loadu_ps(__P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_loadu_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_loadu_ps operation.

        C method prototype:
            _mm512_mask_loadu_ps(__W: __m512, __U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_loadu_ps(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_loadu_ps operation.

        C method prototype:
            _mm512_maskz_loadu_ps(__U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_storeu_ps(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_ps operation.

        C method prototype:
            _mm512_storeu_ps(__P: void *, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_storeu_ps(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_storeu_ps operation.

        C method prototype:
            _mm512_mask_storeu_ps(__P: void *, __U: __mmask16, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_load_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm_mask_load_ss operation.

        C method prototype:
            _mm_mask_load_ss(__W: __m128, __U: __mmask8, __P: const float *) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_load_ss(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm_maskz_load_ss operation.

        C method prototype:
            _mm_maskz_load_ss(__U: __mmask8, __P: const float *) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_load_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm_mask_load_sd operation.

        C method prototype:
            _mm_mask_load_sd(__W: __m128d, __U: __mmask8, __P: const double *) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_load_sd(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm_maskz_load_sd operation.

        C method prototype:
            _mm_maskz_load_sd(__U: __mmask8, __P: const double *) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_move_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_move_ss operation.

        C method prototype:
            _mm_mask_move_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_move_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_move_ss operation.

        C method prototype:
            _mm_maskz_move_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_move_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_move_sd operation.

        C method prototype:
            _mm_mask_move_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_move_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_move_sd operation.

        C method prototype:
            _mm_maskz_move_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_store_ss(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_mask_store_ss operation.

        C method prototype:
            _mm_mask_store_ss(__P: float *, __U: __mmask8, __A: __m128) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_store_sd(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_mask_store_sd operation.

        C method prototype:
            _mm_mask_store_sd(__P: double *, __U: __mmask8, __A: __m128d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_loadu_epi64(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_epi64 operation.

        C method prototype:
            _mm512_loadu_epi64(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_loadu_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_loadu_epi64 operation.

        C method prototype:
            _mm512_mask_loadu_epi64(__W: __m512i, __U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_loadu_epi64(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_loadu_epi64 operation.

        C method prototype:
            _mm512_maskz_loadu_epi64(__U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_storeu_epi64(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_epi64 operation.

        C method prototype:
            _mm512_storeu_epi64(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_storeu_epi64(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_storeu_epi64 operation.

        C method prototype:
            _mm512_mask_storeu_epi64(__P: void *, __U: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_loadu_si512(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_si512 operation.

        C method prototype:
            _mm512_loadu_si512(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_loadu_epi32(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_epi32 operation.

        C method prototype:
            _mm512_loadu_epi32(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_loadu_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_loadu_epi32 operation.

        C method prototype:
            _mm512_mask_loadu_epi32(__W: __m512i, __U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_loadu_epi32(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_loadu_epi32 operation.

        C method prototype:
            _mm512_maskz_loadu_epi32(__U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_storeu_si512(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_si512 operation.

        C method prototype:
            _mm512_storeu_si512(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_storeu_epi32(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_epi32 operation.

        C method prototype:
            _mm512_storeu_epi32(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_storeu_epi32(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_storeu_epi32 operation.

        C method prototype:
            _mm512_mask_storeu_epi32(__P: void *, __U: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutevar_pd(self, __result: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_permutevar_pd operation.

        C method prototype:
            _mm512_permutevar_pd(__A: __m512d, __C: __m512i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutevar_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_permutevar_pd operation.

        C method prototype:
            _mm512_mask_permutevar_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __C: __m512i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_permutevar_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutevar_pd operation.

        C method prototype:
            _mm512_maskz_permutevar_pd(__U: __mmask8, __A: __m512d, __C: __m512i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutevar_ps(self, __result: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_permutevar_ps operation.

        C method prototype:
            _mm512_permutevar_ps(__A: __m512, __C: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutevar_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_permutevar_ps operation.

        C method prototype:
            _mm512_mask_permutevar_ps(__W: __m512, __U: __mmask16, __A: __m512, __C: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_permutevar_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutevar_ps operation.

        C method prototype:
            _mm512_maskz_permutevar_ps(__U: __mmask16, __A: __m512, __C: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutex2var_epi64(self, __result: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_permutex2var_epi64 operation.

        C method prototype:
            _mm512_permutex2var_epi64(__A: __m512i, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutex2var_epi64(self, __result: Ptr, __A: Ptr, __U: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_permutex2var_epi64 operation.

        C method prototype:
            _mm512_mask_permutex2var_epi64(__A: __m512i, __U: __mmask8, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask2_permutex2var_epi64(self, __result: Ptr, __A: Ptr, __I: Ptr, __U: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask2_permutex2var_epi64 operation.

        C method prototype:
            _mm512_mask2_permutex2var_epi64(__A: __m512i, __I: __m512i, __U: __mmask8, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_permutex2var_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutex2var_epi64 operation.

        C method prototype:
            _mm512_maskz_permutex2var_epi64(__U: __mmask8, __A: __m512i, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutex2var_epi32(self, __result: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_permutex2var_epi32 operation.

        C method prototype:
            _mm512_permutex2var_epi32(__A: __m512i, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutex2var_epi32(self, __result: Ptr, __A: Ptr, __U: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_permutex2var_epi32 operation.

        C method prototype:
            _mm512_mask_permutex2var_epi32(__A: __m512i, __U: __mmask16, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask2_permutex2var_epi32(self, __result: Ptr, __A: Ptr, __I: Ptr, __U: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask2_permutex2var_epi32 operation.

        C method prototype:
            _mm512_mask2_permutex2var_epi32(__A: __m512i, __I: __m512i, __U: __mmask16, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_permutex2var_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutex2var_epi32 operation.

        C method prototype:
            _mm512_maskz_permutex2var_epi32(__U: __mmask16, __A: __m512i, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutex2var_pd(self, __result: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_permutex2var_pd operation.

        C method prototype:
            _mm512_permutex2var_pd(__A: __m512d, __I: __m512i, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutex2var_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_permutex2var_pd operation.

        C method prototype:
            _mm512_mask_permutex2var_pd(__A: __m512d, __U: __mmask8, __I: __m512i, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask2_permutex2var_pd(self, __result: Ptr, __A: Ptr, __I: Ptr, __U: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask2_permutex2var_pd operation.

        C method prototype:
            _mm512_mask2_permutex2var_pd(__A: __m512d, __I: __m512i, __U: __mmask8, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_permutex2var_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutex2var_pd operation.

        C method prototype:
            _mm512_maskz_permutex2var_pd(__U: __mmask8, __A: __m512d, __I: __m512i, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutex2var_ps(self, __result: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_permutex2var_ps operation.

        C method prototype:
            _mm512_permutex2var_ps(__A: __m512, __I: __m512i, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutex2var_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_permutex2var_ps operation.

        C method prototype:
            _mm512_mask_permutex2var_ps(__A: __m512, __U: __mmask16, __I: __m512i, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask2_permutex2var_ps(self, __result: Ptr, __A: Ptr, __I: Ptr, __U: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask2_permutex2var_ps operation.

        C method prototype:
            _mm512_mask2_permutex2var_ps(__A: __m512, __I: __m512i, __U: __mmask16, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_permutex2var_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutex2var_ps operation.

        C method prototype:
            _mm512_maskz_permutex2var_ps(__U: __mmask16, __A: __m512, __I: __m512i, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permute_pd(self, __result: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_permute_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_permute_pd(__X: __m512d, __C: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_permute_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_permute_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_permute_pd(__W: __m512d, __U: __mmask8, __X: __m512d, __C: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permute_pd(self, __result: Ptr, __U: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_permute_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_permute_pd(__U: __mmask8, __X: __m512d, __C: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_permute_ps(self, __result: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_permute_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_permute_ps(__X: __m512, __C: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_permute_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_permute_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_permute_ps(__W: __m512, __U: __mmask16, __X: __m512, __C: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permute_ps(self, __result: Ptr, __U: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_permute_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_permute_ps(__U: __mmask16, __X: __m512, __C: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_permutex_epi64(self, __result: Ptr, __X: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_permutex_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_permutex_epi64(__X: __m512i, __I: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_permutex_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_permutex_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_permutex_epi64(__W: __m512i, __M: __mmask8, __X: __m512i, __I: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permutex_epi64(self, __result: Ptr, __M: Ptr, __X: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_permutex_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_permutex_epi64(__M: __mmask8, __X: __m512i, __I: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_permutex_pd(self, __result: Ptr, __X: Ptr, __M: int) -> RaisesNotImplementedError:
        """
        _mm512_permutex_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_permutex_pd(__X: __m512d, __M: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_permutex_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __M: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_permutex_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_permutex_pd(__W: __m512d, __U: __mmask8, __X: __m512d, __M: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permutex_pd(self, __result: Ptr, __U: Ptr, __X: Ptr, __M: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_permutex_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_permutex_pd(__U: __mmask8, __X: __m512d, __M: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permutexvar_epi64(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutexvar_epi64 operation.

        C method prototype:
            _mm512_maskz_permutexvar_epi64(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutexvar_epi64(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_permutexvar_epi64 operation.

        C method prototype:
            _mm512_permutexvar_epi64(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutexvar_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_permutexvar_epi64 operation.

        C method prototype:
            _mm512_mask_permutexvar_epi64(__W: __m512i, __M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_permutexvar_epi32(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutexvar_epi32 operation.

        C method prototype:
            _mm512_maskz_permutexvar_epi32(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutexvar_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_permutexvar_epi32 operation.

        C method prototype:
            _mm512_permutexvar_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutexvar_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_permutexvar_epi32 operation.

        C method prototype:
            _mm512_mask_permutexvar_epi32(__W: __m512i, __M: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutexvar_pd(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_permutexvar_pd operation.

        C method prototype:
            _mm512_permutexvar_pd(__X: __m512i, __Y: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutexvar_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_permutexvar_pd operation.

        C method prototype:
            _mm512_mask_permutexvar_pd(__W: __m512d, __U: __mmask8, __X: __m512i, __Y: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_permutexvar_pd(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutexvar_pd operation.

        C method prototype:
            _mm512_maskz_permutexvar_pd(__U: __mmask8, __X: __m512i, __Y: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_permutexvar_ps(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_permutexvar_ps operation.

        C method prototype:
            _mm512_permutexvar_ps(__X: __m512i, __Y: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_permutexvar_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_permutexvar_ps operation.

        C method prototype:
            _mm512_mask_permutexvar_ps(__W: __m512, __U: __mmask16, __X: __m512i, __Y: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_permutexvar_ps(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutexvar_ps operation.

        C method prototype:
            _mm512_maskz_permutexvar_ps(__U: __mmask16, __X: __m512i, __Y: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_shuffle_ps(self, __result: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_ps(__M: __m512, __V: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_ps(__W: __m512, __U: __mmask16, __M: __m512, __V: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_ps(self, __result: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_ps(__U: __mmask16, __M: __m512, __V: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_pd(self, __result: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_pd(__M: __m512d, __V: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_pd(__W: __m512d, __U: __mmask8, __M: __m512d, __V: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_pd(self, __result: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_pd(__U: __mmask8, __M: __m512d, __V: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fixupimm_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fixupimm_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fixupimm_round_pd(__A: __m512d, __B: __m512d, __C: __m512i, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fixupimm_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fixupimm_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fixupimm_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512i, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fixupimm_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fixupimm_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fixupimm_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512i, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fixupimm_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fixupimm_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fixupimm_round_ps(__A: __m512, __B: __m512, __C: __m512i, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fixupimm_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fixupimm_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fixupimm_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512i, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fixupimm_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fixupimm_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fixupimm_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512i, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fixupimm_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fixupimm_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fixupimm_round_sd(__A: __m128d, __B: __m128d, __C: __m128i, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fixupimm_round_sd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fixupimm_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fixupimm_round_sd(__A: __m128d, __U: __mmask8, __B: __m128d, __C: __m128i, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fixupimm_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fixupimm_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fixupimm_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __C: __m128i, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fixupimm_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fixupimm_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fixupimm_round_ss(__A: __m128, __B: __m128, __C: __m128i, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fixupimm_round_ss(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fixupimm_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fixupimm_round_ss(__A: __m128, __U: __mmask8, __B: __m128, __C: __m128i, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fixupimm_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fixupimm_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fixupimm_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __C: __m128i, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_movehdup_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_movehdup_ps operation.

        C method prototype:
            _mm512_movehdup_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_movehdup_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_movehdup_ps operation.

        C method prototype:
            _mm512_mask_movehdup_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_movehdup_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_movehdup_ps operation.

        C method prototype:
            _mm512_maskz_movehdup_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_moveldup_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_moveldup_ps operation.

        C method prototype:
            _mm512_moveldup_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_moveldup_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_moveldup_ps operation.

        C method prototype:
            _mm512_mask_moveldup_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_moveldup_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_moveldup_ps operation.

        C method prototype:
            _mm512_maskz_moveldup_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_or_si512(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_or_si512 operation.

        C method prototype:
            _mm512_or_si512(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_or_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_or_epi32 operation.

        C method prototype:
            _mm512_or_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_or_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_or_epi32 operation.

        C method prototype:
            _mm512_mask_or_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_or_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_or_epi32 operation.

        C method prototype:
            _mm512_maskz_or_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_or_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_or_epi64 operation.

        C method prototype:
            _mm512_or_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_or_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_or_epi64 operation.

        C method prototype:
            _mm512_mask_or_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_or_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_or_epi64 operation.

        C method prototype:
            _mm512_maskz_or_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_xor_si512(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_xor_si512 operation.

        C method prototype:
            _mm512_xor_si512(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_xor_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_xor_epi32 operation.

        C method prototype:
            _mm512_xor_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_xor_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_xor_epi32 operation.

        C method prototype:
            _mm512_mask_xor_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_xor_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_xor_epi32 operation.

        C method prototype:
            _mm512_maskz_xor_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_xor_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_xor_epi64 operation.

        C method prototype:
            _mm512_xor_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_xor_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_xor_epi64 operation.

        C method prototype:
            _mm512_mask_xor_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_xor_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_xor_epi64 operation.

        C method prototype:
            _mm512_maskz_xor_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_rol_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_rol_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_rol_epi32(__A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_rol_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_rol_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_rol_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_rol_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_rol_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_rol_epi32(__U: __mmask16, __A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_ror_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_ror_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_ror_epi32(__A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_ror_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_ror_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_ror_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_ror_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_ror_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_ror_epi32(__U: __mmask16, __A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_rol_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_rol_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_rol_epi64(__A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_rol_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_rol_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_rol_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_rol_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_rol_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_rol_epi64(__U: __mmask8, __A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_ror_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_ror_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_ror_epi64(__A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_ror_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_ror_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_ror_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_ror_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_ror_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_ror_epi64(__U: __mmask8, __A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_and_si512(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_and_si512 operation.

        C method prototype:
            _mm512_and_si512(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_and_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_and_epi32 operation.

        C method prototype:
            _mm512_and_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_and_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_and_epi32 operation.

        C method prototype:
            _mm512_mask_and_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_and_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_and_epi32 operation.

        C method prototype:
            _mm512_maskz_and_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_and_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_and_epi64 operation.

        C method prototype:
            _mm512_and_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_and_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_and_epi64 operation.

        C method prototype:
            _mm512_mask_and_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_and_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_and_epi64 operation.

        C method prototype:
            _mm512_maskz_and_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_andnot_si512(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_andnot_si512 operation.

        C method prototype:
            _mm512_andnot_si512(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_andnot_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_andnot_epi32 operation.

        C method prototype:
            _mm512_andnot_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_andnot_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_andnot_epi32 operation.

        C method prototype:
            _mm512_mask_andnot_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_andnot_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_andnot_epi32 operation.

        C method prototype:
            _mm512_maskz_andnot_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_andnot_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_andnot_epi64 operation.

        C method prototype:
            _mm512_andnot_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_andnot_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_andnot_epi64 operation.

        C method prototype:
            _mm512_mask_andnot_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_andnot_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_andnot_epi64 operation.

        C method prototype:
            _mm512_maskz_andnot_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_test_epi32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_test_epi32_mask operation.

        C method prototype:
            _mm512_test_epi32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_test_epi32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_test_epi32_mask operation.

        C method prototype:
            _mm512_mask_test_epi32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_test_epi64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_test_epi64_mask operation.

        C method prototype:
            _mm512_test_epi64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_test_epi64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_test_epi64_mask operation.

        C method prototype:
            _mm512_mask_test_epi64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_testn_epi32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_testn_epi32_mask operation.

        C method prototype:
            _mm512_testn_epi32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_testn_epi32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_testn_epi32_mask operation.

        C method prototype:
            _mm512_mask_testn_epi32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_testn_epi64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_testn_epi64_mask operation.

        C method prototype:
            _mm512_testn_epi64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_testn_epi64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_testn_epi64_mask operation.

        C method prototype:
            _mm512_mask_testn_epi64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_abs_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_abs_ps operation.

        C method prototype:
            _mm512_abs_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_abs_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_abs_ps operation.

        C method prototype:
            _mm512_mask_abs_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_abs_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_abs_pd operation.

        C method prototype:
            _mm512_abs_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_abs_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_abs_pd operation.

        C method prototype:
            _mm512_mask_abs_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_unpackhi_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpackhi_epi32 operation.

        C method prototype:
            _mm512_unpackhi_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_unpackhi_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpackhi_epi32 operation.

        C method prototype:
            _mm512_mask_unpackhi_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_unpackhi_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpackhi_epi32 operation.

        C method prototype:
            _mm512_maskz_unpackhi_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_unpackhi_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpackhi_epi64 operation.

        C method prototype:
            _mm512_unpackhi_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_unpackhi_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpackhi_epi64 operation.

        C method prototype:
            _mm512_mask_unpackhi_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_unpackhi_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpackhi_epi64 operation.

        C method prototype:
            _mm512_maskz_unpackhi_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_unpacklo_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpacklo_epi32 operation.

        C method prototype:
            _mm512_unpacklo_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_unpacklo_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpacklo_epi32 operation.

        C method prototype:
            _mm512_mask_unpacklo_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_unpacklo_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpacklo_epi32 operation.

        C method prototype:
            _mm512_maskz_unpacklo_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_unpacklo_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpacklo_epi64 operation.

        C method prototype:
            _mm512_unpacklo_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_unpacklo_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpacklo_epi64 operation.

        C method prototype:
            _mm512_mask_unpacklo_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_unpacklo_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpacklo_epi64 operation.

        C method prototype:
            _mm512_maskz_unpacklo_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvt_roundss_u64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_u64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_u64(__A: __m128, __R: const int) -> unsigned long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_si64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_si64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_si64(__A: __m128, __R: const int) -> long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_i64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_i64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_i64(__A: __m128, __R: const int) -> long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_u64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_u64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_u64(__A: __m128, __R: const int) -> unsigned long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_i64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_i64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_i64(__A: __m128, __R: const int) -> long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_si64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_si64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_si64(__A: __m128, __R: const int) -> long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_u32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_u32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_u32(__A: __m128, __R: const int) -> unsigned

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_si32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_si32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_si32(__A: __m128, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_i32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_i32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_i32(__A: __m128, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_u32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_u32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_u32(__A: __m128, __R: const int) -> unsigned

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_i32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_i32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_i32(__A: __m128, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_si32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_si32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_si32(__A: __m128, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_u64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_u64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_u64(__A: __m128d, __R: const int) -> unsigned long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_si64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_si64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_si64(__A: __m128d, __R: const int) -> long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_i64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_i64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_i64(__A: __m128d, __R: const int) -> long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_u64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_u64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_u64(__A: __m128d, __R: const int) -> unsigned long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_si64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_si64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_si64(__A: __m128d, __R: const int) -> long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_i64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_i64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_i64(__A: __m128d, __R: const int) -> long long

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_u32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_u32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_u32(__A: __m128d, __R: const int) -> unsigned

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_si32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_si32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_si32(__A: __m128d, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_i32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_i32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_i32(__A: __m128d, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_u32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_u32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_u32(__A: __m128d, __R: const int) -> unsigned

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_i32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_i32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_i32(__A: __m128d, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_si32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_si32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_si32(__A: __m128d, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_movedup_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_movedup_pd operation.

        C method prototype:
            _mm512_movedup_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_movedup_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_movedup_pd operation.

        C method prototype:
            _mm512_mask_movedup_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_movedup_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_movedup_pd operation.

        C method prototype:
            _mm512_maskz_movedup_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_unpacklo_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpacklo_pd operation.

        C method prototype:
            _mm512_unpacklo_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_unpacklo_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpacklo_pd operation.

        C method prototype:
            _mm512_mask_unpacklo_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_unpacklo_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpacklo_pd operation.

        C method prototype:
            _mm512_maskz_unpacklo_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_unpackhi_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpackhi_pd operation.

        C method prototype:
            _mm512_unpackhi_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_unpackhi_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpackhi_pd operation.

        C method prototype:
            _mm512_mask_unpackhi_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_unpackhi_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpackhi_pd operation.

        C method prototype:
            _mm512_maskz_unpackhi_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_unpackhi_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpackhi_ps operation.

        C method prototype:
            _mm512_unpackhi_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_unpackhi_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpackhi_ps operation.

        C method prototype:
            _mm512_mask_unpackhi_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_unpackhi_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpackhi_ps operation.

        C method prototype:
            _mm512_maskz_unpackhi_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvt_roundps_pd(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundps_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundps_pd(__A: __m256, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundps_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundps_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundps_pd(__W: __m512d, __U: __mmask8, __A: __m256, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundps_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundps_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundps_pd(__U: __mmask8, __A: __m256, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundph_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundph_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundph_ps(__A: __m256i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundph_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundph_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundph_ps(__W: __m512, __U: __mmask16, __A: __m256i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundph_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundph_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundph_ps(__U: __mmask16, __A: __m256i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundps_ph(self, __result: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundps_ph(__A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtps_ph(self, __result: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtps_ph(__A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundps_ph(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundps_ph(__U: __m256i, __W: __mmask16, __A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtps_ph(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtps_ph(__U: __m256i, __W: __mmask16, __A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundps_ph(self, __result: Ptr, __W: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundps_ph(__W: __mmask16, __A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtps_ph(self, __result: Ptr, __W: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtps_ph(__W: __mmask16, __A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundpd_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundpd_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundpd_ps(__A: __m512d, __R: const int) -> __m256

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundpd_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundpd_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundpd_ps(__W: __m256, __U: __mmask8, __A: __m512d, __R: const int) -> __m256

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundpd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundpd_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundpd_ps(__U: __mmask8, __A: __m512d, __R: const int) -> __m256

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_ss(__A: __m128, __B: __m128d, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cvt_roundsd_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cvt_roundsd_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cvt_roundsd_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128d, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_cvt_roundsd_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_cvt_roundsd_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_cvt_roundsd_ss(__U: __mmask8, __A: __m128, __B: __m128d, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_sd(__A: __m128d, __B: __m128, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cvt_roundss_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cvt_roundss_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cvt_roundss_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_cvt_roundss_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_cvt_roundss_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_cvt_roundss_sd(__U: __mmask8, __A: __m128d, __B: __m128, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_stream_si512(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_stream_si512 operation.

        C method prototype:
            _mm512_stream_si512(__P: __m512i *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_stream_ps(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_stream_ps operation.

        C method prototype:
            _mm512_stream_ps(__P: float *, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_stream_pd(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_stream_pd operation.

        C method prototype:
            _mm512_stream_pd(__P: double *, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_stream_load_si512(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_stream_load_si512 operation.

        C method prototype:
            _mm512_stream_load_si512(__P: void *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_getexp_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_getexp_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_getexp_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getexp_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getexp_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getexp_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getexp_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getexp_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getexp_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getexp_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_getexp_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_getexp_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getexp_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getexp_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getexp_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getexp_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getexp_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getexp_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getexp_round_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_getexp_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_getexp_round_ps(__A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getexp_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getexp_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getexp_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getexp_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getexp_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getexp_round_ps(__U: __mmask16, __A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getexp_round_pd(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_getexp_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_getexp_round_pd(__A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getexp_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getexp_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getexp_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getexp_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getexp_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getexp_round_pd(__U: __mmask8, __A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getmant_round_pd(self, __result: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_getmant_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_getmant_round_pd(__A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getmant_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getmant_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getmant_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getmant_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getmant_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getmant_round_pd(__U: __mmask8, __A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getmant_round_ps(self, __result: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_getmant_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_getmant_round_ps(__A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getmant_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getmant_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getmant_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getmant_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getmant_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getmant_round_ps(__U: __mmask16, __A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getmant_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_getmant_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_getmant_round_sd(__A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getmant_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getmant_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getmant_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getmant_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getmant_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getmant_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getmant_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_getmant_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_getmant_round_ss(__A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getmant_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getmant_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getmant_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getmant_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getmant_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getmant_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_roundscale_round_ps(self, __result: Ptr, __A: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_roundscale_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_roundscale_round_ps(__A: __m512, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_roundscale_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_roundscale_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_roundscale_round_ps(__A: __m512, __B: __mmask16, __C: __m512, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_roundscale_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_roundscale_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_roundscale_round_ps(__A: __mmask16, __B: __m512, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_roundscale_round_pd(self, __result: Ptr, __A: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_roundscale_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_roundscale_round_pd(__A: __m512d, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_roundscale_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_roundscale_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_roundscale_round_pd(__A: __m512d, __B: __mmask8, __C: __m512d, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_roundscale_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_roundscale_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_roundscale_round_pd(__A: __mmask8, __B: __m512d, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_roundscale_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_roundscale_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_roundscale_round_ss(__A: __m128, __B: __m128, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_roundscale_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_roundscale_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_roundscale_round_ss(__A: __m128, __B: __mmask8, __C: __m128, __D: __m128, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_roundscale_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_roundscale_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_roundscale_round_ss(__A: __mmask8, __B: __m128, __C: __m128, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_roundscale_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_roundscale_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_roundscale_round_sd(__A: __m128d, __B: __m128d, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_roundscale_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_roundscale_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_roundscale_round_sd(__A: __m128d, __B: __mmask8, __C: __m128d, __D: __m128d, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_roundscale_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_roundscale_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_roundscale_round_sd(__A: __mmask8, __B: __m128d, __C: __m128d, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_floor_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_floor_ps operation.

        C method prototype:
            _mm512_floor_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_floor_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_floor_pd operation.

        C method prototype:
            _mm512_floor_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_ceil_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_ceil_ps operation.

        C method prototype:
            _mm512_ceil_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_ceil_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_ceil_pd operation.

        C method prototype:
            _mm512_ceil_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_floor_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_floor_ps operation.

        C method prototype:
            _mm512_mask_floor_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_floor_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_floor_pd operation.

        C method prototype:
            _mm512_mask_floor_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_ceil_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_ceil_ps operation.

        C method prototype:
            _mm512_mask_ceil_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_ceil_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_ceil_pd operation.

        C method prototype:
            _mm512_mask_ceil_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_alignr_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_alignr_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_alignr_epi32(__A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_alignr_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_alignr_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_alignr_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_alignr_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_alignr_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_alignr_epi32(__U: __mmask16, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_alignr_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_alignr_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_alignr_epi64(__A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_alignr_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_alignr_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_alignr_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_alignr_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_alignr_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_alignr_epi64(__U: __mmask8, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmpeq_epi32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_epi32_mask operation.

        C method prototype:
            _mm512_cmpeq_epi32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_epi32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_epi32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_epi64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_epi64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpeq_epi64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_epi64_mask operation.

        C method prototype:
            _mm512_cmpeq_epi64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpgt_epi32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpgt_epi32_mask operation.

        C method prototype:
            _mm512_cmpgt_epi32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpgt_epi32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpgt_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmpgt_epi32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpgt_epi64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpgt_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmpgt_epi64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpgt_epi64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpgt_epi64_mask operation.

        C method prototype:
            _mm512_cmpgt_epi64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpge_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpge_epi32_mask operation.

        C method prototype:
            _mm512_cmpge_epi32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpge_epi32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpge_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmpge_epi32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpge_epu32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpge_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmpge_epu32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpge_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpge_epu32_mask operation.

        C method prototype:
            _mm512_cmpge_epu32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpge_epi64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpge_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmpge_epi64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpge_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpge_epi64_mask operation.

        C method prototype:
            _mm512_cmpge_epi64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpge_epu64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpge_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmpge_epu64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpge_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpge_epu64_mask operation.

        C method prototype:
            _mm512_cmpge_epu64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmple_epi32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmple_epi32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmple_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_epi32_mask operation.

        C method prototype:
            _mm512_cmple_epi32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmple_epu32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmple_epu32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmple_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_epu32_mask operation.

        C method prototype:
            _mm512_cmple_epu32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmple_epi64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmple_epi64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmple_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_epi64_mask operation.

        C method prototype:
            _mm512_cmple_epi64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmple_epu64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmple_epu64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmple_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_epu64_mask operation.

        C method prototype:
            _mm512_cmple_epu64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_epi32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmplt_epi32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmplt_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_epi32_mask operation.

        C method prototype:
            _mm512_cmplt_epi32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_epu32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmplt_epu32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmplt_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_epu32_mask operation.

        C method prototype:
            _mm512_cmplt_epu32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_epi64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmplt_epi64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmplt_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_epi64_mask operation.

        C method prototype:
            _mm512_cmplt_epi64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_epu64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmplt_epu64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmplt_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_epu64_mask operation.

        C method prototype:
            _mm512_cmplt_epu64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpneq_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_epi32_mask operation.

        C method prototype:
            _mm512_cmpneq_epi32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_epi32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_epi32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_epu32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_epu32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpneq_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_epu32_mask operation.

        C method prototype:
            _mm512_cmpneq_epu32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_epi64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_epi64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpneq_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_epi64_mask operation.

        C method prototype:
            _mm512_cmpneq_epi64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_epu64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_epu64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpneq_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_epu64_mask operation.

        C method prototype:
            _mm512_cmpneq_epu64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _kshiftli_mask16(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _kshiftli_mask16 is not supported in PyFastUtil.

        C method prototype:
            _kshiftli_mask16(__A: __mmask16, __B: unsigned int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _kshiftri_mask16(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _kshiftri_mask16 is not supported in PyFastUtil.

        C method prototype:
            _kshiftri_mask16(__A: __mmask16, __B: unsigned int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_epi64_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_epi64_mask(__X: __m512i, __Y: __m512i, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_epi32_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_epi32_mask(__X: __m512i, __Y: __m512i, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_epu64_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_epu64_mask(__X: __m512i, __Y: __m512i, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_epu32_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_epu32_mask(__X: __m512i, __Y: __m512i, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_round_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_round_pd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_round_pd_mask(__X: __m512d, __Y: __m512d, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_round_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_round_ps_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_round_ps_mask(__X: __m512, __Y: __m512, __P: const int, __R: const int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_epi64_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_epi64_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_epi64_mask(__U: __mmask8, __X: __m512i, __Y: __m512i, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_epi32_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_epi32_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_epi32_mask(__U: __mmask16, __X: __m512i, __Y: __m512i, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_epu64_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_epu64_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_epu64_mask(__U: __mmask8, __X: __m512i, __Y: __m512i, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_epu32_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_epu32_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_epu32_mask(__U: __mmask16, __X: __m512i, __Y: __m512i, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_round_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_round_pd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_round_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_round_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_round_ps_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_round_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512, __P: const int, __R: const int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cmp_round_sd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cmp_round_sd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_cmp_round_sd_mask(__X: __m128d, __Y: __m128d, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cmp_round_sd_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cmp_round_sd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cmp_round_sd_mask(__M: __mmask8, __X: __m128d, __Y: __m128d, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cmp_round_ss_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cmp_round_ss_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_cmp_round_ss_mask(__X: __m128, __Y: __m128, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cmp_round_ss_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cmp_round_ss_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cmp_round_ss_mask(__M: __mmask8, __X: __m128, __Y: __m128, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32gather_ps(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32gather_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32gather_ps(__index: __m512i, __addr: void const *, __scale: int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32gather_ps(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32gather_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32gather_ps(__v1_old: __m512, __mask: __mmask16, __index: __m512i, __addr: void const *, __scale: int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32gather_pd(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32gather_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32gather_pd(__index: __m256i, __addr: void const *, __scale: int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32gather_pd(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32gather_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32gather_pd(__v1_old: __m512d, __mask: __mmask8, __index: __m256i, __addr: void const *, __scale: int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64gather_ps(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64gather_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64gather_ps(__index: __m512i, __addr: void const *, __scale: int) -> __m256

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64gather_ps(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64gather_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64gather_ps(__v1_old: __m256, __mask: __mmask8, __index: __m512i, __addr: void const *, __scale: int) -> __m256

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64gather_pd(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64gather_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64gather_pd(__index: __m512i, __addr: void const *, __scale: int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64gather_pd(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64gather_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64gather_pd(__v1_old: __m512d, __mask: __mmask8, __index: __m512i, __addr: void const *, __scale: int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32gather_epi32(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32gather_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32gather_epi32(__index: __m512i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32gather_epi32(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32gather_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32gather_epi32(__v1_old: __m512i, __mask: __mmask16, __index: __m512i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32gather_epi64(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32gather_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32gather_epi64(__index: __m256i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32gather_epi64(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32gather_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32gather_epi64(__v1_old: __m512i, __mask: __mmask8, __index: __m256i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64gather_epi32(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64gather_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64gather_epi32(__index: __m512i, __addr: void const *, __scale: int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64gather_epi32(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64gather_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64gather_epi32(__v1_old: __m256i, __mask: __mmask8, __index: __m512i, __addr: void const *, __scale: int) -> __m256i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64gather_epi64(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64gather_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64gather_epi64(__index: __m512i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64gather_epi64(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64gather_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64gather_epi64(__v1_old: __m512i, __mask: __mmask8, __index: __m512i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32scatter_ps(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32scatter_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32scatter_ps(__addr: void *, __index: __m512i, __v1: __m512, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32scatter_ps(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32scatter_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32scatter_ps(__addr: void *, __mask: __mmask16, __index: __m512i, __v1: __m512, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32scatter_pd(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32scatter_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32scatter_pd(__addr: void *, __index: __m256i, __v1: __m512d, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32scatter_pd(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32scatter_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32scatter_pd(__addr: void *, __mask: __mmask8, __index: __m256i, __v1: __m512d, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64scatter_ps(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64scatter_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64scatter_ps(__addr: void *, __index: __m512i, __v1: __m256, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64scatter_ps(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64scatter_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64scatter_ps(__addr: void *, __mask: __mmask8, __index: __m512i, __v1: __m256, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64scatter_pd(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64scatter_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64scatter_pd(__addr: void *, __index: __m512i, __v1: __m512d, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64scatter_pd(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64scatter_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64scatter_pd(__addr: void *, __mask: __mmask8, __index: __m512i, __v1: __m512d, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32scatter_epi32(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32scatter_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32scatter_epi32(__addr: void *, __index: __m512i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32scatter_epi32(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32scatter_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32scatter_epi32(__addr: void *, __mask: __mmask16, __index: __m512i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32scatter_epi64(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32scatter_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32scatter_epi64(__addr: void *, __index: __m256i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32scatter_epi64(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32scatter_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32scatter_epi64(__addr: void *, __mask: __mmask8, __index: __m256i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64scatter_epi32(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64scatter_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64scatter_epi32(__addr: void *, __index: __m512i, __v1: __m256i, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64scatter_epi32(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64scatter_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64scatter_epi32(__addr: void *, __mask: __mmask8, __index: __m512i, __v1: __m256i, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64scatter_epi64(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64scatter_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64scatter_epi64(__addr: void *, __index: __m512i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64scatter_epi64(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64scatter_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64scatter_epi64(__addr: void *, __mask: __mmask8, __index: __m512i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_compress_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compress_pd operation.

        C method prototype:
            _mm512_mask_compress_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_compress_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_compress_pd operation.

        C method prototype:
            _mm512_maskz_compress_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_compressstoreu_pd(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compressstoreu_pd operation.

        C method prototype:
            _mm512_mask_compressstoreu_pd(__P: void *, __U: __mmask8, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_compress_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compress_ps operation.

        C method prototype:
            _mm512_mask_compress_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_compress_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_compress_ps operation.

        C method prototype:
            _mm512_maskz_compress_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_compressstoreu_ps(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compressstoreu_ps operation.

        C method prototype:
            _mm512_mask_compressstoreu_ps(__P: void *, __U: __mmask16, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_compress_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compress_epi64 operation.

        C method prototype:
            _mm512_mask_compress_epi64(__W: __m512i, __U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_compress_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_compress_epi64 operation.

        C method prototype:
            _mm512_maskz_compress_epi64(__U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_compressstoreu_epi64(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compressstoreu_epi64 operation.

        C method prototype:
            _mm512_mask_compressstoreu_epi64(__P: void *, __U: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_compress_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compress_epi32 operation.

        C method prototype:
            _mm512_mask_compress_epi32(__W: __m512i, __U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_compress_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_compress_epi32 operation.

        C method prototype:
            _mm512_maskz_compress_epi32(__U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_compressstoreu_epi32(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compressstoreu_epi32 operation.

        C method prototype:
            _mm512_mask_compressstoreu_epi32(__P: void *, __U: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_expand_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_expand_pd operation.

        C method prototype:
            _mm512_mask_expand_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_expand_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_expand_pd operation.

        C method prototype:
            _mm512_maskz_expand_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_expandloadu_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_expandloadu_pd operation.

        C method prototype:
            _mm512_mask_expandloadu_pd(__W: __m512d, __U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_expandloadu_pd(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_expandloadu_pd operation.

        C method prototype:
            _mm512_maskz_expandloadu_pd(__U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_expand_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_expand_ps operation.

        C method prototype:
            _mm512_mask_expand_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_expand_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_expand_ps operation.

        C method prototype:
            _mm512_maskz_expand_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_expandloadu_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_expandloadu_ps operation.

        C method prototype:
            _mm512_mask_expandloadu_ps(__W: __m512, __U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_expandloadu_ps(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_expandloadu_ps operation.

        C method prototype:
            _mm512_maskz_expandloadu_ps(__U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_expand_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_expand_epi64 operation.

        C method prototype:
            _mm512_mask_expand_epi64(__W: __m512i, __U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_expand_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_expand_epi64 operation.

        C method prototype:
            _mm512_maskz_expand_epi64(__U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_expandloadu_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_expandloadu_epi64 operation.

        C method prototype:
            _mm512_mask_expandloadu_epi64(__W: __m512i, __U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_expandloadu_epi64(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_expandloadu_epi64 operation.

        C method prototype:
            _mm512_maskz_expandloadu_epi64(__U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_expand_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_expand_epi32 operation.

        C method prototype:
            _mm512_mask_expand_epi32(__W: __m512i, __U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_expand_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_expand_epi32 operation.

        C method prototype:
            _mm512_maskz_expand_epi32(__U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_expandloadu_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_expandloadu_epi32 operation.

        C method prototype:
            _mm512_mask_expandloadu_epi32(__W: __m512i, __U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_expandloadu_epi32(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_expandloadu_epi32 operation.

        C method prototype:
            _mm512_maskz_expandloadu_epi32(__U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _kortest_mask16_u8(self, __result: Ptr, __A: Ptr, __B: Ptr, __CF: Ptr) -> None:
        """
        Executes the _kortest_mask16_u8 operation.

        C method prototype:
            _kortest_mask16_u8(__A: __mmask16, __B: __mmask16, __CF: unsigned char *) -> unsigned char

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _kortestz_mask16_u8(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _kortestz_mask16_u8 operation.

        C method prototype:
            _kortestz_mask16_u8(__A: __mmask16, __B: __mmask16) -> unsigned char

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _kortestc_mask16_u8(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _kortestc_mask16_u8 operation.

        C method prototype:
            _kortestc_mask16_u8(__A: __mmask16, __B: __mmask16) -> unsigned char

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _cvtmask16_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _cvtmask16_u32 operation.

        C method prototype:
            _cvtmask16_u32(__A: __mmask16) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _cvtu32_mask16(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _cvtu32_mask16 operation.

        C method prototype:
            _cvtu32_mask16(__A: unsigned int) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _load_mask16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _load_mask16 operation.

        C method prototype:
            _load_mask16(__A: __mmask16 *) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _store_mask16(self, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _store_mask16 operation.

        C method prototype:
            _store_mask16(__A: __mmask16 *, __B: __mmask16) -> void

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_kand(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kand operation.

        C method prototype:
            _mm512_kand(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_kandn(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kandn operation.

        C method prototype:
            _mm512_kandn(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_kor(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kor operation.

        C method prototype:
            _mm512_kor(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_kortestz(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kortestz operation.

        C method prototype:
            _mm512_kortestz(__A: __mmask16, __B: __mmask16) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_kortestc(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kortestc operation.

        C method prototype:
            _mm512_kortestc(__A: __mmask16, __B: __mmask16) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_kxnor(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kxnor operation.

        C method prototype:
            _mm512_kxnor(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_kxor(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kxor operation.

        C method prototype:
            _mm512_kxor(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_knot(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_knot operation.

        C method prototype:
            _mm512_knot(__A: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_kunpackb(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kunpackb operation.

        C method prototype:
            _mm512_kunpackb(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_inserti32x4(self, __result: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_inserti32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_inserti32x4(__B: __mmask16, __C: __m512i, __D: __m128i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_insertf32x4(self, __result: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_insertf32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_insertf32x4(__B: __mmask16, __C: __m512, __D: __m128, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_inserti32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_inserti32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_inserti32x4(__A: __m512i, __B: __mmask16, __C: __m512i, __D: __m128i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_insertf32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_insertf32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_insertf32x4(__A: __m512, __B: __mmask16, __C: __m512, __D: __m128, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_max_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_epi64 operation.

        C method prototype:
            _mm512_max_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_max_epi64(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_epi64 operation.

        C method prototype:
            _mm512_maskz_max_epi64(__M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_max_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_epi64 operation.

        C method prototype:
            _mm512_mask_max_epi64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_min_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_epi64 operation.

        C method prototype:
            _mm512_min_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_min_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_epi64 operation.

        C method prototype:
            _mm512_mask_min_epi64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_min_epi64(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_epi64 operation.

        C method prototype:
            _mm512_maskz_min_epi64(__M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_max_epu64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_epu64 operation.

        C method prototype:
            _mm512_max_epu64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_max_epu64(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_epu64 operation.

        C method prototype:
            _mm512_maskz_max_epu64(__M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_max_epu64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_epu64 operation.

        C method prototype:
            _mm512_mask_max_epu64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_min_epu64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_epu64 operation.

        C method prototype:
            _mm512_min_epu64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_min_epu64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_epu64 operation.

        C method prototype:
            _mm512_mask_min_epu64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_min_epu64(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_epu64 operation.

        C method prototype:
            _mm512_maskz_min_epu64(__M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_max_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_epi32 operation.

        C method prototype:
            _mm512_max_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_max_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_epi32 operation.

        C method prototype:
            _mm512_maskz_max_epi32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_max_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_epi32 operation.

        C method prototype:
            _mm512_mask_max_epi32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_min_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_epi32 operation.

        C method prototype:
            _mm512_min_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_min_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_epi32 operation.

        C method prototype:
            _mm512_maskz_min_epi32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_min_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_epi32 operation.

        C method prototype:
            _mm512_mask_min_epi32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_max_epu32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_epu32 operation.

        C method prototype:
            _mm512_max_epu32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_max_epu32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_epu32 operation.

        C method prototype:
            _mm512_maskz_max_epu32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_max_epu32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_epu32 operation.

        C method prototype:
            _mm512_mask_max_epu32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_min_epu32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_epu32 operation.

        C method prototype:
            _mm512_min_epu32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_min_epu32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_epu32 operation.

        C method prototype:
            _mm512_maskz_min_epu32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_min_epu32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_epu32 operation.

        C method prototype:
            _mm512_mask_min_epu32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_unpacklo_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpacklo_ps operation.

        C method prototype:
            _mm512_unpacklo_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_unpacklo_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpacklo_ps operation.

        C method prototype:
            _mm512_mask_unpacklo_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_unpacklo_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpacklo_ps operation.

        C method prototype:
            _mm512_maskz_unpacklo_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_max_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_max_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_max_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_max_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_max_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_max_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_max_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_max_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_max_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_max_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_max_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_max_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_max_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_max_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_max_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_max_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_max_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_max_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_min_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_min_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_min_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_min_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_min_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_min_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_min_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_min_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_min_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_min_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_min_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_min_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_min_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_min_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_min_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_min_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_min_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_min_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_blend_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __W: Ptr) -> None:
        """
        Executes the _mm512_mask_blend_pd operation.

        C method prototype:
            _mm512_mask_blend_pd(__U: __mmask8, __A: __m512d, __W: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_blend_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __W: Ptr) -> None:
        """
        Executes the _mm512_mask_blend_ps operation.

        C method prototype:
            _mm512_mask_blend_ps(__U: __mmask16, __A: __m512, __W: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_blend_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __W: Ptr) -> None:
        """
        Executes the _mm512_mask_blend_epi64 operation.

        C method prototype:
            _mm512_mask_blend_epi64(__U: __mmask8, __A: __m512i, __W: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_blend_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __W: Ptr) -> None:
        """
        Executes the _mm512_mask_blend_epi32 operation.

        C method prototype:
            _mm512_mask_blend_epi32(__U: __mmask16, __A: __m512i, __W: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_fmadd_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fmadd_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fmadd_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fmadd_round_ss(__W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fmsub_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fmsub_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fmsub_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fmsub_round_ss(__W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fnmadd_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fnmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fnmadd_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fnmadd_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fnmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fnmadd_round_ss(__W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fnmsub_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fnmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fnmsub_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fnmsub_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fnmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fnmsub_round_ss(__W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fmadd_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fmadd_sd operation.

        C method prototype:
            _mm_mask_fmadd_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_fmadd_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fmadd_ss operation.

        C method prototype:
            _mm_mask_fmadd_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask3_fmadd_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fmadd_sd operation.

        C method prototype:
            _mm_mask3_fmadd_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask3_fmadd_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fmadd_ss operation.

        C method prototype:
            _mm_mask3_fmadd_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_fmadd_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fmadd_sd operation.

        C method prototype:
            _mm_maskz_fmadd_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_fmadd_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fmadd_ss operation.

        C method prototype:
            _mm_maskz_fmadd_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_fmsub_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fmsub_sd operation.

        C method prototype:
            _mm_mask_fmsub_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_fmsub_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fmsub_ss operation.

        C method prototype:
            _mm_mask_fmsub_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask3_fmsub_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fmsub_sd operation.

        C method prototype:
            _mm_mask3_fmsub_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask3_fmsub_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fmsub_ss operation.

        C method prototype:
            _mm_mask3_fmsub_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_fmsub_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fmsub_sd operation.

        C method prototype:
            _mm_maskz_fmsub_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_fmsub_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fmsub_ss operation.

        C method prototype:
            _mm_maskz_fmsub_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_fnmadd_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fnmadd_sd operation.

        C method prototype:
            _mm_mask_fnmadd_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_fnmadd_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fnmadd_ss operation.

        C method prototype:
            _mm_mask_fnmadd_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask3_fnmadd_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fnmadd_sd operation.

        C method prototype:
            _mm_mask3_fnmadd_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask3_fnmadd_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fnmadd_ss operation.

        C method prototype:
            _mm_mask3_fnmadd_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_fnmadd_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fnmadd_sd operation.

        C method prototype:
            _mm_maskz_fnmadd_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_fnmadd_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fnmadd_ss operation.

        C method prototype:
            _mm_maskz_fnmadd_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_fnmsub_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fnmsub_sd operation.

        C method prototype:
            _mm_mask_fnmsub_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_fnmsub_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fnmsub_ss operation.

        C method prototype:
            _mm_mask_fnmsub_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask3_fnmsub_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fnmsub_sd operation.

        C method prototype:
            _mm_mask3_fnmsub_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask3_fnmsub_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fnmsub_ss operation.

        C method prototype:
            _mm_mask3_fnmsub_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_fnmsub_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fnmsub_sd operation.

        C method prototype:
            _mm_maskz_fnmsub_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_fnmsub_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fnmsub_ss operation.

        C method prototype:
            _mm_maskz_fnmsub_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_fmadd_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fmadd_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fmadd_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fmadd_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fmadd_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fmadd_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fmadd_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fmadd_round_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fmadd_round_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fmadd_round_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fmadd_round_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fmadd_round_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fmsub_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fmsub_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fmsub_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fmsub_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fmsub_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fmsub_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fmsub_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fmsub_round_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fmsub_round_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fmsub_round_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fmsub_round_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fmsub_round_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fnmadd_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fnmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fnmadd_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fnmadd_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fnmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fnmadd_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fnmadd_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fnmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fnmadd_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fnmadd_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fnmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fnmadd_round_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fnmadd_round_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fnmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fnmadd_round_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fnmadd_round_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fnmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fnmadd_round_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fnmsub_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fnmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fnmsub_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fnmsub_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fnmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fnmsub_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fnmsub_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fnmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fnmsub_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fnmsub_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fnmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fnmsub_round_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fnmsub_round_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fnmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fnmsub_round_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fnmsub_round_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fnmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fnmsub_round_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_comi_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_comi_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_comi_round_ss(__A: __m128, __B: __m128, __P: const int, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_comi_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_comi_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_comi_round_sd(__A: __m128d, __B: __m128d, __P: const int, __R: const int) -> int

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_sqrt_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_sqrt_pd operation.

        C method prototype:
            _mm512_sqrt_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sqrt_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_sqrt_pd operation.

        C method prototype:
            _mm512_mask_sqrt_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sqrt_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_sqrt_pd operation.

        C method prototype:
            _mm512_maskz_sqrt_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sqrt_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_sqrt_ps operation.

        C method prototype:
            _mm512_sqrt_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sqrt_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_sqrt_ps operation.

        C method prototype:
            _mm512_mask_sqrt_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sqrt_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_sqrt_ps operation.

        C method prototype:
            _mm512_maskz_sqrt_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_add_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_add_pd operation.

        C method prototype:
            _mm512_add_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_add_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_add_pd operation.

        C method prototype:
            _mm512_mask_add_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_add_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_add_pd operation.

        C method prototype:
            _mm512_maskz_add_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_add_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_add_ps operation.

        C method prototype:
            _mm512_add_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_add_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_add_ps operation.

        C method prototype:
            _mm512_mask_add_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_add_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_add_ps operation.

        C method prototype:
            _mm512_maskz_add_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_add_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_add_sd operation.

        C method prototype:
            _mm_mask_add_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_add_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_add_sd operation.

        C method prototype:
            _mm_maskz_add_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_add_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_add_ss operation.

        C method prototype:
            _mm_mask_add_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_add_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_add_ss operation.

        C method prototype:
            _mm_maskz_add_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sub_pd operation.

        C method prototype:
            _mm512_sub_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sub_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sub_pd operation.

        C method prototype:
            _mm512_mask_sub_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sub_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sub_pd operation.

        C method prototype:
            _mm512_maskz_sub_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_sub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sub_ps operation.

        C method prototype:
            _mm512_sub_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_sub_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sub_ps operation.

        C method prototype:
            _mm512_mask_sub_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_sub_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sub_ps operation.

        C method prototype:
            _mm512_maskz_sub_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_sub_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_sub_sd operation.

        C method prototype:
            _mm_mask_sub_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_sub_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_sub_sd operation.

        C method prototype:
            _mm_maskz_sub_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_sub_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_sub_ss operation.

        C method prototype:
            _mm_mask_sub_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_sub_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_sub_ss operation.

        C method prototype:
            _mm_maskz_sub_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mul_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mul_pd operation.

        C method prototype:
            _mm512_mul_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mul_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_mul_pd operation.

        C method prototype:
            _mm512_mask_mul_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_mul_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_mul_pd operation.

        C method prototype:
            _mm512_maskz_mul_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mul_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mul_ps operation.

        C method prototype:
            _mm512_mul_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_mul_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_mul_ps operation.

        C method prototype:
            _mm512_mask_mul_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_mul_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_mul_ps operation.

        C method prototype:
            _mm512_maskz_mul_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_mul_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_mul_sd operation.

        C method prototype:
            _mm_mask_mul_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_mul_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_mul_sd operation.

        C method prototype:
            _mm_maskz_mul_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_mul_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_mul_ss operation.

        C method prototype:
            _mm_mask_mul_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_mul_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_mul_ss operation.

        C method prototype:
            _mm_maskz_mul_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_div_pd(self, __result: Ptr, __M: Ptr, __V: Ptr) -> None:
        """
        Executes the _mm512_div_pd operation.

        C method prototype:
            _mm512_div_pd(__M: __m512d, __V: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_div_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __M: Ptr, __V: Ptr) -> None:
        """
        Executes the _mm512_mask_div_pd operation.

        C method prototype:
            _mm512_mask_div_pd(__W: __m512d, __U: __mmask8, __M: __m512d, __V: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_div_pd(self, __result: Ptr, __U: Ptr, __M: Ptr, __V: Ptr) -> None:
        """
        Executes the _mm512_maskz_div_pd operation.

        C method prototype:
            _mm512_maskz_div_pd(__U: __mmask8, __M: __m512d, __V: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_div_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_div_ps operation.

        C method prototype:
            _mm512_div_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_div_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_div_ps operation.

        C method prototype:
            _mm512_mask_div_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_div_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_div_ps operation.

        C method prototype:
            _mm512_maskz_div_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_div_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_div_sd operation.

        C method prototype:
            _mm_mask_div_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_div_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_div_sd operation.

        C method prototype:
            _mm_maskz_div_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_div_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_div_ss operation.

        C method prototype:
            _mm_mask_div_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_div_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_div_ss operation.

        C method prototype:
            _mm_maskz_div_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_max_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_pd operation.

        C method prototype:
            _mm512_max_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_max_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_pd operation.

        C method prototype:
            _mm512_mask_max_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_max_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_pd operation.

        C method prototype:
            _mm512_maskz_max_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_max_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_ps operation.

        C method prototype:
            _mm512_max_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_max_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_ps operation.

        C method prototype:
            _mm512_mask_max_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_max_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_ps operation.

        C method prototype:
            _mm512_maskz_max_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_max_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_max_sd operation.

        C method prototype:
            _mm_mask_max_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_max_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_max_sd operation.

        C method prototype:
            _mm_maskz_max_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_max_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_max_ss operation.

        C method prototype:
            _mm_mask_max_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_max_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_max_ss operation.

        C method prototype:
            _mm_maskz_max_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_min_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_pd operation.

        C method prototype:
            _mm512_min_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_min_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_pd operation.

        C method prototype:
            _mm512_mask_min_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_min_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_pd operation.

        C method prototype:
            _mm512_maskz_min_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_min_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_ps operation.

        C method prototype:
            _mm512_min_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_min_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_ps operation.

        C method prototype:
            _mm512_mask_min_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_min_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_ps operation.

        C method prototype:
            _mm512_maskz_min_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_min_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_min_sd operation.

        C method prototype:
            _mm_mask_min_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_min_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_min_sd operation.

        C method prototype:
            _mm_maskz_min_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_min_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_min_ss operation.

        C method prototype:
            _mm_mask_min_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_min_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_min_ss operation.

        C method prototype:
            _mm_maskz_min_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_scalef_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_scalef_pd operation.

        C method prototype:
            _mm512_scalef_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_scalef_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_scalef_pd operation.

        C method prototype:
            _mm512_mask_scalef_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_scalef_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_scalef_pd operation.

        C method prototype:
            _mm512_maskz_scalef_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_scalef_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_scalef_ps operation.

        C method prototype:
            _mm512_scalef_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_scalef_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_scalef_ps operation.

        C method prototype:
            _mm512_mask_scalef_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_scalef_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_scalef_ps operation.

        C method prototype:
            _mm512_maskz_scalef_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_scalef_sd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_scalef_sd operation.

        C method prototype:
            _mm_scalef_sd(__A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_scalef_ss(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_scalef_ss operation.

        C method prototype:
            _mm_scalef_ss(__A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fmadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmadd_pd operation.

        C method prototype:
            _mm512_fmadd_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fmadd_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmadd_pd operation.

        C method prototype:
            _mm512_mask_fmadd_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fmadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmadd_pd operation.

        C method prototype:
            _mm512_mask3_fmadd_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fmadd_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmadd_pd operation.

        C method prototype:
            _mm512_maskz_fmadd_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fmadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmadd_ps operation.

        C method prototype:
            _mm512_fmadd_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fmadd_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmadd_ps operation.

        C method prototype:
            _mm512_mask_fmadd_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fmadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmadd_ps operation.

        C method prototype:
            _mm512_mask3_fmadd_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fmadd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmadd_ps operation.

        C method prototype:
            _mm512_maskz_fmadd_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fmsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmsub_pd operation.

        C method prototype:
            _mm512_fmsub_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fmsub_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmsub_pd operation.

        C method prototype:
            _mm512_mask_fmsub_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fmsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmsub_pd operation.

        C method prototype:
            _mm512_mask3_fmsub_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fmsub_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmsub_pd operation.

        C method prototype:
            _mm512_maskz_fmsub_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fmsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmsub_ps operation.

        C method prototype:
            _mm512_fmsub_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fmsub_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmsub_ps operation.

        C method prototype:
            _mm512_mask_fmsub_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fmsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmsub_ps operation.

        C method prototype:
            _mm512_mask3_fmsub_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fmsub_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmsub_ps operation.

        C method prototype:
            _mm512_maskz_fmsub_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fmaddsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmaddsub_pd operation.

        C method prototype:
            _mm512_fmaddsub_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fmaddsub_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmaddsub_pd operation.

        C method prototype:
            _mm512_mask_fmaddsub_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fmaddsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmaddsub_pd operation.

        C method prototype:
            _mm512_mask3_fmaddsub_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fmaddsub_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmaddsub_pd operation.

        C method prototype:
            _mm512_maskz_fmaddsub_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fmaddsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmaddsub_ps operation.

        C method prototype:
            _mm512_fmaddsub_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fmaddsub_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmaddsub_ps operation.

        C method prototype:
            _mm512_mask_fmaddsub_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fmaddsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmaddsub_ps operation.

        C method prototype:
            _mm512_mask3_fmaddsub_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fmaddsub_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmaddsub_ps operation.

        C method prototype:
            _mm512_maskz_fmaddsub_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fmsubadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmsubadd_pd operation.

        C method prototype:
            _mm512_fmsubadd_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fmsubadd_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmsubadd_pd operation.

        C method prototype:
            _mm512_mask_fmsubadd_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fmsubadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmsubadd_pd operation.

        C method prototype:
            _mm512_mask3_fmsubadd_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fmsubadd_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmsubadd_pd operation.

        C method prototype:
            _mm512_maskz_fmsubadd_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fmsubadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmsubadd_ps operation.

        C method prototype:
            _mm512_fmsubadd_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fmsubadd_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmsubadd_ps operation.

        C method prototype:
            _mm512_mask_fmsubadd_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fmsubadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmsubadd_ps operation.

        C method prototype:
            _mm512_mask3_fmsubadd_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fmsubadd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmsubadd_ps operation.

        C method prototype:
            _mm512_maskz_fmsubadd_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fnmadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fnmadd_pd operation.

        C method prototype:
            _mm512_fnmadd_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fnmadd_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fnmadd_pd operation.

        C method prototype:
            _mm512_mask_fnmadd_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fnmadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fnmadd_pd operation.

        C method prototype:
            _mm512_mask3_fnmadd_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fnmadd_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fnmadd_pd operation.

        C method prototype:
            _mm512_maskz_fnmadd_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fnmadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fnmadd_ps operation.

        C method prototype:
            _mm512_fnmadd_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fnmadd_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fnmadd_ps operation.

        C method prototype:
            _mm512_mask_fnmadd_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fnmadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fnmadd_ps operation.

        C method prototype:
            _mm512_mask3_fnmadd_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fnmadd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fnmadd_ps operation.

        C method prototype:
            _mm512_maskz_fnmadd_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fnmsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fnmsub_pd operation.

        C method prototype:
            _mm512_fnmsub_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fnmsub_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fnmsub_pd operation.

        C method prototype:
            _mm512_mask_fnmsub_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fnmsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fnmsub_pd operation.

        C method prototype:
            _mm512_mask3_fnmsub_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fnmsub_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fnmsub_pd operation.

        C method prototype:
            _mm512_maskz_fnmsub_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fnmsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fnmsub_ps operation.

        C method prototype:
            _mm512_fnmsub_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_fnmsub_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fnmsub_ps operation.

        C method prototype:
            _mm512_mask_fnmsub_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask3_fnmsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fnmsub_ps operation.

        C method prototype:
            _mm512_mask3_fnmsub_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_fnmsub_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fnmsub_ps operation.

        C method prototype:
            _mm512_maskz_fnmsub_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvttpd_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvttpd_epi32 operation.

        C method prototype:
            _mm512_cvttpd_epi32(__A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvttpd_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvttpd_epi32 operation.

        C method prototype:
            _mm512_mask_cvttpd_epi32(__W: __m256i, __U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvttpd_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvttpd_epi32 operation.

        C method prototype:
            _mm512_maskz_cvttpd_epi32(__U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvttpd_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvttpd_epu32 operation.

        C method prototype:
            _mm512_cvttpd_epu32(__A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvttpd_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvttpd_epu32 operation.

        C method prototype:
            _mm512_mask_cvttpd_epu32(__W: __m256i, __U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvttpd_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvttpd_epu32 operation.

        C method prototype:
            _mm512_maskz_cvttpd_epu32(__U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtpd_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtpd_epi32 operation.

        C method prototype:
            _mm512_cvtpd_epi32(__A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtpd_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtpd_epi32 operation.

        C method prototype:
            _mm512_mask_cvtpd_epi32(__W: __m256i, __U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtpd_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtpd_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtpd_epi32(__U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtpd_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtpd_epu32 operation.

        C method prototype:
            _mm512_cvtpd_epu32(__A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtpd_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtpd_epu32 operation.

        C method prototype:
            _mm512_mask_cvtpd_epu32(__W: __m256i, __U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtpd_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtpd_epu32 operation.

        C method prototype:
            _mm512_maskz_cvtpd_epu32(__U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvttps_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvttps_epi32 operation.

        C method prototype:
            _mm512_cvttps_epi32(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvttps_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvttps_epi32 operation.

        C method prototype:
            _mm512_mask_cvttps_epi32(__W: __m512i, __U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvttps_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvttps_epi32 operation.

        C method prototype:
            _mm512_maskz_cvttps_epi32(__U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvttps_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvttps_epu32 operation.

        C method prototype:
            _mm512_cvttps_epu32(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvttps_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvttps_epu32 operation.

        C method prototype:
            _mm512_mask_cvttps_epu32(__W: __m512i, __U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvttps_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvttps_epu32 operation.

        C method prototype:
            _mm512_maskz_cvttps_epu32(__U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtps_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtps_epi32 operation.

        C method prototype:
            _mm512_cvtps_epi32(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtps_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtps_epi32 operation.

        C method prototype:
            _mm512_mask_cvtps_epi32(__W: __m512i, __U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtps_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtps_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtps_epi32(__U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtps_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtps_epu32 operation.

        C method prototype:
            _mm512_cvtps_epu32(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtps_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtps_epu32 operation.

        C method prototype:
            _mm512_mask_cvtps_epu32(__W: __m512i, __U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtps_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtps_epu32 operation.

        C method prototype:
            _mm512_maskz_cvtps_epu32(__U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtsd_f64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsd_f64 operation.

        C method prototype:
            _mm512_cvtsd_f64(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtss_f32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtss_f32 operation.

        C method prototype:
            _mm512_cvtss_f32(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvtu64_ss(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvtu64_ss operation.

        C method prototype:
            _mm_cvtu64_ss(__A: __m128, __B: unsigned long long) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvtu64_sd(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvtu64_sd operation.

        C method prototype:
            _mm_cvtu64_sd(__A: __m128d, __B: unsigned long long) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvtu32_ss(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvtu32_ss operation.

        C method prototype:
            _mm_cvtu32_ss(__A: __m128, __B: unsigned) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepi32_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_ps operation.

        C method prototype:
            _mm512_cvtepi32_ps(__A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_ps operation.

        C method prototype:
            _mm512_mask_cvtepi32_ps(__W: __m512, __U: __mmask16, __A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_ps operation.

        C method prototype:
            _mm512_maskz_cvtepi32_ps(__U: __mmask16, __A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtepu32_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu32_ps operation.

        C method prototype:
            _mm512_cvtepu32_ps(__A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu32_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu32_ps operation.

        C method prototype:
            _mm512_mask_cvtepu32_ps(__W: __m512, __U: __mmask16, __A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu32_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu32_ps operation.

        C method prototype:
            _mm512_maskz_cvtepu32_ps(__U: __mmask16, __A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_fixupimm_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_fixupimm_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fixupimm_pd(__A: __m512d, __B: __m512d, __C: __m512i, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fixupimm_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fixupimm_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fixupimm_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512i, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fixupimm_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fixupimm_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fixupimm_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512i, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fixupimm_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_fixupimm_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fixupimm_ps(__A: __m512, __B: __m512, __C: __m512i, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fixupimm_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fixupimm_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fixupimm_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512i, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fixupimm_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fixupimm_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fixupimm_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512i, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fixupimm_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_fixupimm_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fixupimm_sd(__A: __m128d, __B: __m128d, __C: __m128i, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fixupimm_sd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fixupimm_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fixupimm_sd(__A: __m128d, __U: __mmask8, __B: __m128d, __C: __m128i, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fixupimm_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fixupimm_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fixupimm_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __C: __m128i, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fixupimm_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_fixupimm_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fixupimm_ss(__A: __m128, __B: __m128, __C: __m128i, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fixupimm_ss(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fixupimm_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fixupimm_ss(__A: __m128, __U: __mmask8, __B: __m128, __C: __m128i, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fixupimm_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fixupimm_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fixupimm_ss(__U: __mmask8, __A: __m128, __B: __m128, __C: __m128i, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtss_u64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtss_u64 operation.

        C method prototype:
            _mm_cvtss_u64(__A: __m128) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvttss_u64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttss_u64 operation.

        C method prototype:
            _mm_cvttss_u64(__A: __m128) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvttss_i64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttss_i64 operation.

        C method prototype:
            _mm_cvttss_i64(__A: __m128) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtsi512_si32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsi512_si32 operation.

        C method prototype:
            _mm512_cvtsi512_si32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvtss_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtss_u32 operation.

        C method prototype:
            _mm_cvtss_u32(__A: __m128) -> unsigned

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvttss_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttss_u32 operation.

        C method prototype:
            _mm_cvttss_u32(__A: __m128) -> unsigned

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvttss_i32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttss_i32 operation.

        C method prototype:
            _mm_cvttss_i32(__A: __m128) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvtsd_i32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtsd_i32 operation.

        C method prototype:
            _mm_cvtsd_i32(__A: __m128d) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvtss_i32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtss_i32 operation.

        C method prototype:
            _mm_cvtss_i32(__A: __m128) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvti32_sd(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm_cvti32_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvti32_sd(__A: __m128d, __B: int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvti32_ss(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm_cvti32_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvti32_ss(__A: __m128, __B: int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtsd_u64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtsd_u64 operation.

        C method prototype:
            _mm_cvtsd_u64(__A: __m128d) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvttsd_u64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttsd_u64 operation.

        C method prototype:
            _mm_cvttsd_u64(__A: __m128d) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvttsd_i64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttsd_i64 operation.

        C method prototype:
            _mm_cvttsd_i64(__A: __m128d) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvtsd_i64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtsd_i64 operation.

        C method prototype:
            _mm_cvtsd_i64(__A: __m128d) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvtss_i64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtss_i64 operation.

        C method prototype:
            _mm_cvtss_i64(__A: __m128) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvti64_sd(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvti64_sd operation.

        C method prototype:
            _mm_cvti64_sd(__A: __m128d, __B: long long) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvti64_ss(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvti64_ss operation.

        C method prototype:
            _mm_cvti64_ss(__A: __m128, __B: long long) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvtsd_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtsd_u32 operation.

        C method prototype:
            _mm_cvtsd_u32(__A: __m128d) -> unsigned

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvttsd_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttsd_u32 operation.

        C method prototype:
            _mm_cvttsd_u32(__A: __m128d) -> unsigned

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_cvttsd_i32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttsd_i32 operation.

        C method prototype:
            _mm_cvttsd_i32(__A: __m128d) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtps_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtps_pd operation.

        C method prototype:
            _mm512_cvtps_pd(__A: __m256) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtps_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtps_pd operation.

        C method prototype:
            _mm512_mask_cvtps_pd(__W: __m512d, __U: __mmask8, __A: __m256) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtps_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtps_pd operation.

        C method prototype:
            _mm512_maskz_cvtps_pd(__U: __mmask8, __A: __m256) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtph_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtph_ps operation.

        C method prototype:
            _mm512_cvtph_ps(__A: __m256i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtph_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtph_ps operation.

        C method prototype:
            _mm512_mask_cvtph_ps(__W: __m512, __U: __mmask16, __A: __m256i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtph_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtph_ps operation.

        C method prototype:
            _mm512_maskz_cvtph_ps(__U: __mmask16, __A: __m256i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cvtpd_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtpd_ps operation.

        C method prototype:
            _mm512_cvtpd_ps(__A: __m512d) -> __m256

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cvtpd_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtpd_ps operation.

        C method prototype:
            _mm512_mask_cvtpd_ps(__W: __m256, __U: __mmask8, __A: __m512d) -> __m256

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_cvtpd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtpd_ps operation.

        C method prototype:
            _mm512_maskz_cvtpd_ps(__U: __mmask8, __A: __m512d) -> __m256

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_getexp_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_getexp_ps operation.

        C method prototype:
            _mm512_getexp_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_getexp_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_getexp_ps operation.

        C method prototype:
            _mm512_mask_getexp_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_getexp_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_getexp_ps operation.

        C method prototype:
            _mm512_maskz_getexp_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_getexp_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_getexp_pd operation.

        C method prototype:
            _mm512_getexp_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_getexp_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_getexp_pd operation.

        C method prototype:
            _mm512_mask_getexp_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_maskz_getexp_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_getexp_pd operation.

        C method prototype:
            _mm512_maskz_getexp_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_getexp_ss(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_getexp_ss operation.

        C method prototype:
            _mm_getexp_ss(__A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_getexp_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_getexp_ss operation.

        C method prototype:
            _mm_mask_getexp_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_getexp_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_getexp_ss operation.

        C method prototype:
            _mm_maskz_getexp_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_getexp_sd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_getexp_sd operation.

        C method prototype:
            _mm_getexp_sd(__A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_mask_getexp_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_getexp_sd operation.

        C method prototype:
            _mm_mask_getexp_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm_maskz_getexp_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_getexp_sd operation.

        C method prototype:
            _mm_maskz_getexp_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_getmant_pd(self, __result: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_getmant_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_getmant_pd(__A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getmant_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getmant_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getmant_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getmant_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getmant_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getmant_pd(__U: __mmask8, __A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getmant_ps(self, __result: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_getmant_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_getmant_ps(__A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getmant_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getmant_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getmant_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getmant_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getmant_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getmant_ps(__U: __mmask16, __A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getmant_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_getmant_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_getmant_sd(__A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getmant_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getmant_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getmant_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getmant_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getmant_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getmant_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getmant_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_getmant_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_getmant_ss(__A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getmant_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getmant_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getmant_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getmant_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getmant_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getmant_ss(__U: __mmask8, __A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_roundscale_ps(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_roundscale_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_roundscale_ps(__A: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_roundscale_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_roundscale_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_roundscale_ps(__A: __m512, __B: __mmask16, __C: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_roundscale_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_roundscale_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_roundscale_ps(__A: __mmask16, __B: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_roundscale_pd(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_roundscale_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_roundscale_pd(__A: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_roundscale_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_roundscale_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_roundscale_pd(__A: __m512d, __B: __mmask8, __C: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_roundscale_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_roundscale_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_roundscale_pd(__A: __mmask8, __B: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_roundscale_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_roundscale_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_roundscale_ss(__A: __m128, __B: __m128, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_roundscale_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_mask_roundscale_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_roundscale_ss(__A: __m128, __B: __mmask8, __C: __m128, __D: __m128, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_roundscale_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_roundscale_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_roundscale_ss(__A: __mmask8, __B: __m128, __C: __m128, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_roundscale_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_roundscale_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_roundscale_sd(__A: __m128d, __B: __m128d, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_roundscale_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_mask_roundscale_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_roundscale_sd(__A: __m128d, __B: __mmask8, __C: __m128d, __D: __m128d, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_roundscale_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_roundscale_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_roundscale_sd(__A: __mmask8, __B: __m128d, __C: __m128d, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_pd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_pd_mask(__X: __m512d, __Y: __m512d, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_ps_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_ps_mask(__X: __m512, __Y: __m512, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_ps_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_pd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cmp_sd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm_cmp_sd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_cmp_sd_mask(__X: __m128d, __Y: __m128d, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cmp_sd_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cmp_sd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cmp_sd_mask(__M: __mmask8, __X: __m128d, __Y: __m128d, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cmp_ss_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm_cmp_ss_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_cmp_ss_mask(__X: __m128, __Y: __m128, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cmp_ss_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cmp_ss_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cmp_ss_mask(__M: __mmask8, __X: __m128, __Y: __m128, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are
        not currently supported in PyFastUtil. Specifically, it requires
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmpeq_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_pd_mask operation.

        C method prototype:
            _mm512_cmpeq_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmplt_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_pd_mask operation.

        C method prototype:
            _mm512_cmplt_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_pd_mask operation.

        C method prototype:
            _mm512_mask_cmplt_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmple_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_pd_mask operation.

        C method prototype:
            _mm512_cmple_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmple_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_pd_mask operation.

        C method prototype:
            _mm512_mask_cmple_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpunord_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpunord_pd_mask operation.

        C method prototype:
            _mm512_cmpunord_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpunord_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpunord_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpunord_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpneq_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_pd_mask operation.

        C method prototype:
            _mm512_cmpneq_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpnlt_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpnlt_pd_mask operation.

        C method prototype:
            _mm512_cmpnlt_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpnlt_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpnlt_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpnlt_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpnle_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpnle_pd_mask operation.

        C method prototype:
            _mm512_cmpnle_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpnle_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpnle_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpnle_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpord_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpord_pd_mask operation.

        C method prototype:
            _mm512_cmpord_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpord_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpord_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpord_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpeq_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_ps_mask operation.

        C method prototype:
            _mm512_cmpeq_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmplt_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_ps_mask operation.

        C method prototype:
            _mm512_cmplt_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_ps_mask operation.

        C method prototype:
            _mm512_mask_cmplt_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmple_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_ps_mask operation.

        C method prototype:
            _mm512_cmple_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmple_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_ps_mask operation.

        C method prototype:
            _mm512_mask_cmple_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpunord_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpunord_ps_mask operation.

        C method prototype:
            _mm512_cmpunord_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpunord_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpunord_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpunord_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpneq_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_ps_mask operation.

        C method prototype:
            _mm512_cmpneq_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpnlt_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpnlt_ps_mask operation.

        C method prototype:
            _mm512_cmpnlt_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpnlt_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpnlt_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpnlt_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpnle_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpnle_ps_mask operation.

        C method prototype:
            _mm512_cmpnle_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpnle_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpnle_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpnle_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpord_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpord_ps_mask operation.

        C method prototype:
            _mm512_cmpord_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpord_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpord_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpord_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_kmov(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_kmov operation.

        C method prototype:
            _mm512_kmov(__A: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castpd_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd_ps operation.

        C method prototype:
            _mm512_castpd_ps(__A: __m512d) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castpd_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd_si512 operation.

        C method prototype:
            _mm512_castpd_si512(__A: __m512d) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castps_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps_pd operation.

        C method prototype:
            _mm512_castps_pd(__A: __m512) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castps_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps_si512 operation.

        C method prototype:
            _mm512_castps_si512(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castsi512_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi512_ps operation.

        C method prototype:
            _mm512_castsi512_ps(__A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castsi512_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi512_pd operation.

        C method prototype:
            _mm512_castsi512_pd(__A: __m512i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castpd512_pd128(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd512_pd128 operation.

        C method prototype:
            _mm512_castpd512_pd128(__A: __m512d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castps512_ps128(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps512_ps128 operation.

        C method prototype:
            _mm512_castps512_ps128(__A: __m512) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castsi512_si128(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi512_si128 operation.

        C method prototype:
            _mm512_castsi512_si128(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castpd512_pd256(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd512_pd256 operation.

        C method prototype:
            _mm512_castpd512_pd256(__A: __m512d) -> __m256d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castps512_ps256(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps512_ps256 operation.

        C method prototype:
            _mm512_castps512_ps256(__A: __m512) -> __m256

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castsi512_si256(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi512_si256 operation.

        C method prototype:
            _mm512_castsi512_si256(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castpd128_pd512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd128_pd512 operation.

        C method prototype:
            _mm512_castpd128_pd512(__A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castps128_ps512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps128_ps512 operation.

        C method prototype:
            _mm512_castps128_ps512(__A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castsi128_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi128_si512 operation.

        C method prototype:
            _mm512_castsi128_si512(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castpd256_pd512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd256_pd512 operation.

        C method prototype:
            _mm512_castpd256_pd512(__A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castps256_ps512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps256_ps512 operation.

        C method prototype:
            _mm512_castps256_ps512(__A: __m256) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_castsi256_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi256_si512 operation.

        C method prototype:
            _mm512_castsi256_si512(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_zextpd128_pd512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextpd128_pd512 operation.

        C method prototype:
            _mm512_zextpd128_pd512(__A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_zextps128_ps512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextps128_ps512 operation.

        C method prototype:
            _mm512_zextps128_ps512(__A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_zextsi128_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextsi128_si512 operation.

        C method prototype:
            _mm512_zextsi128_si512(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_zextpd256_pd512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextpd256_pd512 operation.

        C method prototype:
            _mm512_zextpd256_pd512(__A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_zextps256_ps512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextps256_ps512 operation.

        C method prototype:
            _mm512_zextps256_ps512(__A: __m256) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_zextsi256_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextsi256_si512 operation.

        C method prototype:
            _mm512_zextsi256_si512(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpeq_epu32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_epu32_mask operation.

        C method prototype:
            _mm512_cmpeq_epu32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_epu32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_epu32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_epu64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_epu64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpeq_epu64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_epu64_mask operation.

        C method prototype:
            _mm512_cmpeq_epu64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpgt_epu32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpgt_epu32_mask operation.

        C method prototype:
            _mm512_cmpgt_epu32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpgt_epu32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpgt_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmpgt_epu32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_cmpgt_epu64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpgt_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmpgt_epu64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_cmpgt_epu64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpgt_epu64_mask operation.

        C method prototype:
            _mm512_cmpgt_epu64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_add_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_add_epi32 operation.

        C method prototype:
            _mm512_reduce_add_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_mul_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_mul_epi32 operation.

        C method prototype:
            _mm512_reduce_mul_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_and_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_and_epi32 operation.

        C method prototype:
            _mm512_reduce_and_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_or_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_or_epi32 operation.

        C method prototype:
            _mm512_reduce_or_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_add_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_add_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_add_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_mul_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_mul_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_mul_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_and_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_and_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_and_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_or_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_or_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_or_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_min_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_epi32 operation.

        C method prototype:
            _mm512_reduce_min_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_max_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_epi32 operation.

        C method prototype:
            _mm512_reduce_max_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_min_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_epu32 operation.

        C method prototype:
            _mm512_reduce_min_epu32(__A: __m512i) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_max_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_epu32 operation.

        C method prototype:
            _mm512_reduce_max_epu32(__A: __m512i) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_min_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_max_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_epu32 operation.

        C method prototype:
            _mm512_mask_reduce_min_epu32(__U: __mmask16, __A: __m512i) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_epu32 operation.

        C method prototype:
            _mm512_mask_reduce_max_epu32(__U: __mmask16, __A: __m512i) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_add_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_add_ps operation.

        C method prototype:
            _mm512_reduce_add_ps(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_mul_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_mul_ps operation.

        C method prototype:
            _mm512_reduce_mul_ps(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_add_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_add_ps operation.

        C method prototype:
            _mm512_mask_reduce_add_ps(__U: __mmask16, __A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_mul_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_mul_ps operation.

        C method prototype:
            _mm512_mask_reduce_mul_ps(__U: __mmask16, __A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_min_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_ps operation.

        C method prototype:
            _mm512_reduce_min_ps(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_max_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_ps operation.

        C method prototype:
            _mm512_reduce_max_ps(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_ps operation.

        C method prototype:
            _mm512_mask_reduce_min_ps(__U: __mmask16, __A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_ps operation.

        C method prototype:
            _mm512_mask_reduce_max_ps(__U: __mmask16, __A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_add_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_add_epi64 operation.

        C method prototype:
            _mm512_reduce_add_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_mul_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_mul_epi64 operation.

        C method prototype:
            _mm512_reduce_mul_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_and_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_and_epi64 operation.

        C method prototype:
            _mm512_reduce_and_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_or_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_or_epi64 operation.

        C method prototype:
            _mm512_reduce_or_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_add_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_add_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_add_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_mul_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_mul_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_mul_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_and_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_and_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_and_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_or_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_or_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_or_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_min_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_epi64 operation.

        C method prototype:
            _mm512_reduce_min_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_max_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_epi64 operation.

        C method prototype:
            _mm512_reduce_max_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_min_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_max_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_min_epu64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_epu64 operation.

        C method prototype:
            _mm512_reduce_min_epu64(__A: __m512i) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_max_epu64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_epu64 operation.

        C method prototype:
            _mm512_reduce_max_epu64(__A: __m512i) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_epu64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_epu64 operation.

        C method prototype:
            _mm512_mask_reduce_min_epu64(__U: __mmask8, __A: __m512i) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_epu64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_epu64 operation.

        C method prototype:
            _mm512_mask_reduce_max_epu64(__U: __mmask8, __A: __m512i) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_add_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_add_pd operation.

        C method prototype:
            _mm512_reduce_add_pd(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_mul_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_mul_pd operation.

        C method prototype:
            _mm512_reduce_mul_pd(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_add_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_add_pd operation.

        C method prototype:
            _mm512_mask_reduce_add_pd(__U: __mmask8, __A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_mul_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_mul_pd operation.

        C method prototype:
            _mm512_mask_reduce_mul_pd(__U: __mmask8, __A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_min_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_pd operation.

        C method prototype:
            _mm512_reduce_min_pd(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_reduce_max_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_pd operation.

        C method prototype:
            _mm512_reduce_max_pd(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_pd operation.

        C method prototype:
            _mm512_mask_reduce_min_pd(__U: __mmask8, __A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that
        all arguments meet the required constraints as specified in the C
        method prototype.
        """
        pass


from typing import NoReturn

class RaisesNotImplementedError(NoReturn):
    """
    A marker type to indicate that a function raises a NotImplementedError.

    This type is used to explicitly document functions that are not currently 
    supported in PyFastUtil and will raise a NotImplementedError when called.
    """
    pass

class SIMDLowAVX512:
    """
    A class for performing AVX-512 SIMD operations.

    This class provides Python bindings for low-level AVX-512 SIMD instructions. It is automatically
    generated and designed for advanced users who need direct access to AVX-512 operations. All
    methods in this class map directly to C methods and are intended to be used with aligned memory
    pointers.

    **Key Features**:
        - Supports operations on AVX-512 vectors via 64-byte aligned pointers.
        - Methods directly map to C AVX-512 intrinsics with minimal abstraction.
        - Best used in conjunction with the `Unsafe` class for memory management.

    **Best Practice**:
        Use this class within a `with` statement to ensure that SIMD operations are scoped and
        memory management is clear. For example:

        ```python
        with Unsafe() as unsafe, SIMDLowAVX512() as simd:
            vec512i: Ptr = unsafe.alignedAlloc(64, 64)
            simd._mm512_set_epi64(vec512i, 1, 2, 3, 4, 5, 6, 7, 8)
            // do some operations ...
            unsafe.alignedFree(vec512i)
            vec512i = NULL
        ```

    **Implementation Details**:
        - This class is automatically generated by a script.
        - Non-POD (Plain Old Data) types are mapped via pointers.
        - For C methods with non-void return types, the return value is mapped to the first argument
          `__result`, which must be a pointer to memory with the appropriate alignment.

    **Warnings**:
        - All pointers passed to this class must be 64-byte aligned.
        - Improper use of these methods can lead to memory corruption, crashes, or undefined behavior.
    """

    def __init__(self) -> None:
        """
        Initializes the SIMDLowAVX512 context.

        This constructor does not perform any AVX-512 operations. It prepares the object to be
        used in a `with` statement for scoping SIMD operations.
        """
        pass

    def __enter__(self) -> SIMDLowAVX512: ...
    
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

    def _mm512_int2mask(self, __result: Ptr, __M: int) -> RaisesNotImplementedError:
        """
        _mm512_int2mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_int2mask(__M: int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask2int(self, __result: Ptr, __M: Ptr) -> None:
        """
        Executes the _mm512_mask2int operation.

        C method prototype:
            _mm512_mask2int(__M: __mmask16) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set_epi64(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int) -> None:
        """
        Executes the _mm512_set_epi64 operation.

        C method prototype:
            _mm512_set_epi64(__A: long long, __B: long long, __C: long long, __D: long long, __E: long long, __F: long long, __G: long long, __H: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set_epi32(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int, __I: int, __J: int, __K: int, __L: int, __M: int, __N: int, __O: int, __P: int) -> None:
        """
        Executes the _mm512_set_epi32 operation.

        C method prototype:
            _mm512_set_epi32(__A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int, __I: int, __J: int, __K: int, __L: int, __M: int, __N: int, __O: int, __P: int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set_epi16(self, __result: Ptr, __q31: int, __q30: int, __q29: int, __q28: int, __q27: int, __q26: int, __q25: int, __q24: int, __q23: int, __q22: int, __q21: int, __q20: int, __q19: int, __q18: int, __q17: int, __q16: int, __q15: int, __q14: int, __q13: int, __q12: int, __q11: int, __q10: int, __q09: int, __q08: int, __q07: int, __q06: int, __q05: int, __q04: int, __q03: int, __q02: int, __q01: int, __q00: int) -> None:
        """
        Executes the _mm512_set_epi16 operation.

        C method prototype:
            _mm512_set_epi16(__q31: short, __q30: short, __q29: short, __q28: short, __q27: short, __q26: short, __q25: short, __q24: short, __q23: short, __q22: short, __q21: short, __q20: short, __q19: short, __q18: short, __q17: short, __q16: short, __q15: short, __q14: short, __q13: short, __q12: short, __q11: short, __q10: short, __q09: short, __q08: short, __q07: short, __q06: short, __q05: short, __q04: short, __q03: short, __q02: short, __q01: short, __q00: short) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set_epi8(self, __result: Ptr, __q63: int, __q62: int, __q61: int, __q60: int, __q59: int, __q58: int, __q57: int, __q56: int, __q55: int, __q54: int, __q53: int, __q52: int, __q51: int, __q50: int, __q49: int, __q48: int, __q47: int, __q46: int, __q45: int, __q44: int, __q43: int, __q42: int, __q41: int, __q40: int, __q39: int, __q38: int, __q37: int, __q36: int, __q35: int, __q34: int, __q33: int, __q32: int, __q31: int, __q30: int, __q29: int, __q28: int, __q27: int, __q26: int, __q25: int, __q24: int, __q23: int, __q22: int, __q21: int, __q20: int, __q19: int, __q18: int, __q17: int, __q16: int, __q15: int, __q14: int, __q13: int, __q12: int, __q11: int, __q10: int, __q09: int, __q08: int, __q07: int, __q06: int, __q05: int, __q04: int, __q03: int, __q02: int, __q01: int, __q00: int) -> None:
        """
        Executes the _mm512_set_epi8 operation.

        C method prototype:
            _mm512_set_epi8(__q63: char, __q62: char, __q61: char, __q60: char, __q59: char, __q58: char, __q57: char, __q56: char, __q55: char, __q54: char, __q53: char, __q52: char, __q51: char, __q50: char, __q49: char, __q48: char, __q47: char, __q46: char, __q45: char, __q44: char, __q43: char, __q42: char, __q41: char, __q40: char, __q39: char, __q38: char, __q37: char, __q36: char, __q35: char, __q34: char, __q33: char, __q32: char, __q31: char, __q30: char, __q29: char, __q28: char, __q27: char, __q26: char, __q25: char, __q24: char, __q23: char, __q22: char, __q21: char, __q20: char, __q19: char, __q18: char, __q17: char, __q16: char, __q15: char, __q14: char, __q13: char, __q12: char, __q11: char, __q10: char, __q09: char, __q08: char, __q07: char, __q06: char, __q05: char, __q04: char, __q03: char, __q02: char, __q01: char, __q00: char) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set_pd(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int) -> None:
        """
        Executes the _mm512_set_pd operation.

        C method prototype:
            _mm512_set_pd(__A: double, __B: double, __C: double, __D: double, __E: double, __F: double, __G: double, __H: double) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set_ps(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int, __E: int, __F: int, __G: int, __H: int, __I: int, __J: int, __K: int, __L: int, __M: int, __N: int, __O: int, __P: int) -> None:
        """
        Executes the _mm512_set_ps operation.

        C method prototype:
            _mm512_set_ps(__A: float, __B: float, __C: float, __D: float, __E: float, __F: float, __G: float, __H: float, __I: float, __J: float, __K: float, __L: float, __M: float, __N: float, __O: float, __P: float) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_undefined_ps(self, __result: Ptr) -> None:
        """
        Executes the _mm512_undefined_ps operation.

        C method prototype:
            _mm512_undefined_ps() -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_undefined_pd(self, __result: Ptr) -> None:
        """
        Executes the _mm512_undefined_pd operation.

        C method prototype:
            _mm512_undefined_pd() -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_undefined_epi32(self, __result: Ptr) -> None:
        """
        Executes the _mm512_undefined_epi32 operation.

        C method prototype:
            _mm512_undefined_epi32() -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set1_epi8(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_epi8 operation.

        C method prototype:
            _mm512_set1_epi8(__A: char) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set1_epi16(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_epi16 operation.

        C method prototype:
            _mm512_set1_epi16(__A: short) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set1_pd(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_pd operation.

        C method prototype:
            _mm512_set1_pd(__A: double) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set1_ps(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_ps operation.

        C method prototype:
            _mm512_set1_ps(__A: float) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set4_epi32(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm512_set4_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_set4_epi32(__A: int, __B: int, __C: int, __D: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_set4_epi64(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int) -> None:
        """
        Executes the _mm512_set4_epi64 operation.

        C method prototype:
            _mm512_set4_epi64(__A: long long, __B: long long, __C: long long, __D: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set4_pd(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int) -> None:
        """
        Executes the _mm512_set4_pd operation.

        C method prototype:
            _mm512_set4_pd(__A: double, __B: double, __C: double, __D: double) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set4_ps(self, __result: Ptr, __A: int, __B: int, __C: int, __D: int) -> None:
        """
        Executes the _mm512_set4_ps operation.

        C method prototype:
            _mm512_set4_ps(__A: float, __B: float, __C: float, __D: float) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_setzero_ps(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero_ps operation.

        C method prototype:
            _mm512_setzero_ps() -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_setzero(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero operation.

        C method prototype:
            _mm512_setzero() -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_setzero_pd(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero_pd operation.

        C method prototype:
            _mm512_setzero_pd() -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_setzero_epi32(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero_epi32 operation.

        C method prototype:
            _mm512_setzero_epi32() -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_setzero_si512(self, __result: Ptr) -> None:
        """
        Executes the _mm512_setzero_si512 operation.

        C method prototype:
            _mm512_setzero_si512() -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mov_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_mov_pd operation.

        C method prototype:
            _mm512_mask_mov_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_mov_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_mov_pd operation.

        C method prototype:
            _mm512_maskz_mov_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mov_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_mov_ps operation.

        C method prototype:
            _mm512_mask_mov_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_mov_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_mov_ps operation.

        C method prototype:
            _mm512_maskz_mov_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_load_pd(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_pd operation.

        C method prototype:
            _mm512_load_pd(__P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_load_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_load_pd operation.

        C method prototype:
            _mm512_mask_load_pd(__W: __m512d, __U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_load_pd(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_load_pd operation.

        C method prototype:
            _mm512_maskz_load_pd(__U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_store_pd(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_pd operation.

        C method prototype:
            _mm512_store_pd(__P: void *, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_store_pd(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_store_pd operation.

        C method prototype:
            _mm512_mask_store_pd(__P: void *, __U: __mmask8, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_load_ps(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_ps operation.

        C method prototype:
            _mm512_load_ps(__P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_load_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_load_ps operation.

        C method prototype:
            _mm512_mask_load_ps(__W: __m512, __U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_load_ps(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_load_ps operation.

        C method prototype:
            _mm512_maskz_load_ps(__U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_store_ps(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_ps operation.

        C method prototype:
            _mm512_store_ps(__P: void *, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_store_ps(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_store_ps operation.

        C method prototype:
            _mm512_mask_store_ps(__P: void *, __U: __mmask16, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mov_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_mov_epi64 operation.

        C method prototype:
            _mm512_mask_mov_epi64(__W: __m512i, __U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_mov_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_mov_epi64 operation.

        C method prototype:
            _mm512_maskz_mov_epi64(__U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_load_epi64(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_epi64 operation.

        C method prototype:
            _mm512_load_epi64(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_load_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_load_epi64 operation.

        C method prototype:
            _mm512_mask_load_epi64(__W: __m512i, __U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_load_epi64(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_load_epi64 operation.

        C method prototype:
            _mm512_maskz_load_epi64(__U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_store_epi64(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_epi64 operation.

        C method prototype:
            _mm512_store_epi64(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_store_epi64(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_store_epi64 operation.

        C method prototype:
            _mm512_mask_store_epi64(__P: void *, __U: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mov_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_mov_epi32 operation.

        C method prototype:
            _mm512_mask_mov_epi32(__W: __m512i, __U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_mov_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_mov_epi32 operation.

        C method prototype:
            _mm512_maskz_mov_epi32(__U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_load_si512(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_si512 operation.

        C method prototype:
            _mm512_load_si512(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_load_epi32(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_load_epi32 operation.

        C method prototype:
            _mm512_load_epi32(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_load_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_load_epi32 operation.

        C method prototype:
            _mm512_mask_load_epi32(__W: __m512i, __U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_load_epi32(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_load_epi32 operation.

        C method prototype:
            _mm512_maskz_load_epi32(__U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_store_si512(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_si512 operation.

        C method prototype:
            _mm512_store_si512(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_store_epi32(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_store_epi32 operation.

        C method prototype:
            _mm512_store_epi32(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_store_epi32(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_store_epi32 operation.

        C method prototype:
            _mm512_mask_store_epi32(__P: void *, __U: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mullo_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mullo_epi32 operation.

        C method prototype:
            _mm512_mullo_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_mullo_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_mullo_epi32 operation.

        C method prototype:
            _mm512_maskz_mullo_epi32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mullo_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_mullo_epi32 operation.

        C method prototype:
            _mm512_mask_mullo_epi32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mullox_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mullox_epi64 operation.

        C method prototype:
            _mm512_mullox_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mullox_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_mullox_epi64 operation.

        C method prototype:
            _mm512_mask_mullox_epi64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sllv_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_sllv_epi32 operation.

        C method prototype:
            _mm512_sllv_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sllv_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_sllv_epi32 operation.

        C method prototype:
            _mm512_mask_sllv_epi32(__W: __m512i, __U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sllv_epi32(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_sllv_epi32 operation.

        C method prototype:
            _mm512_maskz_sllv_epi32(__U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srav_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_srav_epi32 operation.

        C method prototype:
            _mm512_srav_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srav_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_srav_epi32 operation.

        C method prototype:
            _mm512_mask_srav_epi32(__W: __m512i, __U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srav_epi32(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_srav_epi32 operation.

        C method prototype:
            _mm512_maskz_srav_epi32(__U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srlv_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_srlv_epi32 operation.

        C method prototype:
            _mm512_srlv_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srlv_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_srlv_epi32 operation.

        C method prototype:
            _mm512_mask_srlv_epi32(__W: __m512i, __U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srlv_epi32(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_srlv_epi32 operation.

        C method prototype:
            _mm512_maskz_srlv_epi32(__U: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_add_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_add_epi64 operation.

        C method prototype:
            _mm512_add_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_add_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_add_epi64 operation.

        C method prototype:
            _mm512_mask_add_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_add_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_add_epi64 operation.

        C method prototype:
            _mm512_maskz_add_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sub_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sub_epi64 operation.

        C method prototype:
            _mm512_sub_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sub_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sub_epi64 operation.

        C method prototype:
            _mm512_mask_sub_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sub_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sub_epi64 operation.

        C method prototype:
            _mm512_maskz_sub_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sllv_epi64(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_sllv_epi64 operation.

        C method prototype:
            _mm512_sllv_epi64(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sllv_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_sllv_epi64 operation.

        C method prototype:
            _mm512_mask_sllv_epi64(__W: __m512i, __U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sllv_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_sllv_epi64 operation.

        C method prototype:
            _mm512_maskz_sllv_epi64(__U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srav_epi64(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_srav_epi64 operation.

        C method prototype:
            _mm512_srav_epi64(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srav_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_srav_epi64 operation.

        C method prototype:
            _mm512_mask_srav_epi64(__W: __m512i, __U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srav_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_srav_epi64 operation.

        C method prototype:
            _mm512_maskz_srav_epi64(__U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srlv_epi64(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_srlv_epi64 operation.

        C method prototype:
            _mm512_srlv_epi64(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srlv_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_srlv_epi64 operation.

        C method prototype:
            _mm512_mask_srlv_epi64(__W: __m512i, __U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srlv_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_srlv_epi64 operation.

        C method prototype:
            _mm512_maskz_srlv_epi64(__U: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_add_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_add_epi32 operation.

        C method prototype:
            _mm512_add_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_add_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_add_epi32 operation.

        C method prototype:
            _mm512_mask_add_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_add_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_add_epi32 operation.

        C method prototype:
            _mm512_maskz_add_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mul_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mul_epi32 operation.

        C method prototype:
            _mm512_mul_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mul_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_mul_epi32 operation.

        C method prototype:
            _mm512_mask_mul_epi32(__W: __m512i, __M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_mul_epi32(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_mul_epi32 operation.

        C method prototype:
            _mm512_maskz_mul_epi32(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sub_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sub_epi32 operation.

        C method prototype:
            _mm512_sub_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sub_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sub_epi32 operation.

        C method prototype:
            _mm512_mask_sub_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sub_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sub_epi32 operation.

        C method prototype:
            _mm512_maskz_sub_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mul_epu32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mul_epu32 operation.

        C method prototype:
            _mm512_mul_epu32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mul_epu32(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_mul_epu32 operation.

        C method prototype:
            _mm512_mask_mul_epu32(__W: __m512i, __M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_mul_epu32(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_mul_epu32 operation.

        C method prototype:
            _mm512_maskz_mul_epu32(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_slli_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_slli_epi64 operation.

        C method prototype:
            _mm512_slli_epi64(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_slli_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_slli_epi64 operation.

        C method prototype:
            _mm512_mask_slli_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_slli_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_slli_epi64 operation.

        C method prototype:
            _mm512_maskz_slli_epi64(__U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sll_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sll_epi64 operation.

        C method prototype:
            _mm512_sll_epi64(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sll_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sll_epi64 operation.

        C method prototype:
            _mm512_mask_sll_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sll_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sll_epi64 operation.

        C method prototype:
            _mm512_maskz_sll_epi64(__U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srli_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_srli_epi64 operation.

        C method prototype:
            _mm512_srli_epi64(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srli_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_srli_epi64 operation.

        C method prototype:
            _mm512_mask_srli_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srli_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_srli_epi64 operation.

        C method prototype:
            _mm512_maskz_srli_epi64(__U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srl_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_srl_epi64 operation.

        C method prototype:
            _mm512_srl_epi64(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srl_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_srl_epi64 operation.

        C method prototype:
            _mm512_mask_srl_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srl_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_srl_epi64 operation.

        C method prototype:
            _mm512_maskz_srl_epi64(__U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srai_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_srai_epi64 operation.

        C method prototype:
            _mm512_srai_epi64(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srai_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_srai_epi64 operation.

        C method prototype:
            _mm512_mask_srai_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srai_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_srai_epi64 operation.

        C method prototype:
            _mm512_maskz_srai_epi64(__U: __mmask8, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sra_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sra_epi64 operation.

        C method prototype:
            _mm512_sra_epi64(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sra_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sra_epi64 operation.

        C method prototype:
            _mm512_mask_sra_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sra_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sra_epi64 operation.

        C method prototype:
            _mm512_maskz_sra_epi64(__U: __mmask8, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_slli_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_slli_epi32 operation.

        C method prototype:
            _mm512_slli_epi32(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_slli_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_slli_epi32 operation.

        C method prototype:
            _mm512_mask_slli_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_slli_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_slli_epi32 operation.

        C method prototype:
            _mm512_maskz_slli_epi32(__U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sll_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sll_epi32 operation.

        C method prototype:
            _mm512_sll_epi32(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sll_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sll_epi32 operation.

        C method prototype:
            _mm512_mask_sll_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sll_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sll_epi32 operation.

        C method prototype:
            _mm512_maskz_sll_epi32(__U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srli_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_srli_epi32 operation.

        C method prototype:
            _mm512_srli_epi32(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srli_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_srli_epi32 operation.

        C method prototype:
            _mm512_mask_srli_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srli_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_srli_epi32 operation.

        C method prototype:
            _mm512_maskz_srli_epi32(__U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srl_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_srl_epi32 operation.

        C method prototype:
            _mm512_srl_epi32(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srl_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_srl_epi32 operation.

        C method prototype:
            _mm512_mask_srl_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srl_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_srl_epi32 operation.

        C method prototype:
            _mm512_maskz_srl_epi32(__U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_srai_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_srai_epi32 operation.

        C method prototype:
            _mm512_srai_epi32(__A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_srai_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_mask_srai_epi32 operation.

        C method prototype:
            _mm512_mask_srai_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_srai_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm512_maskz_srai_epi32 operation.

        C method prototype:
            _mm512_maskz_srai_epi32(__U: __mmask16, __A: __m512i, __B: unsigned int) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sra_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sra_epi32 operation.

        C method prototype:
            _mm512_sra_epi32(__A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sra_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sra_epi32 operation.

        C method prototype:
            _mm512_mask_sra_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sra_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sra_epi32 operation.

        C method prototype:
            _mm512_maskz_sra_epi32(__U: __mmask16, __A: __m512i, __B: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_add_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_add_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_add_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_add_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_add_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_add_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_add_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_add_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_add_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_add_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_add_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_add_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_add_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_add_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_add_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_add_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_add_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_add_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_sub_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_sub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_sub_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_sub_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_sub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_sub_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_sub_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_sub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_sub_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_sub_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_sub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_sub_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_sub_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_sub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_sub_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_sub_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_sub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_sub_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_ternarylogic_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_ternarylogic_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_ternarylogic_epi64(__A: __m512i, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_ternarylogic_epi64(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_ternarylogic_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_ternarylogic_epi64(__A: __m512i, __U: __mmask8, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_ternarylogic_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_ternarylogic_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_ternarylogic_epi64(__U: __mmask8, __A: __m512i, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_ternarylogic_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_ternarylogic_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_ternarylogic_epi32(__A: __m512i, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_ternarylogic_epi32(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_ternarylogic_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_ternarylogic_epi32(__A: __m512i, __U: __mmask16, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_ternarylogic_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_ternarylogic_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_ternarylogic_epi32(__U: __mmask16, __A: __m512i, __B: __m512i, __C: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_rcp14_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_rcp14_pd operation.

        C method prototype:
            _mm512_rcp14_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_rcp14_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_rcp14_pd operation.

        C method prototype:
            _mm512_mask_rcp14_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_rcp14_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_rcp14_pd operation.

        C method prototype:
            _mm512_maskz_rcp14_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_rcp14_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_rcp14_ps operation.

        C method prototype:
            _mm512_rcp14_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_rcp14_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_rcp14_ps operation.

        C method prototype:
            _mm512_mask_rcp14_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_rcp14_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_rcp14_ps operation.

        C method prototype:
            _mm512_maskz_rcp14_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_rcp14_sd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_rcp14_sd operation.

        C method prototype:
            _mm_rcp14_sd(__A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_rcp14_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_rcp14_sd operation.

        C method prototype:
            _mm_mask_rcp14_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_rcp14_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_rcp14_sd operation.

        C method prototype:
            _mm_maskz_rcp14_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_rcp14_ss(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_rcp14_ss operation.

        C method prototype:
            _mm_rcp14_ss(__A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_rcp14_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_rcp14_ss operation.

        C method prototype:
            _mm_mask_rcp14_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_rcp14_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_rcp14_ss operation.

        C method prototype:
            _mm_maskz_rcp14_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_rsqrt14_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_rsqrt14_pd operation.

        C method prototype:
            _mm512_rsqrt14_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_rsqrt14_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_rsqrt14_pd operation.

        C method prototype:
            _mm512_mask_rsqrt14_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_rsqrt14_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_rsqrt14_pd operation.

        C method prototype:
            _mm512_maskz_rsqrt14_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_rsqrt14_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_rsqrt14_ps operation.

        C method prototype:
            _mm512_rsqrt14_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_rsqrt14_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_rsqrt14_ps operation.

        C method prototype:
            _mm512_mask_rsqrt14_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_rsqrt14_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_rsqrt14_ps operation.

        C method prototype:
            _mm512_maskz_rsqrt14_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_rsqrt14_sd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_rsqrt14_sd operation.

        C method prototype:
            _mm_rsqrt14_sd(__A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_rsqrt14_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_rsqrt14_sd operation.

        C method prototype:
            _mm_mask_rsqrt14_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_rsqrt14_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_rsqrt14_sd operation.

        C method prototype:
            _mm_maskz_rsqrt14_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_rsqrt14_ss(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_rsqrt14_ss operation.

        C method prototype:
            _mm_rsqrt14_ss(__A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_rsqrt14_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_rsqrt14_ss operation.

        C method prototype:
            _mm_mask_rsqrt14_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_rsqrt14_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_rsqrt14_ss operation.

        C method prototype:
            _mm_maskz_rsqrt14_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sqrt_round_pd(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_sqrt_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_sqrt_round_pd(__A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_sqrt_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_sqrt_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_sqrt_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_sqrt_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_sqrt_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_sqrt_round_pd(__U: __mmask8, __A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_sqrt_round_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_sqrt_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_sqrt_round_ps(__A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_sqrt_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_sqrt_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_sqrt_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_sqrt_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_sqrt_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_sqrt_round_ps(__U: __mmask16, __A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_sqrt_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_sqrt_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_sqrt_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_sqrt_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_sqrt_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_sqrt_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_sqrt_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_sqrt_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_sqrt_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_sqrt_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_sqrt_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_sqrt_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_sqrt_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_sqrt_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_sqrt_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_sqrt_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_sqrt_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_sqrt_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtepi8_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi8_epi32 operation.

        C method prototype:
            _mm512_cvtepi8_epi32(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi8_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi8_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepi8_epi32(__W: __m512i, __U: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi8_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi8_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepi8_epi32(__U: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi8_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi8_epi64 operation.

        C method prototype:
            _mm512_cvtepi8_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi8_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi8_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepi8_epi64(__W: __m512i, __U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi8_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi8_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepi8_epi64(__U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi16_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi16_epi32 operation.

        C method prototype:
            _mm512_cvtepi16_epi32(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi16_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi16_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepi16_epi32(__W: __m512i, __U: __mmask16, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi16_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi16_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepi16_epi32(__U: __mmask16, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi16_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi16_epi64 operation.

        C method prototype:
            _mm512_cvtepi16_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi16_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi16_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepi16_epi64(__W: __m512i, __U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi16_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi16_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepi16_epi64(__U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi32_epi64(self, __result: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_epi64 operation.

        C method prototype:
            _mm512_cvtepi32_epi64(__X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepi32_epi64(__W: __m512i, __U: __mmask8, __X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepi32_epi64(__U: __mmask8, __X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepu8_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu8_epi32 operation.

        C method prototype:
            _mm512_cvtepu8_epi32(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu8_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu8_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepu8_epi32(__W: __m512i, __U: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu8_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu8_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepu8_epi32(__U: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepu8_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu8_epi64 operation.

        C method prototype:
            _mm512_cvtepu8_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu8_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu8_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepu8_epi64(__W: __m512i, __U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu8_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu8_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepu8_epi64(__U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepu16_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu16_epi32 operation.

        C method prototype:
            _mm512_cvtepu16_epi32(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu16_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu16_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepu16_epi32(__W: __m512i, __U: __mmask16, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu16_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu16_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepu16_epi32(__U: __mmask16, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepu16_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu16_epi64 operation.

        C method prototype:
            _mm512_cvtepu16_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu16_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu16_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepu16_epi64(__W: __m512i, __U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu16_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu16_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepu16_epi64(__U: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepu32_epi64(self, __result: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_cvtepu32_epi64 operation.

        C method prototype:
            _mm512_cvtepu32_epi64(__X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu32_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu32_epi64 operation.

        C method prototype:
            _mm512_mask_cvtepu32_epi64(__W: __m512i, __U: __mmask8, __X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu32_epi64(self, __result: Ptr, __U: Ptr, __X: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu32_epi64 operation.

        C method prototype:
            _mm512_maskz_cvtepu32_epi64(__U: __mmask8, __X: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_add_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_add_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_add_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_add_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_add_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_add_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_add_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_add_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_add_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_add_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_add_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_add_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_add_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_add_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_add_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_add_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_add_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_add_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_sub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_sub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_sub_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_sub_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_sub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_sub_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_sub_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_sub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_sub_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_sub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_sub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_sub_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_sub_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_sub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_sub_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_sub_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_sub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_sub_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mul_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mul_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mul_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_mul_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_mul_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_mul_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_mul_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_mul_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_mul_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mul_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mul_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mul_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_mul_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_mul_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_mul_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_mul_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_mul_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_mul_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_div_round_pd(self, __result: Ptr, __M: Ptr, __V: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_div_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_div_round_pd(__M: __m512d, __V: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_div_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_div_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_div_round_pd(__W: __m512d, __U: __mmask8, __M: __m512d, __V: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_div_round_pd(self, __result: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_div_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_div_round_pd(__U: __mmask8, __M: __m512d, __V: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_div_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_div_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_div_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_div_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_div_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_div_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_div_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_div_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_div_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mul_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mul_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mul_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_mul_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_mul_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_mul_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_mul_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_mul_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_mul_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mul_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mul_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mul_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_mul_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_mul_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_mul_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_mul_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_mul_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_mul_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_div_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_div_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_div_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_div_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_div_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_div_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_div_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_div_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_div_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_div_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_div_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_div_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_div_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_div_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_div_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_div_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_div_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_div_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_max_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_max_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_max_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_max_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_max_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_max_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_max_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_max_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_max_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_max_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_max_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_max_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_max_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_max_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_max_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_max_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_max_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_max_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_min_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_min_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_min_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_min_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_min_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_min_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_min_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_min_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_min_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_min_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_min_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_min_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_min_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_min_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_min_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_min_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_min_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_min_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_scalef_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_scalef_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_scalef_round_pd(__A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_scalef_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_scalef_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_scalef_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_scalef_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_scalef_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_scalef_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_scalef_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_scalef_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_scalef_round_ps(__A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_scalef_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_scalef_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_scalef_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_scalef_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_scalef_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_scalef_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_scalef_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_scalef_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_scalef_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_scalef_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_scalef_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_scalef_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_scalef_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_scalef_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_scalef_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_scalef_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_scalef_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_scalef_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_scalef_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_scalef_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_scalef_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_scalef_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_scalef_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_scalef_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmadd_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmadd_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmadd_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmadd_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmadd_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmadd_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmadd_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmadd_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmsub_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmsub_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmsub_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmsub_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmsub_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmsub_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmsub_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmsub_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmaddsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmaddsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmaddsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmaddsub_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmaddsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmaddsub_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmaddsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmaddsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmaddsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmaddsub_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmaddsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmaddsub_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmaddsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmaddsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmaddsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmaddsub_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmaddsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmaddsub_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmaddsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmaddsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmaddsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmaddsub_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmaddsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmaddsub_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmsubadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmsubadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmsubadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmsubadd_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmsubadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmsubadd_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmsubadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmsubadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmsubadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmsubadd_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmsubadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmsubadd_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fmsubadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fmsubadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fmsubadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fmsubadd_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fmsubadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fmsubadd_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fmsubadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fmsubadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fmsubadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fmsubadd_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fmsubadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fmsubadd_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fnmadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fnmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fnmadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fnmadd_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fnmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fnmadd_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fnmadd_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fnmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fnmadd_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fnmadd_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fnmadd_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fnmadd_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fnmadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fnmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fnmadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fnmadd_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fnmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fnmadd_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fnmadd_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fnmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fnmadd_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fnmadd_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fnmadd_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fnmadd_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fnmsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fnmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fnmsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fnmsub_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fnmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fnmsub_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fnmsub_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fnmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fnmsub_round_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fnmsub_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fnmsub_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fnmsub_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fnmsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fnmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fnmsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fnmsub_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fnmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fnmsub_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask3_fnmsub_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask3_fnmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask3_fnmsub_round_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fnmsub_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fnmsub_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fnmsub_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_abs_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_abs_epi64 operation.

        C method prototype:
            _mm512_abs_epi64(__A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_abs_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_abs_epi64 operation.

        C method prototype:
            _mm512_mask_abs_epi64(__W: __m512i, __U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_abs_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_abs_epi64 operation.

        C method prototype:
            _mm512_maskz_abs_epi64(__U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_abs_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_abs_epi32 operation.

        C method prototype:
            _mm512_abs_epi32(__A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_abs_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_abs_epi32 operation.

        C method prototype:
            _mm512_mask_abs_epi32(__W: __m512i, __U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_abs_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_abs_epi32 operation.

        C method prototype:
            _mm512_maskz_abs_epi32(__U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_broadcastss_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcastss_ps operation.

        C method prototype:
            _mm512_broadcastss_ps(__A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_broadcastss_ps(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcastss_ps operation.

        C method prototype:
            _mm512_mask_broadcastss_ps(__O: __m512, __M: __mmask16, __A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_broadcastss_ps(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcastss_ps operation.

        C method prototype:
            _mm512_maskz_broadcastss_ps(__M: __mmask16, __A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_broadcastsd_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcastsd_pd operation.

        C method prototype:
            _mm512_broadcastsd_pd(__A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_broadcastsd_pd(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcastsd_pd operation.

        C method prototype:
            _mm512_mask_broadcastsd_pd(__O: __m512d, __M: __mmask8, __A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_broadcastsd_pd(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcastsd_pd operation.

        C method prototype:
            _mm512_maskz_broadcastsd_pd(__M: __mmask8, __A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_broadcastd_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcastd_epi32 operation.

        C method prototype:
            _mm512_broadcastd_epi32(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_broadcastd_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcastd_epi32 operation.

        C method prototype:
            _mm512_mask_broadcastd_epi32(__O: __m512i, __M: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_broadcastd_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcastd_epi32 operation.

        C method prototype:
            _mm512_maskz_broadcastd_epi32(__M: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set1_epi32(self, __result: Ptr, __A: int) -> RaisesNotImplementedError:
        """
        _mm512_set1_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_set1_epi32(__A: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_set1_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_set1_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_set1_epi32(__O: __m512i, __M: __mmask16, __A: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_set1_epi32(self, __result: Ptr, __M: Ptr, __A: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_set1_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_set1_epi32(__M: __mmask16, __A: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_broadcastq_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcastq_epi64 operation.

        C method prototype:
            _mm512_broadcastq_epi64(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_broadcastq_epi64(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcastq_epi64 operation.

        C method prototype:
            _mm512_mask_broadcastq_epi64(__O: __m512i, __M: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_broadcastq_epi64(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcastq_epi64 operation.

        C method prototype:
            _mm512_maskz_broadcastq_epi64(__M: __mmask8, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_set1_epi64(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _mm512_set1_epi64 operation.

        C method prototype:
            _mm512_set1_epi64(__A: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_set1_epi64(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: int) -> None:
        """
        Executes the _mm512_mask_set1_epi64 operation.

        C method prototype:
            _mm512_mask_set1_epi64(__O: __m512i, __M: __mmask8, __A: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_set1_epi64(self, __result: Ptr, __M: Ptr, __A: int) -> None:
        """
        Executes the _mm512_maskz_set1_epi64 operation.

        C method prototype:
            _mm512_maskz_set1_epi64(__M: __mmask8, __A: long long) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_broadcast_f32x4(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcast_f32x4 operation.

        C method prototype:
            _mm512_broadcast_f32x4(__A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_broadcast_f32x4(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcast_f32x4 operation.

        C method prototype:
            _mm512_mask_broadcast_f32x4(__O: __m512, __M: __mmask16, __A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_broadcast_f32x4(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcast_f32x4 operation.

        C method prototype:
            _mm512_maskz_broadcast_f32x4(__M: __mmask16, __A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_broadcast_i32x4(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcast_i32x4 operation.

        C method prototype:
            _mm512_broadcast_i32x4(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_broadcast_i32x4(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcast_i32x4 operation.

        C method prototype:
            _mm512_mask_broadcast_i32x4(__O: __m512i, __M: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_broadcast_i32x4(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcast_i32x4 operation.

        C method prototype:
            _mm512_maskz_broadcast_i32x4(__M: __mmask16, __A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_broadcast_f64x4(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcast_f64x4 operation.

        C method prototype:
            _mm512_broadcast_f64x4(__A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_broadcast_f64x4(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcast_f64x4 operation.

        C method prototype:
            _mm512_mask_broadcast_f64x4(__O: __m512d, __M: __mmask8, __A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_broadcast_f64x4(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcast_f64x4 operation.

        C method prototype:
            _mm512_maskz_broadcast_f64x4(__M: __mmask8, __A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_broadcast_i64x4(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_broadcast_i64x4 operation.

        C method prototype:
            _mm512_broadcast_i64x4(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_broadcast_i64x4(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_broadcast_i64x4 operation.

        C method prototype:
            _mm512_mask_broadcast_i64x4(__O: __m512i, __M: __mmask8, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_broadcast_i64x4(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_broadcast_i64x4 operation.

        C method prototype:
            _mm512_maskz_broadcast_i64x4(__M: __mmask8, __A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_shuffle_epi32(self, __result: Ptr, __A: Ptr, __mask: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_epi32(__A: __m512i, __mask: _MM_PERM_ENUM) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __mask: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __mask: _MM_PERM_ENUM) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __mask: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_epi32(__U: __mmask16, __A: __m512i, __mask: _MM_PERM_ENUM) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_i64x2(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_i64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_i64x2(__A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_i64x2(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_i64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_i64x2(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_i64x2(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_i64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_i64x2(__U: __mmask8, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_i32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_i32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_i32x4(__A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_i32x4(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_i32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_i32x4(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_i32x4(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_i32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_i32x4(__U: __mmask16, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_f64x2(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_f64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_f64x2(__A: __m512d, __B: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_f64x2(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_f64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_f64x2(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_f64x2(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_f64x2 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_f64x2(__U: __mmask8, __A: __m512d, __B: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_f32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_f32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_f32x4(__A: __m512, __B: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_f32x4(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_f32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_f32x4(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_f32x4(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_f32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_f32x4(__U: __mmask16, __A: __m512, __B: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_rolv_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_rolv_epi32 operation.

        C method prototype:
            _mm512_rolv_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_rolv_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_rolv_epi32 operation.

        C method prototype:
            _mm512_mask_rolv_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_rolv_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_rolv_epi32 operation.

        C method prototype:
            _mm512_maskz_rolv_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_rorv_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_rorv_epi32 operation.

        C method prototype:
            _mm512_rorv_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_rorv_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_rorv_epi32 operation.

        C method prototype:
            _mm512_mask_rorv_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_rorv_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_rorv_epi32 operation.

        C method prototype:
            _mm512_maskz_rorv_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_rolv_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_rolv_epi64 operation.

        C method prototype:
            _mm512_rolv_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_rolv_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_rolv_epi64 operation.

        C method prototype:
            _mm512_mask_rolv_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_rolv_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_rolv_epi64 operation.

        C method prototype:
            _mm512_maskz_rolv_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_rorv_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_rorv_epi64 operation.

        C method prototype:
            _mm512_rorv_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_rorv_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_rorv_epi64 operation.

        C method prototype:
            _mm512_mask_rorv_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_rorv_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_rorv_epi64 operation.

        C method prototype:
            _mm512_maskz_rorv_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtt_roundpd_epi32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtt_roundpd_epi32(__A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtt_roundpd_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtt_roundpd_epi32(__W: __m256i, __U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtt_roundpd_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtt_roundpd_epi32(__U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtt_roundpd_epu32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtt_roundpd_epu32(__A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtt_roundpd_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtt_roundpd_epu32(__W: __m256i, __U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtt_roundpd_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtt_roundpd_epu32(__U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundpd_epi32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundpd_epi32(__A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundpd_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundpd_epi32(__W: __m256i, __U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundpd_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundpd_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundpd_epi32(__U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundpd_epu32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundpd_epu32(__A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundpd_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundpd_epu32(__W: __m256i, __U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundpd_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundpd_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundpd_epu32(__U: __mmask8, __A: __m512d, __R: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtt_roundps_epi32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtt_roundps_epi32(__A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtt_roundps_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtt_roundps_epi32(__W: __m512i, __U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtt_roundps_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtt_roundps_epi32(__U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtt_roundps_epu32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtt_roundps_epu32(__A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtt_roundps_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtt_roundps_epu32(__W: __m512i, __U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtt_roundps_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtt_roundps_epu32(__U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundps_epi32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundps_epi32(__A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundps_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundps_epi32(__W: __m512i, __U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundps_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundps_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundps_epi32(__U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundps_epu32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundps_epu32(__A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundps_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundps_epu32(__W: __m512i, __U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundps_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundps_epu32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundps_epu32(__U: __mmask16, __A: __m512, __R: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtu32_sd(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvtu32_sd operation.

        C method prototype:
            _mm_cvtu32_sd(__A: __m128d, __B: unsigned) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvt_roundu64_sd(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundu64_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundu64_sd(__A: __m128d, __B: unsigned long long, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundi64_sd(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundi64_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundi64_sd(__A: __m128d, __B: long long, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsi64_sd(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsi64_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsi64_sd(__A: __m128d, __B: long long, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundu32_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundu32_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundu32_ss(__A: __m128, __B: unsigned, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsi32_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsi32_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsi32_ss(__A: __m128, __B: int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundi32_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundi32_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundi32_ss(__A: __m128, __B: int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundu64_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundu64_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundu64_ss(__A: __m128, __B: unsigned long long, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsi64_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsi64_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsi64_ss(__A: __m128, __B: long long, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundi64_ss(self, __result: Ptr, __A: Ptr, __B: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundi64_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundi64_ss(__A: __m128, __B: long long, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtepi32_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_epi8 operation.

        C method prototype:
            _mm512_cvtepi32_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtepi32_storeu_epi8(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_epi8 operation.

        C method prototype:
            _mm512_mask_cvtepi32_epi8(__O: __m128i, __M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtepi32_epi8(__M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtsepi32_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi32_epi8 operation.

        C method prototype:
            _mm512_cvtsepi32_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi32_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi32_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtsepi32_storeu_epi8(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi32_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi32_epi8 operation.

        C method prototype:
            _mm512_mask_cvtsepi32_epi8(__O: __m128i, __M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi32_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi32_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtsepi32_epi8(__M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtusepi32_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi32_epi8 operation.

        C method prototype:
            _mm512_cvtusepi32_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi32_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi32_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtusepi32_storeu_epi8(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi32_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi32_epi8 operation.

        C method prototype:
            _mm512_mask_cvtusepi32_epi8(__O: __m128i, __M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi32_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi32_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtusepi32_epi8(__M: __mmask16, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi32_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_epi16 operation.

        C method prototype:
            _mm512_cvtepi32_epi16(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtepi32_storeu_epi16(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_epi16 operation.

        C method prototype:
            _mm512_mask_cvtepi32_epi16(__O: __m256i, __M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtepi32_epi16(__M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtsepi32_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi32_epi16 operation.

        C method prototype:
            _mm512_cvtsepi32_epi16(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi32_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi32_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtsepi32_storeu_epi16(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi32_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi32_epi16 operation.

        C method prototype:
            _mm512_mask_cvtsepi32_epi16(__O: __m256i, __M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi32_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi32_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtsepi32_epi16(__M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtusepi32_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi32_epi16 operation.

        C method prototype:
            _mm512_cvtusepi32_epi16(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi32_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi32_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtusepi32_storeu_epi16(__P: void *, __M: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi32_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi32_epi16 operation.

        C method prototype:
            _mm512_mask_cvtusepi32_epi16(__O: __m256i, __M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi32_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi32_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtusepi32_epi16(__M: __mmask16, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi64_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi64_epi32 operation.

        C method prototype:
            _mm512_cvtepi64_epi32(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_storeu_epi32(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_storeu_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepi64_storeu_epi32(__P: void*, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_epi32 operation.

        C method prototype:
            _mm512_mask_cvtepi64_epi32(__O: __m256i, __M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi64_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi64_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtepi64_epi32(__M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtsepi64_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi64_epi32 operation.

        C method prototype:
            _mm512_cvtsepi64_epi32(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_storeu_epi32(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_storeu_epi32 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_storeu_epi32(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_epi32 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_epi32(__O: __m256i, __M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi64_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi64_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtsepi64_epi32(__M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtusepi64_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi64_epi32 operation.

        C method prototype:
            _mm512_cvtusepi64_epi32(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_storeu_epi32(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_storeu_epi32 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_storeu_epi32(__P: void*, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_epi32(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_epi32 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_epi32(__O: __m256i, __M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi64_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi64_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtusepi64_epi32(__M: __mmask8, __A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi64_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi64_epi16 operation.

        C method prototype:
            _mm512_cvtepi64_epi16(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtepi64_storeu_epi16(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_epi16 operation.

        C method prototype:
            _mm512_mask_cvtepi64_epi16(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi64_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi64_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtepi64_epi16(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtsepi64_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi64_epi16 operation.

        C method prototype:
            _mm512_cvtsepi64_epi16(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_storeu_epi16(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_epi16 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_epi16(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi64_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi64_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtsepi64_epi16(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtusepi64_epi16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi64_epi16 operation.

        C method prototype:
            _mm512_cvtusepi64_epi16(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_storeu_epi16(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_storeu_epi16 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_storeu_epi16(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_epi16(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_epi16 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_epi16(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi64_epi16(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi64_epi16 operation.

        C method prototype:
            _mm512_maskz_cvtusepi64_epi16(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi64_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi64_epi8 operation.

        C method prototype:
            _mm512_cvtepi64_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtepi64_storeu_epi8(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi64_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi64_epi8 operation.

        C method prototype:
            _mm512_mask_cvtepi64_epi8(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi64_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi64_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtepi64_epi8(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtsepi64_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsepi64_epi8 operation.

        C method prototype:
            _mm512_cvtsepi64_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_storeu_epi8(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtsepi64_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtsepi64_epi8 operation.

        C method prototype:
            _mm512_mask_cvtsepi64_epi8(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtsepi64_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtsepi64_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtsepi64_epi8(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtusepi64_epi8(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtusepi64_epi8 operation.

        C method prototype:
            _mm512_cvtusepi64_epi8(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_storeu_epi8(self, __P: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_storeu_epi8 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_storeu_epi8(__P: void *, __M: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtusepi64_epi8(self, __result: Ptr, __O: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtusepi64_epi8 operation.

        C method prototype:
            _mm512_mask_cvtusepi64_epi8(__O: __m128i, __M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtusepi64_epi8(self, __result: Ptr, __M: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtusepi64_epi8 operation.

        C method prototype:
            _mm512_maskz_cvtusepi64_epi8(__M: __mmask8, __A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi32_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_pd operation.

        C method prototype:
            _mm512_cvtepi32_pd(__A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_pd operation.

        C method prototype:
            _mm512_mask_cvtepi32_pd(__W: __m512d, __U: __mmask8, __A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_pd operation.

        C method prototype:
            _mm512_maskz_cvtepi32_pd(__U: __mmask8, __A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepu32_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu32_pd operation.

        C method prototype:
            _mm512_cvtepu32_pd(__A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu32_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu32_pd operation.

        C method prototype:
            _mm512_mask_cvtepu32_pd(__W: __m512d, __U: __mmask8, __A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu32_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu32_pd operation.

        C method prototype:
            _mm512_maskz_cvtepu32_pd(__U: __mmask8, __A: __m256i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvt_roundepi32_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundepi32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundepi32_ps(__A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundepi32_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundepi32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundepi32_ps(__W: __m512, __U: __mmask16, __A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundepi32_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundepi32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundepi32_ps(__U: __mmask16, __A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundepu32_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundepu32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundepu32_ps(__A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundepu32_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundepu32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundepu32_ps(__W: __m512, __U: __mmask16, __A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundepu32_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundepu32_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundepu32_ps(__U: __mmask16, __A: __m512i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_extractf64x4_pd(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_extractf64x4_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_extractf64x4_pd(__A: __m512d, __imm: const int) -> __m256d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_extractf64x4_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_extractf64x4_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_extractf64x4_pd(__W: __m256d, __U: __mmask8, __A: __m512d, __imm: const int) -> __m256d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_extractf64x4_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_extractf64x4_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_extractf64x4_pd(__U: __mmask8, __A: __m512d, __imm: const int) -> __m256d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_extractf32x4_ps(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_extractf32x4_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_extractf32x4_ps(__A: __m512, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_extractf32x4_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_extractf32x4_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_extractf32x4_ps(__W: __m128, __U: __mmask8, __A: __m512, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_extractf32x4_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_extractf32x4_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_extractf32x4_ps(__U: __mmask8, __A: __m512, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_extracti64x4_epi64(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_extracti64x4_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_extracti64x4_epi64(__A: __m512i, __imm: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_extracti64x4_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_extracti64x4_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_extracti64x4_epi64(__W: __m256i, __U: __mmask8, __A: __m512i, __imm: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_extracti64x4_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_extracti64x4_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_extracti64x4_epi64(__U: __mmask8, __A: __m512i, __imm: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_extracti32x4_epi32(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_extracti32x4_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_extracti32x4_epi32(__A: __m512i, __imm: const int) -> __m128i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_extracti32x4_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_extracti32x4_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_extracti32x4_epi32(__W: __m128i, __U: __mmask8, __A: __m512i, __imm: const int) -> __m128i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_extracti32x4_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_extracti32x4_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_extracti32x4_epi32(__U: __mmask8, __A: __m512i, __imm: const int) -> __m128i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_inserti32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_inserti32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_inserti32x4(__A: __m512i, __B: __m128i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_insertf32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_insertf32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_insertf32x4(__A: __m512, __B: __m128, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_inserti64x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_inserti64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_inserti64x4(__A: __m512i, __B: __m256i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_inserti64x4(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_inserti64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_inserti64x4(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m256i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_inserti64x4(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_inserti64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_inserti64x4(__U: __mmask8, __A: __m512i, __B: __m256i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_insertf64x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_insertf64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_insertf64x4(__A: __m512d, __B: __m256d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_insertf64x4(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_insertf64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_insertf64x4(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m256d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_insertf64x4(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_insertf64x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_insertf64x4(__U: __mmask8, __A: __m512d, __B: __m256d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_loadu_pd(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_pd operation.

        C method prototype:
            _mm512_loadu_pd(__P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_loadu_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_loadu_pd operation.

        C method prototype:
            _mm512_mask_loadu_pd(__W: __m512d, __U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_loadu_pd(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_loadu_pd operation.

        C method prototype:
            _mm512_maskz_loadu_pd(__U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_storeu_pd(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_pd operation.

        C method prototype:
            _mm512_storeu_pd(__P: void *, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_storeu_pd(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_storeu_pd operation.

        C method prototype:
            _mm512_mask_storeu_pd(__P: void *, __U: __mmask8, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_loadu_ps(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_ps operation.

        C method prototype:
            _mm512_loadu_ps(__P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_loadu_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_loadu_ps operation.

        C method prototype:
            _mm512_mask_loadu_ps(__W: __m512, __U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_loadu_ps(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_loadu_ps operation.

        C method prototype:
            _mm512_maskz_loadu_ps(__U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_storeu_ps(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_ps operation.

        C method prototype:
            _mm512_storeu_ps(__P: void *, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_storeu_ps(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_storeu_ps operation.

        C method prototype:
            _mm512_mask_storeu_ps(__P: void *, __U: __mmask16, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_load_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm_mask_load_ss operation.

        C method prototype:
            _mm_mask_load_ss(__W: __m128, __U: __mmask8, __P: const float *) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_load_ss(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm_maskz_load_ss operation.

        C method prototype:
            _mm_maskz_load_ss(__U: __mmask8, __P: const float *) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_load_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm_mask_load_sd operation.

        C method prototype:
            _mm_mask_load_sd(__W: __m128d, __U: __mmask8, __P: const double *) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_load_sd(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm_maskz_load_sd operation.

        C method prototype:
            _mm_maskz_load_sd(__U: __mmask8, __P: const double *) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_move_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_move_ss operation.

        C method prototype:
            _mm_mask_move_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_move_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_move_ss operation.

        C method prototype:
            _mm_maskz_move_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_move_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_move_sd operation.

        C method prototype:
            _mm_mask_move_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_move_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_move_sd operation.

        C method prototype:
            _mm_maskz_move_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_store_ss(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_mask_store_ss operation.

        C method prototype:
            _mm_mask_store_ss(__P: float *, __U: __mmask8, __A: __m128) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_store_sd(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_mask_store_sd operation.

        C method prototype:
            _mm_mask_store_sd(__P: double *, __U: __mmask8, __A: __m128d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_loadu_epi64(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_epi64 operation.

        C method prototype:
            _mm512_loadu_epi64(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_loadu_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_loadu_epi64 operation.

        C method prototype:
            _mm512_mask_loadu_epi64(__W: __m512i, __U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_loadu_epi64(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_loadu_epi64 operation.

        C method prototype:
            _mm512_maskz_loadu_epi64(__U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_storeu_epi64(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_epi64 operation.

        C method prototype:
            _mm512_storeu_epi64(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_storeu_epi64(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_storeu_epi64 operation.

        C method prototype:
            _mm512_mask_storeu_epi64(__P: void *, __U: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_loadu_si512(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_si512 operation.

        C method prototype:
            _mm512_loadu_si512(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_loadu_epi32(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_loadu_epi32 operation.

        C method prototype:
            _mm512_loadu_epi32(__P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_loadu_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_loadu_epi32 operation.

        C method prototype:
            _mm512_mask_loadu_epi32(__W: __m512i, __U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_loadu_epi32(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_loadu_epi32 operation.

        C method prototype:
            _mm512_maskz_loadu_epi32(__U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_storeu_si512(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_si512 operation.

        C method prototype:
            _mm512_storeu_si512(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_storeu_epi32(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_storeu_epi32 operation.

        C method prototype:
            _mm512_storeu_epi32(__P: void *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_storeu_epi32(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_storeu_epi32 operation.

        C method prototype:
            _mm512_mask_storeu_epi32(__P: void *, __U: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutevar_pd(self, __result: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_permutevar_pd operation.

        C method prototype:
            _mm512_permutevar_pd(__A: __m512d, __C: __m512i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutevar_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_permutevar_pd operation.

        C method prototype:
            _mm512_mask_permutevar_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __C: __m512i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_permutevar_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutevar_pd operation.

        C method prototype:
            _mm512_maskz_permutevar_pd(__U: __mmask8, __A: __m512d, __C: __m512i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutevar_ps(self, __result: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_permutevar_ps operation.

        C method prototype:
            _mm512_permutevar_ps(__A: __m512, __C: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutevar_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_permutevar_ps operation.

        C method prototype:
            _mm512_mask_permutevar_ps(__W: __m512, __U: __mmask16, __A: __m512, __C: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_permutevar_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutevar_ps operation.

        C method prototype:
            _mm512_maskz_permutevar_ps(__U: __mmask16, __A: __m512, __C: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutex2var_epi64(self, __result: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_permutex2var_epi64 operation.

        C method prototype:
            _mm512_permutex2var_epi64(__A: __m512i, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutex2var_epi64(self, __result: Ptr, __A: Ptr, __U: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_permutex2var_epi64 operation.

        C method prototype:
            _mm512_mask_permutex2var_epi64(__A: __m512i, __U: __mmask8, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask2_permutex2var_epi64(self, __result: Ptr, __A: Ptr, __I: Ptr, __U: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask2_permutex2var_epi64 operation.

        C method prototype:
            _mm512_mask2_permutex2var_epi64(__A: __m512i, __I: __m512i, __U: __mmask8, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_permutex2var_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutex2var_epi64 operation.

        C method prototype:
            _mm512_maskz_permutex2var_epi64(__U: __mmask8, __A: __m512i, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutex2var_epi32(self, __result: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_permutex2var_epi32 operation.

        C method prototype:
            _mm512_permutex2var_epi32(__A: __m512i, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutex2var_epi32(self, __result: Ptr, __A: Ptr, __U: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_permutex2var_epi32 operation.

        C method prototype:
            _mm512_mask_permutex2var_epi32(__A: __m512i, __U: __mmask16, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask2_permutex2var_epi32(self, __result: Ptr, __A: Ptr, __I: Ptr, __U: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask2_permutex2var_epi32 operation.

        C method prototype:
            _mm512_mask2_permutex2var_epi32(__A: __m512i, __I: __m512i, __U: __mmask16, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_permutex2var_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutex2var_epi32 operation.

        C method prototype:
            _mm512_maskz_permutex2var_epi32(__U: __mmask16, __A: __m512i, __I: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutex2var_pd(self, __result: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_permutex2var_pd operation.

        C method prototype:
            _mm512_permutex2var_pd(__A: __m512d, __I: __m512i, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutex2var_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_permutex2var_pd operation.

        C method prototype:
            _mm512_mask_permutex2var_pd(__A: __m512d, __U: __mmask8, __I: __m512i, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask2_permutex2var_pd(self, __result: Ptr, __A: Ptr, __I: Ptr, __U: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask2_permutex2var_pd operation.

        C method prototype:
            _mm512_mask2_permutex2var_pd(__A: __m512d, __I: __m512i, __U: __mmask8, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_permutex2var_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutex2var_pd operation.

        C method prototype:
            _mm512_maskz_permutex2var_pd(__U: __mmask8, __A: __m512d, __I: __m512i, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutex2var_ps(self, __result: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_permutex2var_ps operation.

        C method prototype:
            _mm512_permutex2var_ps(__A: __m512, __I: __m512i, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutex2var_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_permutex2var_ps operation.

        C method prototype:
            _mm512_mask_permutex2var_ps(__A: __m512, __U: __mmask16, __I: __m512i, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask2_permutex2var_ps(self, __result: Ptr, __A: Ptr, __I: Ptr, __U: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask2_permutex2var_ps operation.

        C method prototype:
            _mm512_mask2_permutex2var_ps(__A: __m512, __I: __m512i, __U: __mmask16, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_permutex2var_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __I: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutex2var_ps operation.

        C method prototype:
            _mm512_maskz_permutex2var_ps(__U: __mmask16, __A: __m512, __I: __m512i, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permute_pd(self, __result: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_permute_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_permute_pd(__X: __m512d, __C: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_permute_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_permute_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_permute_pd(__W: __m512d, __U: __mmask8, __X: __m512d, __C: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permute_pd(self, __result: Ptr, __U: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_permute_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_permute_pd(__U: __mmask8, __X: __m512d, __C: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_permute_ps(self, __result: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_permute_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_permute_ps(__X: __m512, __C: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_permute_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_permute_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_permute_ps(__W: __m512, __U: __mmask16, __X: __m512, __C: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permute_ps(self, __result: Ptr, __U: Ptr, __X: Ptr, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_permute_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_permute_ps(__U: __mmask16, __X: __m512, __C: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_permutex_epi64(self, __result: Ptr, __X: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_permutex_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_permutex_epi64(__X: __m512i, __I: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_permutex_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_permutex_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_permutex_epi64(__W: __m512i, __M: __mmask8, __X: __m512i, __I: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permutex_epi64(self, __result: Ptr, __M: Ptr, __X: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_permutex_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_permutex_epi64(__M: __mmask8, __X: __m512i, __I: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_permutex_pd(self, __result: Ptr, __X: Ptr, __M: int) -> RaisesNotImplementedError:
        """
        _mm512_permutex_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_permutex_pd(__X: __m512d, __M: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_permutex_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __M: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_permutex_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_permutex_pd(__W: __m512d, __U: __mmask8, __X: __m512d, __M: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permutex_pd(self, __result: Ptr, __U: Ptr, __X: Ptr, __M: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_permutex_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_permutex_pd(__U: __mmask8, __X: __m512d, __M: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_permutexvar_epi64(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutexvar_epi64 operation.

        C method prototype:
            _mm512_maskz_permutexvar_epi64(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutexvar_epi64(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_permutexvar_epi64 operation.

        C method prototype:
            _mm512_permutexvar_epi64(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutexvar_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_permutexvar_epi64 operation.

        C method prototype:
            _mm512_mask_permutexvar_epi64(__W: __m512i, __M: __mmask8, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_permutexvar_epi32(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutexvar_epi32 operation.

        C method prototype:
            _mm512_maskz_permutexvar_epi32(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutexvar_epi32(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_permutexvar_epi32 operation.

        C method prototype:
            _mm512_permutexvar_epi32(__X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutexvar_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_permutexvar_epi32 operation.

        C method prototype:
            _mm512_mask_permutexvar_epi32(__W: __m512i, __M: __mmask16, __X: __m512i, __Y: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutexvar_pd(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_permutexvar_pd operation.

        C method prototype:
            _mm512_permutexvar_pd(__X: __m512i, __Y: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutexvar_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_permutexvar_pd operation.

        C method prototype:
            _mm512_mask_permutexvar_pd(__W: __m512d, __U: __mmask8, __X: __m512i, __Y: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_permutexvar_pd(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutexvar_pd operation.

        C method prototype:
            _mm512_maskz_permutexvar_pd(__U: __mmask8, __X: __m512i, __Y: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_permutexvar_ps(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_permutexvar_ps operation.

        C method prototype:
            _mm512_permutexvar_ps(__X: __m512i, __Y: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_permutexvar_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_permutexvar_ps operation.

        C method prototype:
            _mm512_mask_permutexvar_ps(__W: __m512, __U: __mmask16, __X: __m512i, __Y: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_permutexvar_ps(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_maskz_permutexvar_ps operation.

        C method prototype:
            _mm512_maskz_permutexvar_ps(__U: __mmask16, __X: __m512i, __Y: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_shuffle_ps(self, __result: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_ps(__M: __m512, __V: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_ps(__W: __m512, __U: __mmask16, __M: __m512, __V: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_ps(self, __result: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_ps(__U: __mmask16, __M: __m512, __V: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_shuffle_pd(self, __result: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_shuffle_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_shuffle_pd(__M: __m512d, __V: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_shuffle_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_shuffle_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_shuffle_pd(__W: __m512d, __U: __mmask8, __M: __m512d, __V: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_shuffle_pd(self, __result: Ptr, __U: Ptr, __M: Ptr, __V: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_shuffle_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_shuffle_pd(__U: __mmask8, __M: __m512d, __V: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fixupimm_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fixupimm_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fixupimm_round_pd(__A: __m512d, __B: __m512d, __C: __m512i, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fixupimm_round_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fixupimm_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fixupimm_round_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512i, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fixupimm_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fixupimm_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fixupimm_round_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512i, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fixupimm_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_fixupimm_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fixupimm_round_ps(__A: __m512, __B: __m512, __C: __m512i, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fixupimm_round_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fixupimm_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fixupimm_round_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512i, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fixupimm_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fixupimm_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fixupimm_round_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512i, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fixupimm_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fixupimm_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fixupimm_round_sd(__A: __m128d, __B: __m128d, __C: __m128i, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fixupimm_round_sd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fixupimm_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fixupimm_round_sd(__A: __m128d, __U: __mmask8, __B: __m128d, __C: __m128i, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fixupimm_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fixupimm_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fixupimm_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __C: __m128i, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fixupimm_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fixupimm_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fixupimm_round_ss(__A: __m128, __B: __m128, __C: __m128i, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fixupimm_round_ss(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fixupimm_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fixupimm_round_ss(__A: __m128, __U: __mmask8, __B: __m128, __C: __m128i, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fixupimm_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fixupimm_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fixupimm_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __C: __m128i, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_movehdup_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_movehdup_ps operation.

        C method prototype:
            _mm512_movehdup_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_movehdup_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_movehdup_ps operation.

        C method prototype:
            _mm512_mask_movehdup_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_movehdup_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_movehdup_ps operation.

        C method prototype:
            _mm512_maskz_movehdup_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_moveldup_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_moveldup_ps operation.

        C method prototype:
            _mm512_moveldup_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_moveldup_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_moveldup_ps operation.

        C method prototype:
            _mm512_mask_moveldup_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_moveldup_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_moveldup_ps operation.

        C method prototype:
            _mm512_maskz_moveldup_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_or_si512(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_or_si512 operation.

        C method prototype:
            _mm512_or_si512(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_or_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_or_epi32 operation.

        C method prototype:
            _mm512_or_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_or_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_or_epi32 operation.

        C method prototype:
            _mm512_mask_or_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_or_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_or_epi32 operation.

        C method prototype:
            _mm512_maskz_or_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_or_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_or_epi64 operation.

        C method prototype:
            _mm512_or_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_or_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_or_epi64 operation.

        C method prototype:
            _mm512_mask_or_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_or_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_or_epi64 operation.

        C method prototype:
            _mm512_maskz_or_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_xor_si512(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_xor_si512 operation.

        C method prototype:
            _mm512_xor_si512(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_xor_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_xor_epi32 operation.

        C method prototype:
            _mm512_xor_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_xor_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_xor_epi32 operation.

        C method prototype:
            _mm512_mask_xor_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_xor_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_xor_epi32 operation.

        C method prototype:
            _mm512_maskz_xor_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_xor_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_xor_epi64 operation.

        C method prototype:
            _mm512_xor_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_xor_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_xor_epi64 operation.

        C method prototype:
            _mm512_mask_xor_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_xor_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_xor_epi64 operation.

        C method prototype:
            _mm512_maskz_xor_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_rol_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_rol_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_rol_epi32(__A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_rol_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_rol_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_rol_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_rol_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_rol_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_rol_epi32(__U: __mmask16, __A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_ror_epi32(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_ror_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_ror_epi32(__A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_ror_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_ror_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_ror_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_ror_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_ror_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_ror_epi32(__U: __mmask16, __A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_rol_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_rol_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_rol_epi64(__A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_rol_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_rol_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_rol_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_rol_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_rol_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_rol_epi64(__U: __mmask8, __A: __m512i, __B: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_ror_epi64(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_ror_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_ror_epi64(__A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_ror_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_ror_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_ror_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_ror_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_ror_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_ror_epi64(__U: __mmask8, __A: __m512i, __B: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_and_si512(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_and_si512 operation.

        C method prototype:
            _mm512_and_si512(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_and_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_and_epi32 operation.

        C method prototype:
            _mm512_and_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_and_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_and_epi32 operation.

        C method prototype:
            _mm512_mask_and_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_and_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_and_epi32 operation.

        C method prototype:
            _mm512_maskz_and_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_and_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_and_epi64 operation.

        C method prototype:
            _mm512_and_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_and_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_and_epi64 operation.

        C method prototype:
            _mm512_mask_and_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_and_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_and_epi64 operation.

        C method prototype:
            _mm512_maskz_and_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_andnot_si512(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_andnot_si512 operation.

        C method prototype:
            _mm512_andnot_si512(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_andnot_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_andnot_epi32 operation.

        C method prototype:
            _mm512_andnot_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_andnot_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_andnot_epi32 operation.

        C method prototype:
            _mm512_mask_andnot_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_andnot_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_andnot_epi32 operation.

        C method prototype:
            _mm512_maskz_andnot_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_andnot_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_andnot_epi64 operation.

        C method prototype:
            _mm512_andnot_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_andnot_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_andnot_epi64 operation.

        C method prototype:
            _mm512_mask_andnot_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_andnot_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_andnot_epi64 operation.

        C method prototype:
            _mm512_maskz_andnot_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_test_epi32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_test_epi32_mask operation.

        C method prototype:
            _mm512_test_epi32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_test_epi32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_test_epi32_mask operation.

        C method prototype:
            _mm512_mask_test_epi32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_test_epi64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_test_epi64_mask operation.

        C method prototype:
            _mm512_test_epi64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_test_epi64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_test_epi64_mask operation.

        C method prototype:
            _mm512_mask_test_epi64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_testn_epi32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_testn_epi32_mask operation.

        C method prototype:
            _mm512_testn_epi32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_testn_epi32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_testn_epi32_mask operation.

        C method prototype:
            _mm512_mask_testn_epi32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_testn_epi64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_testn_epi64_mask operation.

        C method prototype:
            _mm512_testn_epi64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_testn_epi64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_testn_epi64_mask operation.

        C method prototype:
            _mm512_mask_testn_epi64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_abs_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_abs_ps operation.

        C method prototype:
            _mm512_abs_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_abs_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_abs_ps operation.

        C method prototype:
            _mm512_mask_abs_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_abs_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_abs_pd operation.

        C method prototype:
            _mm512_abs_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_abs_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_abs_pd operation.

        C method prototype:
            _mm512_mask_abs_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_unpackhi_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpackhi_epi32 operation.

        C method prototype:
            _mm512_unpackhi_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_unpackhi_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpackhi_epi32 operation.

        C method prototype:
            _mm512_mask_unpackhi_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_unpackhi_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpackhi_epi32 operation.

        C method prototype:
            _mm512_maskz_unpackhi_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_unpackhi_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpackhi_epi64 operation.

        C method prototype:
            _mm512_unpackhi_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_unpackhi_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpackhi_epi64 operation.

        C method prototype:
            _mm512_mask_unpackhi_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_unpackhi_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpackhi_epi64 operation.

        C method prototype:
            _mm512_maskz_unpackhi_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_unpacklo_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpacklo_epi32 operation.

        C method prototype:
            _mm512_unpacklo_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_unpacklo_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpacklo_epi32 operation.

        C method prototype:
            _mm512_mask_unpacklo_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_unpacklo_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpacklo_epi32 operation.

        C method prototype:
            _mm512_maskz_unpacklo_epi32(__U: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_unpacklo_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpacklo_epi64 operation.

        C method prototype:
            _mm512_unpacklo_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_unpacklo_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpacklo_epi64 operation.

        C method prototype:
            _mm512_mask_unpacklo_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_unpacklo_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpacklo_epi64 operation.

        C method prototype:
            _mm512_maskz_unpacklo_epi64(__U: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvt_roundss_u64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_u64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_u64(__A: __m128, __R: const int) -> unsigned long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_si64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_si64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_si64(__A: __m128, __R: const int) -> long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_i64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_i64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_i64(__A: __m128, __R: const int) -> long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_u64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_u64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_u64(__A: __m128, __R: const int) -> unsigned long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_i64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_i64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_i64(__A: __m128, __R: const int) -> long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_si64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_si64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_si64(__A: __m128, __R: const int) -> long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_u32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_u32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_u32(__A: __m128, __R: const int) -> unsigned

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_si32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_si32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_si32(__A: __m128, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_i32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_i32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_i32(__A: __m128, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_u32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_u32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_u32(__A: __m128, __R: const int) -> unsigned

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_i32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_i32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_i32(__A: __m128, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundss_si32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundss_si32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundss_si32(__A: __m128, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_u64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_u64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_u64(__A: __m128d, __R: const int) -> unsigned long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_si64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_si64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_si64(__A: __m128d, __R: const int) -> long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_i64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_i64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_i64(__A: __m128d, __R: const int) -> long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_u64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_u64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_u64(__A: __m128d, __R: const int) -> unsigned long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_si64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_si64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_si64(__A: __m128d, __R: const int) -> long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_i64(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_i64 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_i64(__A: __m128d, __R: const int) -> long long

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_u32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_u32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_u32(__A: __m128d, __R: const int) -> unsigned

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_si32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_si32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_si32(__A: __m128d, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_i32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_i32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_i32(__A: __m128d, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_u32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_u32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_u32(__A: __m128d, __R: const int) -> unsigned

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_i32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_i32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_i32(__A: __m128d, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtt_roundsd_si32(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvtt_roundsd_si32 is not supported in PyFastUtil.

        C method prototype:
            _mm_cvtt_roundsd_si32(__A: __m128d, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_movedup_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_movedup_pd operation.

        C method prototype:
            _mm512_movedup_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_movedup_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_movedup_pd operation.

        C method prototype:
            _mm512_mask_movedup_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_movedup_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_movedup_pd operation.

        C method prototype:
            _mm512_maskz_movedup_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_unpacklo_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpacklo_pd operation.

        C method prototype:
            _mm512_unpacklo_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_unpacklo_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpacklo_pd operation.

        C method prototype:
            _mm512_mask_unpacklo_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_unpacklo_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpacklo_pd operation.

        C method prototype:
            _mm512_maskz_unpacklo_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_unpackhi_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpackhi_pd operation.

        C method prototype:
            _mm512_unpackhi_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_unpackhi_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpackhi_pd operation.

        C method prototype:
            _mm512_mask_unpackhi_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_unpackhi_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpackhi_pd operation.

        C method prototype:
            _mm512_maskz_unpackhi_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_unpackhi_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpackhi_ps operation.

        C method prototype:
            _mm512_unpackhi_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_unpackhi_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpackhi_ps operation.

        C method prototype:
            _mm512_mask_unpackhi_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_unpackhi_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpackhi_ps operation.

        C method prototype:
            _mm512_maskz_unpackhi_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvt_roundps_pd(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundps_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundps_pd(__A: __m256, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundps_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundps_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundps_pd(__W: __m512d, __U: __mmask8, __A: __m256, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundps_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundps_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundps_pd(__U: __mmask8, __A: __m256, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundph_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundph_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundph_ps(__A: __m256i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundph_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundph_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundph_ps(__W: __m512, __U: __mmask16, __A: __m256i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundph_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundph_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundph_ps(__U: __mmask16, __A: __m256i, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundps_ph(self, __result: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundps_ph(__A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvtps_ph(self, __result: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_cvtps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvtps_ph(__A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundps_ph(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundps_ph(__U: __m256i, __W: __mmask16, __A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvtps_ph(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvtps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvtps_ph(__U: __m256i, __W: __mmask16, __A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundps_ph(self, __result: Ptr, __W: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundps_ph(__W: __mmask16, __A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvtps_ph(self, __result: Ptr, __W: Ptr, __A: Ptr, __I: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvtps_ph is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvtps_ph(__W: __mmask16, __A: __m512, __I: const int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cvt_roundpd_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cvt_roundpd_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_cvt_roundpd_ps(__A: __m512d, __R: const int) -> __m256

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cvt_roundpd_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cvt_roundpd_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cvt_roundpd_ps(__W: __m256, __U: __mmask8, __A: __m512d, __R: const int) -> __m256

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_cvt_roundpd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_cvt_roundpd_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_cvt_roundpd_ps(__U: __mmask8, __A: __m512d, __R: const int) -> __m256

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundsd_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundsd_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundsd_ss(__A: __m128, __B: __m128d, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cvt_roundsd_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cvt_roundsd_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cvt_roundsd_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128d, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_cvt_roundsd_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_cvt_roundsd_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_cvt_roundsd_ss(__U: __mmask8, __A: __m128, __B: __m128d, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvt_roundss_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cvt_roundss_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvt_roundss_sd(__A: __m128d, __B: __m128, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cvt_roundss_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cvt_roundss_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cvt_roundss_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_cvt_roundss_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_cvt_roundss_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_cvt_roundss_sd(__U: __mmask8, __A: __m128d, __B: __m128, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_stream_si512(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_stream_si512 operation.

        C method prototype:
            _mm512_stream_si512(__P: __m512i *, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_stream_ps(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_stream_ps operation.

        C method prototype:
            _mm512_stream_ps(__P: float *, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_stream_pd(self, __P: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_stream_pd operation.

        C method prototype:
            _mm512_stream_pd(__P: double *, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_stream_load_si512(self, __result: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_stream_load_si512 operation.

        C method prototype:
            _mm512_stream_load_si512(__P: void *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_getexp_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_getexp_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_getexp_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getexp_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getexp_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getexp_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getexp_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getexp_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getexp_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getexp_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_getexp_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_getexp_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getexp_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getexp_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getexp_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getexp_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getexp_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getexp_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getexp_round_ps(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_getexp_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_getexp_round_ps(__A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getexp_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getexp_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getexp_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getexp_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getexp_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getexp_round_ps(__U: __mmask16, __A: __m512, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getexp_round_pd(self, __result: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_getexp_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_getexp_round_pd(__A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getexp_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getexp_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getexp_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getexp_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getexp_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getexp_round_pd(__U: __mmask8, __A: __m512d, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getmant_round_pd(self, __result: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_getmant_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_getmant_round_pd(__A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getmant_round_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getmant_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getmant_round_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getmant_round_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getmant_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getmant_round_pd(__U: __mmask8, __A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getmant_round_ps(self, __result: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_getmant_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_getmant_round_ps(__A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getmant_round_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getmant_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getmant_round_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getmant_round_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getmant_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getmant_round_ps(__U: __mmask16, __A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getmant_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_getmant_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_getmant_round_sd(__A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getmant_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getmant_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getmant_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getmant_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getmant_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getmant_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getmant_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_getmant_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_getmant_round_ss(__A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getmant_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getmant_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getmant_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getmant_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getmant_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getmant_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_roundscale_round_ps(self, __result: Ptr, __A: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_roundscale_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_roundscale_round_ps(__A: __m512, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_roundscale_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_roundscale_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_roundscale_round_ps(__A: __m512, __B: __mmask16, __C: __m512, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_roundscale_round_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_roundscale_round_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_roundscale_round_ps(__A: __mmask16, __B: __m512, __imm: const int, __R: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_roundscale_round_pd(self, __result: Ptr, __A: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_roundscale_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_roundscale_round_pd(__A: __m512d, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_roundscale_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_roundscale_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_roundscale_round_pd(__A: __m512d, __B: __mmask8, __C: __m512d, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_roundscale_round_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_roundscale_round_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_roundscale_round_pd(__A: __mmask8, __B: __m512d, __imm: const int, __R: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_roundscale_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_roundscale_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_roundscale_round_ss(__A: __m128, __B: __m128, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_roundscale_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_roundscale_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_roundscale_round_ss(__A: __m128, __B: __mmask8, __C: __m128, __D: __m128, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_roundscale_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_roundscale_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_roundscale_round_ss(__A: __mmask8, __B: __m128, __C: __m128, __imm: const int, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_roundscale_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_roundscale_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_roundscale_round_sd(__A: __m128d, __B: __m128d, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_roundscale_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_roundscale_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_roundscale_round_sd(__A: __m128d, __B: __mmask8, __C: __m128d, __D: __m128d, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_roundscale_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_roundscale_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_roundscale_round_sd(__A: __mmask8, __B: __m128d, __C: __m128d, __imm: const int, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_floor_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_floor_ps operation.

        C method prototype:
            _mm512_floor_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_floor_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_floor_pd operation.

        C method prototype:
            _mm512_floor_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_ceil_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_ceil_ps operation.

        C method prototype:
            _mm512_ceil_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_ceil_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_ceil_pd operation.

        C method prototype:
            _mm512_ceil_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_floor_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_floor_ps operation.

        C method prototype:
            _mm512_mask_floor_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_floor_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_floor_pd operation.

        C method prototype:
            _mm512_mask_floor_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_ceil_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_ceil_ps operation.

        C method prototype:
            _mm512_mask_ceil_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_ceil_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_ceil_pd operation.

        C method prototype:
            _mm512_mask_ceil_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_alignr_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_alignr_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_alignr_epi32(__A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_alignr_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_alignr_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_alignr_epi32(__W: __m512i, __U: __mmask16, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_alignr_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_alignr_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_alignr_epi32(__U: __mmask16, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_alignr_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_alignr_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_alignr_epi64(__A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_alignr_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_alignr_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_alignr_epi64(__W: __m512i, __U: __mmask8, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_alignr_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_alignr_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_alignr_epi64(__U: __mmask8, __A: __m512i, __B: __m512i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmpeq_epi32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_epi32_mask operation.

        C method prototype:
            _mm512_cmpeq_epi32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_epi32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_epi32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_epi64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_epi64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpeq_epi64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_epi64_mask operation.

        C method prototype:
            _mm512_cmpeq_epi64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpgt_epi32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpgt_epi32_mask operation.

        C method prototype:
            _mm512_cmpgt_epi32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpgt_epi32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpgt_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmpgt_epi32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpgt_epi64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpgt_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmpgt_epi64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpgt_epi64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpgt_epi64_mask operation.

        C method prototype:
            _mm512_cmpgt_epi64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpge_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpge_epi32_mask operation.

        C method prototype:
            _mm512_cmpge_epi32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpge_epi32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpge_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmpge_epi32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpge_epu32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpge_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmpge_epu32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpge_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpge_epu32_mask operation.

        C method prototype:
            _mm512_cmpge_epu32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpge_epi64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpge_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmpge_epi64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpge_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpge_epi64_mask operation.

        C method prototype:
            _mm512_cmpge_epi64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpge_epu64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpge_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmpge_epu64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpge_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpge_epu64_mask operation.

        C method prototype:
            _mm512_cmpge_epu64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmple_epi32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmple_epi32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmple_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_epi32_mask operation.

        C method prototype:
            _mm512_cmple_epi32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmple_epu32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmple_epu32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmple_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_epu32_mask operation.

        C method prototype:
            _mm512_cmple_epu32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmple_epi64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmple_epi64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmple_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_epi64_mask operation.

        C method prototype:
            _mm512_cmple_epi64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmple_epu64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmple_epu64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmple_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_epu64_mask operation.

        C method prototype:
            _mm512_cmple_epu64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_epi32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmplt_epi32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmplt_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_epi32_mask operation.

        C method prototype:
            _mm512_cmplt_epi32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_epu32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmplt_epu32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmplt_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_epu32_mask operation.

        C method prototype:
            _mm512_cmplt_epu32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_epi64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmplt_epi64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmplt_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_epi64_mask operation.

        C method prototype:
            _mm512_cmplt_epi64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_epu64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmplt_epu64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmplt_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_epu64_mask operation.

        C method prototype:
            _mm512_cmplt_epu64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpneq_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_epi32_mask operation.

        C method prototype:
            _mm512_cmpneq_epi32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_epi32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_epi32_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_epi32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_epu32_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_epu32_mask(__M: __mmask16, __X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpneq_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_epu32_mask operation.

        C method prototype:
            _mm512_cmpneq_epu32_mask(__X: __m512i, __Y: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_epi64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_epi64_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_epi64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpneq_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_epi64_mask operation.

        C method prototype:
            _mm512_cmpneq_epi64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_epu64_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_epu64_mask(__M: __mmask8, __X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpneq_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_epu64_mask operation.

        C method prototype:
            _mm512_cmpneq_epu64_mask(__X: __m512i, __Y: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _kshiftli_mask16(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _kshiftli_mask16 is not supported in PyFastUtil.

        C method prototype:
            _kshiftli_mask16(__A: __mmask16, __B: unsigned int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _kshiftri_mask16(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _kshiftri_mask16 is not supported in PyFastUtil.

        C method prototype:
            _kshiftri_mask16(__A: __mmask16, __B: unsigned int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_epi64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_epi64_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_epi64_mask(__X: __m512i, __Y: __m512i, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_epi32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_epi32_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_epi32_mask(__X: __m512i, __Y: __m512i, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_epu64_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_epu64_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_epu64_mask(__X: __m512i, __Y: __m512i, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_epu32_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_epu32_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_epu32_mask(__X: __m512i, __Y: __m512i, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_round_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_round_pd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_round_pd_mask(__X: __m512d, __Y: __m512d, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_round_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_round_ps_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_round_ps_mask(__X: __m512, __Y: __m512, __P: const int, __R: const int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_epi64_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_epi64_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_epi64_mask(__U: __mmask8, __X: __m512i, __Y: __m512i, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_epi32_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_epi32_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_epi32_mask(__U: __mmask16, __X: __m512i, __Y: __m512i, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_epu64_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_epu64_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_epu64_mask(__U: __mmask8, __X: __m512i, __Y: __m512i, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_epu32_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_epu32_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_epu32_mask(__U: __mmask16, __X: __m512i, __Y: __m512i, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_round_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_round_pd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_round_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_round_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_round_ps_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_round_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512, __P: const int, __R: const int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cmp_round_sd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cmp_round_sd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_cmp_round_sd_mask(__X: __m128d, __Y: __m128d, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cmp_round_sd_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cmp_round_sd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cmp_round_sd_mask(__M: __mmask8, __X: __m128d, __Y: __m128d, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cmp_round_ss_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_cmp_round_ss_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_cmp_round_ss_mask(__X: __m128, __Y: __m128, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cmp_round_ss_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cmp_round_ss_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cmp_round_ss_mask(__M: __mmask8, __X: __m128, __Y: __m128, __P: const int, __R: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32gather_ps(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32gather_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32gather_ps(__index: __m512i, __addr: void const *, __scale: int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32gather_ps(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32gather_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32gather_ps(__v1_old: __m512, __mask: __mmask16, __index: __m512i, __addr: void const *, __scale: int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32gather_pd(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32gather_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32gather_pd(__index: __m256i, __addr: void const *, __scale: int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32gather_pd(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32gather_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32gather_pd(__v1_old: __m512d, __mask: __mmask8, __index: __m256i, __addr: void const *, __scale: int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64gather_ps(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64gather_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64gather_ps(__index: __m512i, __addr: void const *, __scale: int) -> __m256

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64gather_ps(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64gather_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64gather_ps(__v1_old: __m256, __mask: __mmask8, __index: __m512i, __addr: void const *, __scale: int) -> __m256

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64gather_pd(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64gather_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64gather_pd(__index: __m512i, __addr: void const *, __scale: int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64gather_pd(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64gather_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64gather_pd(__v1_old: __m512d, __mask: __mmask8, __index: __m512i, __addr: void const *, __scale: int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32gather_epi32(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32gather_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32gather_epi32(__index: __m512i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32gather_epi32(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32gather_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32gather_epi32(__v1_old: __m512i, __mask: __mmask16, __index: __m512i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32gather_epi64(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32gather_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32gather_epi64(__index: __m256i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32gather_epi64(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32gather_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32gather_epi64(__v1_old: __m512i, __mask: __mmask8, __index: __m256i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64gather_epi32(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64gather_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64gather_epi32(__index: __m512i, __addr: void const *, __scale: int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64gather_epi32(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64gather_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64gather_epi32(__v1_old: __m256i, __mask: __mmask8, __index: __m512i, __addr: void const *, __scale: int) -> __m256i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64gather_epi64(self, __result: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64gather_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64gather_epi64(__index: __m512i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64gather_epi64(self, __result: Ptr, __v1_old: Ptr, __mask: Ptr, __index: Ptr, __addr: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64gather_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64gather_epi64(__v1_old: __m512i, __mask: __mmask8, __index: __m512i, __addr: void const *, __scale: int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32scatter_ps(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32scatter_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32scatter_ps(__addr: void *, __index: __m512i, __v1: __m512, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32scatter_ps(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32scatter_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32scatter_ps(__addr: void *, __mask: __mmask16, __index: __m512i, __v1: __m512, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32scatter_pd(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32scatter_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32scatter_pd(__addr: void *, __index: __m256i, __v1: __m512d, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32scatter_pd(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32scatter_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32scatter_pd(__addr: void *, __mask: __mmask8, __index: __m256i, __v1: __m512d, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64scatter_ps(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64scatter_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64scatter_ps(__addr: void *, __index: __m512i, __v1: __m256, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64scatter_ps(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64scatter_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64scatter_ps(__addr: void *, __mask: __mmask8, __index: __m512i, __v1: __m256, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64scatter_pd(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64scatter_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64scatter_pd(__addr: void *, __index: __m512i, __v1: __m512d, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64scatter_pd(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64scatter_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64scatter_pd(__addr: void *, __mask: __mmask8, __index: __m512i, __v1: __m512d, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32scatter_epi32(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32scatter_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32scatter_epi32(__addr: void *, __index: __m512i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32scatter_epi32(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32scatter_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32scatter_epi32(__addr: void *, __mask: __mmask16, __index: __m512i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i32scatter_epi64(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i32scatter_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i32scatter_epi64(__addr: void *, __index: __m256i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i32scatter_epi64(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i32scatter_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i32scatter_epi64(__addr: void *, __mask: __mmask8, __index: __m256i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64scatter_epi32(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64scatter_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64scatter_epi32(__addr: void *, __index: __m512i, __v1: __m256i, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64scatter_epi32(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64scatter_epi32 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64scatter_epi32(__addr: void *, __mask: __mmask8, __index: __m512i, __v1: __m256i, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_i64scatter_epi64(self, __addr: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_i64scatter_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_i64scatter_epi64(__addr: void *, __index: __m512i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_i64scatter_epi64(self, __addr: Ptr, __mask: Ptr, __index: Ptr, __v1: Ptr, __scale: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_i64scatter_epi64 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_i64scatter_epi64(__addr: void *, __mask: __mmask8, __index: __m512i, __v1: __m512i, __scale: int) -> void

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_compress_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compress_pd operation.

        C method prototype:
            _mm512_mask_compress_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_compress_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_compress_pd operation.

        C method prototype:
            _mm512_maskz_compress_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_compressstoreu_pd(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compressstoreu_pd operation.

        C method prototype:
            _mm512_mask_compressstoreu_pd(__P: void *, __U: __mmask8, __A: __m512d) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_compress_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compress_ps operation.

        C method prototype:
            _mm512_mask_compress_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_compress_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_compress_ps operation.

        C method prototype:
            _mm512_maskz_compress_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_compressstoreu_ps(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compressstoreu_ps operation.

        C method prototype:
            _mm512_mask_compressstoreu_ps(__P: void *, __U: __mmask16, __A: __m512) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_compress_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compress_epi64 operation.

        C method prototype:
            _mm512_mask_compress_epi64(__W: __m512i, __U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_compress_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_compress_epi64 operation.

        C method prototype:
            _mm512_maskz_compress_epi64(__U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_compressstoreu_epi64(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compressstoreu_epi64 operation.

        C method prototype:
            _mm512_mask_compressstoreu_epi64(__P: void *, __U: __mmask8, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_compress_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compress_epi32 operation.

        C method prototype:
            _mm512_mask_compress_epi32(__W: __m512i, __U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_compress_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_compress_epi32 operation.

        C method prototype:
            _mm512_maskz_compress_epi32(__U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_compressstoreu_epi32(self, __P: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_compressstoreu_epi32 operation.

        C method prototype:
            _mm512_mask_compressstoreu_epi32(__P: void *, __U: __mmask16, __A: __m512i) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_expand_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_expand_pd operation.

        C method prototype:
            _mm512_mask_expand_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_expand_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_expand_pd operation.

        C method prototype:
            _mm512_maskz_expand_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_expandloadu_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_expandloadu_pd operation.

        C method prototype:
            _mm512_mask_expandloadu_pd(__W: __m512d, __U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_expandloadu_pd(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_expandloadu_pd operation.

        C method prototype:
            _mm512_maskz_expandloadu_pd(__U: __mmask8, __P: void const *) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_expand_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_expand_ps operation.

        C method prototype:
            _mm512_mask_expand_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_expand_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_expand_ps operation.

        C method prototype:
            _mm512_maskz_expand_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_expandloadu_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_expandloadu_ps operation.

        C method prototype:
            _mm512_mask_expandloadu_ps(__W: __m512, __U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_expandloadu_ps(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_expandloadu_ps operation.

        C method prototype:
            _mm512_maskz_expandloadu_ps(__U: __mmask16, __P: void const *) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_expand_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_expand_epi64 operation.

        C method prototype:
            _mm512_mask_expand_epi64(__W: __m512i, __U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_expand_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_expand_epi64 operation.

        C method prototype:
            _mm512_maskz_expand_epi64(__U: __mmask8, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_expandloadu_epi64(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_expandloadu_epi64 operation.

        C method prototype:
            _mm512_mask_expandloadu_epi64(__W: __m512i, __U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_expandloadu_epi64(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_expandloadu_epi64 operation.

        C method prototype:
            _mm512_maskz_expandloadu_epi64(__U: __mmask8, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_expand_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_expand_epi32 operation.

        C method prototype:
            _mm512_mask_expand_epi32(__W: __m512i, __U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_expand_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_expand_epi32 operation.

        C method prototype:
            _mm512_maskz_expand_epi32(__U: __mmask16, __A: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_expandloadu_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_mask_expandloadu_epi32 operation.

        C method prototype:
            _mm512_mask_expandloadu_epi32(__W: __m512i, __U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_expandloadu_epi32(self, __result: Ptr, __U: Ptr, __P: Ptr) -> None:
        """
        Executes the _mm512_maskz_expandloadu_epi32 operation.

        C method prototype:
            _mm512_maskz_expandloadu_epi32(__U: __mmask16, __P: void const *) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _kortest_mask16_u8(self, __result: Ptr, __A: Ptr, __B: Ptr, __CF: Ptr) -> None:
        """
        Executes the _kortest_mask16_u8 operation.

        C method prototype:
            _kortest_mask16_u8(__A: __mmask16, __B: __mmask16, __CF: unsigned char *) -> unsigned char

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _kortestz_mask16_u8(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _kortestz_mask16_u8 operation.

        C method prototype:
            _kortestz_mask16_u8(__A: __mmask16, __B: __mmask16) -> unsigned char

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _kortestc_mask16_u8(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _kortestc_mask16_u8 operation.

        C method prototype:
            _kortestc_mask16_u8(__A: __mmask16, __B: __mmask16) -> unsigned char

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _cvtmask16_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _cvtmask16_u32 operation.

        C method prototype:
            _cvtmask16_u32(__A: __mmask16) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _cvtu32_mask16(self, __result: Ptr, __A: int) -> None:
        """
        Executes the _cvtu32_mask16 operation.

        C method prototype:
            _cvtu32_mask16(__A: unsigned int) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _load_mask16(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _load_mask16 operation.

        C method prototype:
            _load_mask16(__A: __mmask16 *) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _store_mask16(self, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _store_mask16 operation.

        C method prototype:
            _store_mask16(__A: __mmask16 *, __B: __mmask16) -> void

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_kand(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kand operation.

        C method prototype:
            _mm512_kand(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_kandn(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kandn operation.

        C method prototype:
            _mm512_kandn(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_kor(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kor operation.

        C method prototype:
            _mm512_kor(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_kortestz(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kortestz operation.

        C method prototype:
            _mm512_kortestz(__A: __mmask16, __B: __mmask16) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_kortestc(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kortestc operation.

        C method prototype:
            _mm512_kortestc(__A: __mmask16, __B: __mmask16) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_kxnor(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kxnor operation.

        C method prototype:
            _mm512_kxnor(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_kxor(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kxor operation.

        C method prototype:
            _mm512_kxor(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_knot(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_knot operation.

        C method prototype:
            _mm512_knot(__A: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_kunpackb(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_kunpackb operation.

        C method prototype:
            _mm512_kunpackb(__A: __mmask16, __B: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_inserti32x4(self, __result: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_inserti32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_inserti32x4(__B: __mmask16, __C: __m512i, __D: __m128i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_insertf32x4(self, __result: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_insertf32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_insertf32x4(__B: __mmask16, __C: __m512, __D: __m128, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_inserti32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_inserti32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_inserti32x4(__A: __m512i, __B: __mmask16, __C: __m512i, __D: __m128i, __imm: const int) -> __m512i

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_insertf32x4(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_insertf32x4 is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_insertf32x4(__A: __m512, __B: __mmask16, __C: __m512, __D: __m128, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_max_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_epi64 operation.

        C method prototype:
            _mm512_max_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_max_epi64(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_epi64 operation.

        C method prototype:
            _mm512_maskz_max_epi64(__M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_max_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_epi64 operation.

        C method prototype:
            _mm512_mask_max_epi64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_min_epi64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_epi64 operation.

        C method prototype:
            _mm512_min_epi64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_min_epi64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_epi64 operation.

        C method prototype:
            _mm512_mask_min_epi64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_min_epi64(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_epi64 operation.

        C method prototype:
            _mm512_maskz_min_epi64(__M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_max_epu64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_epu64 operation.

        C method prototype:
            _mm512_max_epu64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_max_epu64(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_epu64 operation.

        C method prototype:
            _mm512_maskz_max_epu64(__M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_max_epu64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_epu64 operation.

        C method prototype:
            _mm512_mask_max_epu64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_min_epu64(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_epu64 operation.

        C method prototype:
            _mm512_min_epu64(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_min_epu64(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_epu64 operation.

        C method prototype:
            _mm512_mask_min_epu64(__W: __m512i, __M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_min_epu64(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_epu64 operation.

        C method prototype:
            _mm512_maskz_min_epu64(__M: __mmask8, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_max_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_epi32 operation.

        C method prototype:
            _mm512_max_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_max_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_epi32 operation.

        C method prototype:
            _mm512_maskz_max_epi32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_max_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_epi32 operation.

        C method prototype:
            _mm512_mask_max_epi32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_min_epi32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_epi32 operation.

        C method prototype:
            _mm512_min_epi32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_min_epi32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_epi32 operation.

        C method prototype:
            _mm512_maskz_min_epi32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_min_epi32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_epi32 operation.

        C method prototype:
            _mm512_mask_min_epi32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_max_epu32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_epu32 operation.

        C method prototype:
            _mm512_max_epu32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_max_epu32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_epu32 operation.

        C method prototype:
            _mm512_maskz_max_epu32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_max_epu32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_epu32 operation.

        C method prototype:
            _mm512_mask_max_epu32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_min_epu32(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_epu32 operation.

        C method prototype:
            _mm512_min_epu32(__A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_min_epu32(self, __result: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_epu32 operation.

        C method prototype:
            _mm512_maskz_min_epu32(__M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_min_epu32(self, __result: Ptr, __W: Ptr, __M: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_epu32 operation.

        C method prototype:
            _mm512_mask_min_epu32(__W: __m512i, __M: __mmask16, __A: __m512i, __B: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_unpacklo_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_unpacklo_ps operation.

        C method prototype:
            _mm512_unpacklo_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_unpacklo_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_unpacklo_ps operation.

        C method prototype:
            _mm512_mask_unpacklo_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_unpacklo_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_unpacklo_ps operation.

        C method prototype:
            _mm512_maskz_unpacklo_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_max_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_max_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_max_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_max_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_max_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_max_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_max_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_max_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_max_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_max_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_max_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_max_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_max_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_max_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_max_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_max_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_max_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_max_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_min_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_min_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_min_round_sd(__A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_min_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_min_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_min_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_min_round_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_min_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_min_round_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_min_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_min_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_min_round_ss(__A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_min_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_min_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_min_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_min_round_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_min_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_min_round_ss(__U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_blend_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __W: Ptr) -> None:
        """
        Executes the _mm512_mask_blend_pd operation.

        C method prototype:
            _mm512_mask_blend_pd(__U: __mmask8, __A: __m512d, __W: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_blend_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __W: Ptr) -> None:
        """
        Executes the _mm512_mask_blend_ps operation.

        C method prototype:
            _mm512_mask_blend_ps(__U: __mmask16, __A: __m512, __W: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_blend_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr, __W: Ptr) -> None:
        """
        Executes the _mm512_mask_blend_epi64 operation.

        C method prototype:
            _mm512_mask_blend_epi64(__U: __mmask8, __A: __m512i, __W: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_blend_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr, __W: Ptr) -> None:
        """
        Executes the _mm512_mask_blend_epi32 operation.

        C method prototype:
            _mm512_mask_blend_epi32(__U: __mmask16, __A: __m512i, __W: __m512i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_fmadd_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fmadd_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fmadd_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fmadd_round_ss(__W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fmsub_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fmsub_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fmsub_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fmsub_round_ss(__W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fnmadd_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fnmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fnmadd_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fnmadd_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fnmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fnmadd_round_ss(__W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fnmsub_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fnmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fnmsub_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fnmsub_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_fnmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fnmsub_round_ss(__W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fmadd_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fmadd_sd operation.

        C method prototype:
            _mm_mask_fmadd_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_fmadd_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fmadd_ss operation.

        C method prototype:
            _mm_mask_fmadd_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask3_fmadd_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fmadd_sd operation.

        C method prototype:
            _mm_mask3_fmadd_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask3_fmadd_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fmadd_ss operation.

        C method prototype:
            _mm_mask3_fmadd_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_fmadd_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fmadd_sd operation.

        C method prototype:
            _mm_maskz_fmadd_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_fmadd_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fmadd_ss operation.

        C method prototype:
            _mm_maskz_fmadd_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_fmsub_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fmsub_sd operation.

        C method prototype:
            _mm_mask_fmsub_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_fmsub_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fmsub_ss operation.

        C method prototype:
            _mm_mask_fmsub_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask3_fmsub_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fmsub_sd operation.

        C method prototype:
            _mm_mask3_fmsub_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask3_fmsub_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fmsub_ss operation.

        C method prototype:
            _mm_mask3_fmsub_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_fmsub_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fmsub_sd operation.

        C method prototype:
            _mm_maskz_fmsub_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_fmsub_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fmsub_ss operation.

        C method prototype:
            _mm_maskz_fmsub_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_fnmadd_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fnmadd_sd operation.

        C method prototype:
            _mm_mask_fnmadd_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_fnmadd_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fnmadd_ss operation.

        C method prototype:
            _mm_mask_fnmadd_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask3_fnmadd_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fnmadd_sd operation.

        C method prototype:
            _mm_mask3_fnmadd_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask3_fnmadd_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fnmadd_ss operation.

        C method prototype:
            _mm_mask3_fnmadd_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_fnmadd_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fnmadd_sd operation.

        C method prototype:
            _mm_maskz_fnmadd_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_fnmadd_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fnmadd_ss operation.

        C method prototype:
            _mm_maskz_fnmadd_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_fnmsub_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fnmsub_sd operation.

        C method prototype:
            _mm_mask_fnmsub_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_fnmsub_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_fnmsub_ss operation.

        C method prototype:
            _mm_mask_fnmsub_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask3_fnmsub_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fnmsub_sd operation.

        C method prototype:
            _mm_mask3_fnmsub_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask3_fnmsub_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm_mask3_fnmsub_ss operation.

        C method prototype:
            _mm_mask3_fnmsub_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_fnmsub_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fnmsub_sd operation.

        C method prototype:
            _mm_maskz_fnmsub_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_fnmsub_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_fnmsub_ss operation.

        C method prototype:
            _mm_maskz_fnmsub_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_fmadd_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fmadd_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fmadd_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fmadd_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fmadd_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fmadd_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fmadd_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fmadd_round_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fmadd_round_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fmadd_round_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fmadd_round_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fmadd_round_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fmsub_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fmsub_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fmsub_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fmsub_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fmsub_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fmsub_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fmsub_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fmsub_round_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fmsub_round_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fmsub_round_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fmsub_round_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fmsub_round_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fnmadd_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fnmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fnmadd_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fnmadd_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fnmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fnmadd_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fnmadd_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fnmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fnmadd_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fnmadd_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fnmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fnmadd_round_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fnmadd_round_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fnmadd_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fnmadd_round_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fnmadd_round_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fnmadd_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fnmadd_round_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fnmsub_round_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fnmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fnmsub_round_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fnmsub_round_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fnmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fnmsub_round_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fnmsub_round_sd(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fnmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fnmsub_round_sd(__W: __m128d, __A: __m128d, __B: __m128d, __U: __mmask8, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask3_fnmsub_round_ss(self, __result: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __U: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_mask3_fnmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask3_fnmsub_round_ss(__W: __m128, __A: __m128, __B: __m128, __U: __mmask8, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fnmsub_round_sd(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fnmsub_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fnmsub_round_sd(__U: __mmask8, __W: __m128d, __A: __m128d, __B: __m128d, __R: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fnmsub_round_ss(self, __result: Ptr, __U: Ptr, __W: Ptr, __A: Ptr, __B: Ptr, __R: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fnmsub_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fnmsub_round_ss(__U: __mmask8, __W: __m128, __A: __m128, __B: __m128, __R: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_comi_round_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_comi_round_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_comi_round_ss(__A: __m128, __B: __m128, __P: const int, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_comi_round_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __P: int, __R: int) -> RaisesNotImplementedError:
        """
        _mm_comi_round_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_comi_round_sd(__A: __m128d, __B: __m128d, __P: const int, __R: const int) -> int

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_sqrt_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_sqrt_pd operation.

        C method prototype:
            _mm512_sqrt_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sqrt_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_sqrt_pd operation.

        C method prototype:
            _mm512_mask_sqrt_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sqrt_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_sqrt_pd operation.

        C method prototype:
            _mm512_maskz_sqrt_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sqrt_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_sqrt_ps operation.

        C method prototype:
            _mm512_sqrt_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sqrt_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_sqrt_ps operation.

        C method prototype:
            _mm512_mask_sqrt_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sqrt_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_sqrt_ps operation.

        C method prototype:
            _mm512_maskz_sqrt_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_add_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_add_pd operation.

        C method prototype:
            _mm512_add_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_add_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_add_pd operation.

        C method prototype:
            _mm512_mask_add_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_add_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_add_pd operation.

        C method prototype:
            _mm512_maskz_add_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_add_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_add_ps operation.

        C method prototype:
            _mm512_add_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_add_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_add_ps operation.

        C method prototype:
            _mm512_mask_add_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_add_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_add_ps operation.

        C method prototype:
            _mm512_maskz_add_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_add_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_add_sd operation.

        C method prototype:
            _mm_mask_add_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_add_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_add_sd operation.

        C method prototype:
            _mm_maskz_add_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_add_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_add_ss operation.

        C method prototype:
            _mm_mask_add_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_add_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_add_ss operation.

        C method prototype:
            _mm_maskz_add_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sub_pd operation.

        C method prototype:
            _mm512_sub_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sub_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sub_pd operation.

        C method prototype:
            _mm512_mask_sub_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sub_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sub_pd operation.

        C method prototype:
            _mm512_maskz_sub_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_sub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_sub_ps operation.

        C method prototype:
            _mm512_sub_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_sub_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_sub_ps operation.

        C method prototype:
            _mm512_mask_sub_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_sub_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_sub_ps operation.

        C method prototype:
            _mm512_maskz_sub_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_sub_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_sub_sd operation.

        C method prototype:
            _mm_mask_sub_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_sub_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_sub_sd operation.

        C method prototype:
            _mm_maskz_sub_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_sub_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_sub_ss operation.

        C method prototype:
            _mm_mask_sub_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_sub_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_sub_ss operation.

        C method prototype:
            _mm_maskz_sub_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mul_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mul_pd operation.

        C method prototype:
            _mm512_mul_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mul_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_mul_pd operation.

        C method prototype:
            _mm512_mask_mul_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_mul_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_mul_pd operation.

        C method prototype:
            _mm512_maskz_mul_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mul_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mul_ps operation.

        C method prototype:
            _mm512_mul_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_mul_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_mul_ps operation.

        C method prototype:
            _mm512_mask_mul_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_mul_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_mul_ps operation.

        C method prototype:
            _mm512_maskz_mul_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_mul_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_mul_sd operation.

        C method prototype:
            _mm_mask_mul_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_mul_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_mul_sd operation.

        C method prototype:
            _mm_maskz_mul_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_mul_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_mul_ss operation.

        C method prototype:
            _mm_mask_mul_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_mul_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_mul_ss operation.

        C method prototype:
            _mm_maskz_mul_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_div_pd(self, __result: Ptr, __M: Ptr, __V: Ptr) -> None:
        """
        Executes the _mm512_div_pd operation.

        C method prototype:
            _mm512_div_pd(__M: __m512d, __V: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_div_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __M: Ptr, __V: Ptr) -> None:
        """
        Executes the _mm512_mask_div_pd operation.

        C method prototype:
            _mm512_mask_div_pd(__W: __m512d, __U: __mmask8, __M: __m512d, __V: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_div_pd(self, __result: Ptr, __U: Ptr, __M: Ptr, __V: Ptr) -> None:
        """
        Executes the _mm512_maskz_div_pd operation.

        C method prototype:
            _mm512_maskz_div_pd(__U: __mmask8, __M: __m512d, __V: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_div_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_div_ps operation.

        C method prototype:
            _mm512_div_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_div_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_div_ps operation.

        C method prototype:
            _mm512_mask_div_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_div_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_div_ps operation.

        C method prototype:
            _mm512_maskz_div_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_div_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_div_sd operation.

        C method prototype:
            _mm_mask_div_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_div_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_div_sd operation.

        C method prototype:
            _mm_maskz_div_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_div_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_div_ss operation.

        C method prototype:
            _mm_mask_div_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_div_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_div_ss operation.

        C method prototype:
            _mm_maskz_div_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_max_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_pd operation.

        C method prototype:
            _mm512_max_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_max_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_pd operation.

        C method prototype:
            _mm512_mask_max_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_max_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_pd operation.

        C method prototype:
            _mm512_maskz_max_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_max_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_max_ps operation.

        C method prototype:
            _mm512_max_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_max_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_max_ps operation.

        C method prototype:
            _mm512_mask_max_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_max_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_max_ps operation.

        C method prototype:
            _mm512_maskz_max_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_max_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_max_sd operation.

        C method prototype:
            _mm_mask_max_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_max_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_max_sd operation.

        C method prototype:
            _mm_maskz_max_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_max_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_max_ss operation.

        C method prototype:
            _mm_mask_max_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_max_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_max_ss operation.

        C method prototype:
            _mm_maskz_max_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_min_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_pd operation.

        C method prototype:
            _mm512_min_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_min_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_pd operation.

        C method prototype:
            _mm512_mask_min_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_min_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_pd operation.

        C method prototype:
            _mm512_maskz_min_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_min_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_min_ps operation.

        C method prototype:
            _mm512_min_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_min_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_min_ps operation.

        C method prototype:
            _mm512_mask_min_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_min_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_min_ps operation.

        C method prototype:
            _mm512_maskz_min_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_min_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_min_sd operation.

        C method prototype:
            _mm_mask_min_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_min_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_min_sd operation.

        C method prototype:
            _mm_maskz_min_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_min_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_min_ss operation.

        C method prototype:
            _mm_mask_min_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_min_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_min_ss operation.

        C method prototype:
            _mm_maskz_min_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_scalef_pd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_scalef_pd operation.

        C method prototype:
            _mm512_scalef_pd(__A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_scalef_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_scalef_pd operation.

        C method prototype:
            _mm512_mask_scalef_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_scalef_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_scalef_pd operation.

        C method prototype:
            _mm512_maskz_scalef_pd(__U: __mmask8, __A: __m512d, __B: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_scalef_ps(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_scalef_ps operation.

        C method prototype:
            _mm512_scalef_ps(__A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_scalef_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_scalef_ps operation.

        C method prototype:
            _mm512_mask_scalef_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_scalef_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_maskz_scalef_ps operation.

        C method prototype:
            _mm512_maskz_scalef_ps(__U: __mmask16, __A: __m512, __B: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_scalef_sd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_scalef_sd operation.

        C method prototype:
            _mm_scalef_sd(__A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_scalef_ss(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_scalef_ss operation.

        C method prototype:
            _mm_scalef_ss(__A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fmadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmadd_pd operation.

        C method prototype:
            _mm512_fmadd_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fmadd_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmadd_pd operation.

        C method prototype:
            _mm512_mask_fmadd_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fmadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmadd_pd operation.

        C method prototype:
            _mm512_mask3_fmadd_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fmadd_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmadd_pd operation.

        C method prototype:
            _mm512_maskz_fmadd_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fmadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmadd_ps operation.

        C method prototype:
            _mm512_fmadd_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fmadd_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmadd_ps operation.

        C method prototype:
            _mm512_mask_fmadd_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fmadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmadd_ps operation.

        C method prototype:
            _mm512_mask3_fmadd_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fmadd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmadd_ps operation.

        C method prototype:
            _mm512_maskz_fmadd_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fmsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmsub_pd operation.

        C method prototype:
            _mm512_fmsub_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fmsub_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmsub_pd operation.

        C method prototype:
            _mm512_mask_fmsub_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fmsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmsub_pd operation.

        C method prototype:
            _mm512_mask3_fmsub_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fmsub_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmsub_pd operation.

        C method prototype:
            _mm512_maskz_fmsub_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fmsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmsub_ps operation.

        C method prototype:
            _mm512_fmsub_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fmsub_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmsub_ps operation.

        C method prototype:
            _mm512_mask_fmsub_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fmsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmsub_ps operation.

        C method prototype:
            _mm512_mask3_fmsub_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fmsub_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmsub_ps operation.

        C method prototype:
            _mm512_maskz_fmsub_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fmaddsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmaddsub_pd operation.

        C method prototype:
            _mm512_fmaddsub_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fmaddsub_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmaddsub_pd operation.

        C method prototype:
            _mm512_mask_fmaddsub_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fmaddsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmaddsub_pd operation.

        C method prototype:
            _mm512_mask3_fmaddsub_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fmaddsub_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmaddsub_pd operation.

        C method prototype:
            _mm512_maskz_fmaddsub_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fmaddsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmaddsub_ps operation.

        C method prototype:
            _mm512_fmaddsub_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fmaddsub_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmaddsub_ps operation.

        C method prototype:
            _mm512_mask_fmaddsub_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fmaddsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmaddsub_ps operation.

        C method prototype:
            _mm512_mask3_fmaddsub_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fmaddsub_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmaddsub_ps operation.

        C method prototype:
            _mm512_maskz_fmaddsub_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fmsubadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmsubadd_pd operation.

        C method prototype:
            _mm512_fmsubadd_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fmsubadd_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmsubadd_pd operation.

        C method prototype:
            _mm512_mask_fmsubadd_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fmsubadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmsubadd_pd operation.

        C method prototype:
            _mm512_mask3_fmsubadd_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fmsubadd_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmsubadd_pd operation.

        C method prototype:
            _mm512_maskz_fmsubadd_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fmsubadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fmsubadd_ps operation.

        C method prototype:
            _mm512_fmsubadd_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fmsubadd_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fmsubadd_ps operation.

        C method prototype:
            _mm512_mask_fmsubadd_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fmsubadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fmsubadd_ps operation.

        C method prototype:
            _mm512_mask3_fmsubadd_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fmsubadd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fmsubadd_ps operation.

        C method prototype:
            _mm512_maskz_fmsubadd_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fnmadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fnmadd_pd operation.

        C method prototype:
            _mm512_fnmadd_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fnmadd_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fnmadd_pd operation.

        C method prototype:
            _mm512_mask_fnmadd_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fnmadd_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fnmadd_pd operation.

        C method prototype:
            _mm512_mask3_fnmadd_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fnmadd_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fnmadd_pd operation.

        C method prototype:
            _mm512_maskz_fnmadd_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fnmadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fnmadd_ps operation.

        C method prototype:
            _mm512_fnmadd_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fnmadd_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fnmadd_ps operation.

        C method prototype:
            _mm512_mask_fnmadd_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fnmadd_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fnmadd_ps operation.

        C method prototype:
            _mm512_mask3_fnmadd_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fnmadd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fnmadd_ps operation.

        C method prototype:
            _mm512_maskz_fnmadd_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fnmsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fnmsub_pd operation.

        C method prototype:
            _mm512_fnmsub_pd(__A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fnmsub_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fnmsub_pd operation.

        C method prototype:
            _mm512_mask_fnmsub_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fnmsub_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fnmsub_pd operation.

        C method prototype:
            _mm512_mask3_fnmsub_pd(__A: __m512d, __B: __m512d, __C: __m512d, __U: __mmask8) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fnmsub_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fnmsub_pd operation.

        C method prototype:
            _mm512_maskz_fnmsub_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fnmsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_fnmsub_ps operation.

        C method prototype:
            _mm512_fnmsub_ps(__A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_fnmsub_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_mask_fnmsub_ps operation.

        C method prototype:
            _mm512_mask_fnmsub_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask3_fnmsub_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __U: Ptr) -> None:
        """
        Executes the _mm512_mask3_fnmsub_ps operation.

        C method prototype:
            _mm512_mask3_fnmsub_ps(__A: __m512, __B: __m512, __C: __m512, __U: __mmask16) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_fnmsub_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr) -> None:
        """
        Executes the _mm512_maskz_fnmsub_ps operation.

        C method prototype:
            _mm512_maskz_fnmsub_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvttpd_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvttpd_epi32 operation.

        C method prototype:
            _mm512_cvttpd_epi32(__A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvttpd_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvttpd_epi32 operation.

        C method prototype:
            _mm512_mask_cvttpd_epi32(__W: __m256i, __U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvttpd_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvttpd_epi32 operation.

        C method prototype:
            _mm512_maskz_cvttpd_epi32(__U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvttpd_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvttpd_epu32 operation.

        C method prototype:
            _mm512_cvttpd_epu32(__A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvttpd_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvttpd_epu32 operation.

        C method prototype:
            _mm512_mask_cvttpd_epu32(__W: __m256i, __U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvttpd_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvttpd_epu32 operation.

        C method prototype:
            _mm512_maskz_cvttpd_epu32(__U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtpd_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtpd_epi32 operation.

        C method prototype:
            _mm512_cvtpd_epi32(__A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtpd_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtpd_epi32 operation.

        C method prototype:
            _mm512_mask_cvtpd_epi32(__W: __m256i, __U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtpd_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtpd_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtpd_epi32(__U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtpd_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtpd_epu32 operation.

        C method prototype:
            _mm512_cvtpd_epu32(__A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtpd_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtpd_epu32 operation.

        C method prototype:
            _mm512_mask_cvtpd_epu32(__W: __m256i, __U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtpd_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtpd_epu32 operation.

        C method prototype:
            _mm512_maskz_cvtpd_epu32(__U: __mmask8, __A: __m512d) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvttps_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvttps_epi32 operation.

        C method prototype:
            _mm512_cvttps_epi32(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvttps_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvttps_epi32 operation.

        C method prototype:
            _mm512_mask_cvttps_epi32(__W: __m512i, __U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvttps_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvttps_epi32 operation.

        C method prototype:
            _mm512_maskz_cvttps_epi32(__U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvttps_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvttps_epu32 operation.

        C method prototype:
            _mm512_cvttps_epu32(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvttps_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvttps_epu32 operation.

        C method prototype:
            _mm512_mask_cvttps_epu32(__W: __m512i, __U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvttps_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvttps_epu32 operation.

        C method prototype:
            _mm512_maskz_cvttps_epu32(__U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtps_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtps_epi32 operation.

        C method prototype:
            _mm512_cvtps_epi32(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtps_epi32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtps_epi32 operation.

        C method prototype:
            _mm512_mask_cvtps_epi32(__W: __m512i, __U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtps_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtps_epi32 operation.

        C method prototype:
            _mm512_maskz_cvtps_epi32(__U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtps_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtps_epu32 operation.

        C method prototype:
            _mm512_cvtps_epu32(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtps_epu32(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtps_epu32 operation.

        C method prototype:
            _mm512_mask_cvtps_epu32(__W: __m512i, __U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtps_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtps_epu32 operation.

        C method prototype:
            _mm512_maskz_cvtps_epu32(__U: __mmask16, __A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtsd_f64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsd_f64 operation.

        C method prototype:
            _mm512_cvtsd_f64(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtss_f32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtss_f32 operation.

        C method prototype:
            _mm512_cvtss_f32(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvtu64_ss(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvtu64_ss operation.

        C method prototype:
            _mm_cvtu64_ss(__A: __m128, __B: unsigned long long) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvtu64_sd(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvtu64_sd operation.

        C method prototype:
            _mm_cvtu64_sd(__A: __m128d, __B: unsigned long long) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvtu32_ss(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvtu32_ss operation.

        C method prototype:
            _mm_cvtu32_ss(__A: __m128, __B: unsigned) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepi32_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepi32_ps operation.

        C method prototype:
            _mm512_cvtepi32_ps(__A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepi32_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepi32_ps operation.

        C method prototype:
            _mm512_mask_cvtepi32_ps(__W: __m512, __U: __mmask16, __A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepi32_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepi32_ps operation.

        C method prototype:
            _mm512_maskz_cvtepi32_ps(__U: __mmask16, __A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtepu32_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtepu32_ps operation.

        C method prototype:
            _mm512_cvtepu32_ps(__A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtepu32_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtepu32_ps operation.

        C method prototype:
            _mm512_mask_cvtepu32_ps(__W: __m512, __U: __mmask16, __A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtepu32_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtepu32_ps operation.

        C method prototype:
            _mm512_maskz_cvtepu32_ps(__U: __mmask16, __A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_fixupimm_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_fixupimm_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_fixupimm_pd(__A: __m512d, __B: __m512d, __C: __m512i, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fixupimm_pd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fixupimm_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fixupimm_pd(__A: __m512d, __U: __mmask8, __B: __m512d, __C: __m512i, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fixupimm_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fixupimm_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fixupimm_pd(__U: __mmask8, __A: __m512d, __B: __m512d, __C: __m512i, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_fixupimm_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_fixupimm_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_fixupimm_ps(__A: __m512, __B: __m512, __C: __m512i, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_fixupimm_ps(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_fixupimm_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_fixupimm_ps(__A: __m512, __U: __mmask16, __B: __m512, __C: __m512i, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_fixupimm_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_fixupimm_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_fixupimm_ps(__U: __mmask16, __A: __m512, __B: __m512, __C: __m512i, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fixupimm_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_fixupimm_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_fixupimm_sd(__A: __m128d, __B: __m128d, __C: __m128i, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fixupimm_sd(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fixupimm_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fixupimm_sd(__A: __m128d, __U: __mmask8, __B: __m128d, __C: __m128i, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fixupimm_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fixupimm_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fixupimm_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __C: __m128i, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_fixupimm_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_fixupimm_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_fixupimm_ss(__A: __m128, __B: __m128, __C: __m128i, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_fixupimm_ss(self, __result: Ptr, __A: Ptr, __U: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_mask_fixupimm_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_fixupimm_ss(__A: __m128, __U: __mmask8, __B: __m128, __C: __m128i, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_fixupimm_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_fixupimm_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_fixupimm_ss(__U: __mmask8, __A: __m128, __B: __m128, __C: __m128i, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtss_u64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtss_u64 operation.

        C method prototype:
            _mm_cvtss_u64(__A: __m128) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvttss_u64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttss_u64 operation.

        C method prototype:
            _mm_cvttss_u64(__A: __m128) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvttss_i64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttss_i64 operation.

        C method prototype:
            _mm_cvttss_i64(__A: __m128) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtsi512_si32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtsi512_si32 operation.

        C method prototype:
            _mm512_cvtsi512_si32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvtss_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtss_u32 operation.

        C method prototype:
            _mm_cvtss_u32(__A: __m128) -> unsigned

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvttss_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttss_u32 operation.

        C method prototype:
            _mm_cvttss_u32(__A: __m128) -> unsigned

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvttss_i32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttss_i32 operation.

        C method prototype:
            _mm_cvttss_i32(__A: __m128) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvtsd_i32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtsd_i32 operation.

        C method prototype:
            _mm_cvtsd_i32(__A: __m128d) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvtss_i32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtss_i32 operation.

        C method prototype:
            _mm_cvtss_i32(__A: __m128) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvti32_sd(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm_cvti32_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_cvti32_sd(__A: __m128d, __B: int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvti32_ss(self, __result: Ptr, __A: Ptr, __B: int) -> RaisesNotImplementedError:
        """
        _mm_cvti32_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_cvti32_ss(__A: __m128, __B: int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cvtsd_u64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtsd_u64 operation.

        C method prototype:
            _mm_cvtsd_u64(__A: __m128d) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvttsd_u64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttsd_u64 operation.

        C method prototype:
            _mm_cvttsd_u64(__A: __m128d) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvttsd_i64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttsd_i64 operation.

        C method prototype:
            _mm_cvttsd_i64(__A: __m128d) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvtsd_i64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtsd_i64 operation.

        C method prototype:
            _mm_cvtsd_i64(__A: __m128d) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvtss_i64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtss_i64 operation.

        C method prototype:
            _mm_cvtss_i64(__A: __m128) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvti64_sd(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvti64_sd operation.

        C method prototype:
            _mm_cvti64_sd(__A: __m128d, __B: long long) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvti64_ss(self, __result: Ptr, __A: Ptr, __B: int) -> None:
        """
        Executes the _mm_cvti64_ss operation.

        C method prototype:
            _mm_cvti64_ss(__A: __m128, __B: long long) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvtsd_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvtsd_u32 operation.

        C method prototype:
            _mm_cvtsd_u32(__A: __m128d) -> unsigned

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvttsd_u32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttsd_u32 operation.

        C method prototype:
            _mm_cvttsd_u32(__A: __m128d) -> unsigned

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_cvttsd_i32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm_cvttsd_i32 operation.

        C method prototype:
            _mm_cvttsd_i32(__A: __m128d) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtps_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtps_pd operation.

        C method prototype:
            _mm512_cvtps_pd(__A: __m256) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtps_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtps_pd operation.

        C method prototype:
            _mm512_mask_cvtps_pd(__W: __m512d, __U: __mmask8, __A: __m256) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtps_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtps_pd operation.

        C method prototype:
            _mm512_maskz_cvtps_pd(__U: __mmask8, __A: __m256) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtph_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtph_ps operation.

        C method prototype:
            _mm512_cvtph_ps(__A: __m256i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtph_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtph_ps operation.

        C method prototype:
            _mm512_mask_cvtph_ps(__W: __m512, __U: __mmask16, __A: __m256i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtph_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtph_ps operation.

        C method prototype:
            _mm512_maskz_cvtph_ps(__U: __mmask16, __A: __m256i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cvtpd_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_cvtpd_ps operation.

        C method prototype:
            _mm512_cvtpd_ps(__A: __m512d) -> __m256

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cvtpd_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_cvtpd_ps operation.

        C method prototype:
            _mm512_mask_cvtpd_ps(__W: __m256, __U: __mmask8, __A: __m512d) -> __m256

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_cvtpd_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_cvtpd_ps operation.

        C method prototype:
            _mm512_maskz_cvtpd_ps(__U: __mmask8, __A: __m512d) -> __m256

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_getexp_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_getexp_ps operation.

        C method prototype:
            _mm512_getexp_ps(__A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_getexp_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_getexp_ps operation.

        C method prototype:
            _mm512_mask_getexp_ps(__W: __m512, __U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_getexp_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_getexp_ps operation.

        C method prototype:
            _mm512_maskz_getexp_ps(__U: __mmask16, __A: __m512) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_getexp_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_getexp_pd operation.

        C method prototype:
            _mm512_getexp_pd(__A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_getexp_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_getexp_pd operation.

        C method prototype:
            _mm512_mask_getexp_pd(__W: __m512d, __U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_maskz_getexp_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_maskz_getexp_pd operation.

        C method prototype:
            _mm512_maskz_getexp_pd(__U: __mmask8, __A: __m512d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_getexp_ss(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_getexp_ss operation.

        C method prototype:
            _mm_getexp_ss(__A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_getexp_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_getexp_ss operation.

        C method prototype:
            _mm_mask_getexp_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_getexp_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_getexp_ss operation.

        C method prototype:
            _mm_maskz_getexp_ss(__U: __mmask8, __A: __m128, __B: __m128) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_getexp_sd(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_getexp_sd operation.

        C method prototype:
            _mm_getexp_sd(__A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_mask_getexp_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_mask_getexp_sd operation.

        C method prototype:
            _mm_mask_getexp_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm_maskz_getexp_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm_maskz_getexp_sd operation.

        C method prototype:
            _mm_maskz_getexp_sd(__U: __mmask8, __A: __m128d, __B: __m128d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_getmant_pd(self, __result: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_getmant_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_getmant_pd(__A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getmant_pd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getmant_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getmant_pd(__W: __m512d, __U: __mmask8, __A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getmant_pd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getmant_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getmant_pd(__U: __mmask8, __A: __m512d, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_getmant_ps(self, __result: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_getmant_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_getmant_ps(__A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_getmant_ps(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_getmant_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_getmant_ps(__W: __m512, __U: __mmask16, __A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_getmant_ps(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: int, __C: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_getmant_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_getmant_ps(__U: __mmask16, __A: __m512, __B: _MM_MANTISSA_NORM_ENUM, __C: _MM_MANTISSA_SIGN_ENUM) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getmant_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_getmant_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_getmant_sd(__A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getmant_sd(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getmant_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getmant_sd(__W: __m128d, __U: __mmask8, __A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getmant_sd(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getmant_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getmant_sd(__U: __mmask8, __A: __m128d, __B: __m128d, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_getmant_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_getmant_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_getmant_ss(__A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_getmant_ss(self, __result: Ptr, __W: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_mask_getmant_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_getmant_ss(__W: __m128, __U: __mmask8, __A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_getmant_ss(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr, __C: int, __D: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_getmant_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_getmant_ss(__U: __mmask8, __A: __m128, __B: __m128, __C: _MM_MANTISSA_NORM_ENUM, __D: _MM_MANTISSA_SIGN_ENUM) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_roundscale_ps(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_roundscale_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_roundscale_ps(__A: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_roundscale_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_roundscale_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_roundscale_ps(__A: __m512, __B: __mmask16, __C: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_roundscale_ps(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_roundscale_ps is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_roundscale_ps(__A: __mmask16, __B: __m512, __imm: const int) -> __m512

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_roundscale_pd(self, __result: Ptr, __A: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_roundscale_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_roundscale_pd(__A: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_roundscale_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_roundscale_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_roundscale_pd(__A: __m512d, __B: __mmask8, __C: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_maskz_roundscale_pd(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm512_maskz_roundscale_pd is not supported in PyFastUtil.

        C method prototype:
            _mm512_maskz_roundscale_pd(__A: __mmask8, __B: __m512d, __imm: const int) -> __m512d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_roundscale_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_roundscale_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_roundscale_ss(__A: __m128, __B: __m128, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_roundscale_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_mask_roundscale_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_roundscale_ss(__A: __m128, __B: __mmask8, __C: __m128, __D: __m128, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_roundscale_ss(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_roundscale_ss is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_roundscale_ss(__A: __mmask8, __B: __m128, __C: __m128, __imm: const int) -> __m128

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_roundscale_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_roundscale_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_roundscale_sd(__A: __m128d, __B: __m128d, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_roundscale_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __D: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_mask_roundscale_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_roundscale_sd(__A: __m128d, __B: __mmask8, __C: __m128d, __D: __m128d, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_maskz_roundscale_sd(self, __result: Ptr, __A: Ptr, __B: Ptr, __C: Ptr, __imm: int) -> RaisesNotImplementedError:
        """
        _mm_maskz_roundscale_sd is not supported in PyFastUtil.

        C method prototype:
            _mm_maskz_roundscale_sd(__A: __mmask8, __B: __m128d, __C: __m128d, __imm: const int) -> __m128d

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_pd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_pd_mask(__X: __m512d, __Y: __m512d, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmp_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_cmp_ps_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_cmp_ps_mask(__X: __m512, __Y: __m512, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_ps_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512, __P: const int) -> __mmask16

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_mask_cmp_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm512_mask_cmp_pd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm512_mask_cmp_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cmp_sd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm_cmp_sd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_cmp_sd_mask(__X: __m128d, __Y: __m128d, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cmp_sd_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cmp_sd_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cmp_sd_mask(__M: __mmask8, __X: __m128d, __Y: __m128d, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_cmp_ss_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm_cmp_ss_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_cmp_ss_mask(__X: __m128, __Y: __m128, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm_mask_cmp_ss_mask(self, __result: Ptr, __M: Ptr, __X: Ptr, __Y: Ptr, __P: int) -> RaisesNotImplementedError:
        """
        _mm_mask_cmp_ss_mask is not supported in PyFastUtil.

        C method prototype:
            _mm_mask_cmp_ss_mask(__M: __mmask8, __X: __m128, __Y: __m128, __P: const int) -> __mmask8

        This method is not implemented because it relies on features that are 
        not currently supported in PyFastUtil. Specifically, it requires 
        immediate numbers, which cannot be dynamically passed in Python.

        Attempting to call this method will raise a NotImplementedError.
        """
        pass
    def _mm512_cmpeq_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_pd_mask operation.

        C method prototype:
            _mm512_cmpeq_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmplt_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_pd_mask operation.

        C method prototype:
            _mm512_cmplt_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_pd_mask operation.

        C method prototype:
            _mm512_mask_cmplt_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmple_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_pd_mask operation.

        C method prototype:
            _mm512_cmple_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmple_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_pd_mask operation.

        C method prototype:
            _mm512_mask_cmple_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpunord_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpunord_pd_mask operation.

        C method prototype:
            _mm512_cmpunord_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpunord_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpunord_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpunord_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpneq_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_pd_mask operation.

        C method prototype:
            _mm512_cmpneq_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpnlt_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpnlt_pd_mask operation.

        C method prototype:
            _mm512_cmpnlt_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpnlt_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpnlt_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpnlt_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpnle_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpnle_pd_mask operation.

        C method prototype:
            _mm512_cmpnle_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpnle_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpnle_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpnle_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpord_pd_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpord_pd_mask operation.

        C method prototype:
            _mm512_cmpord_pd_mask(__X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpord_pd_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpord_pd_mask operation.

        C method prototype:
            _mm512_mask_cmpord_pd_mask(__U: __mmask8, __X: __m512d, __Y: __m512d) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpeq_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_ps_mask operation.

        C method prototype:
            _mm512_cmpeq_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmplt_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmplt_ps_mask operation.

        C method prototype:
            _mm512_cmplt_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmplt_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmplt_ps_mask operation.

        C method prototype:
            _mm512_mask_cmplt_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmple_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmple_ps_mask operation.

        C method prototype:
            _mm512_cmple_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmple_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmple_ps_mask operation.

        C method prototype:
            _mm512_mask_cmple_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpunord_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpunord_ps_mask operation.

        C method prototype:
            _mm512_cmpunord_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpunord_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpunord_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpunord_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpneq_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpneq_ps_mask operation.

        C method prototype:
            _mm512_cmpneq_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpneq_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpneq_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpneq_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpnlt_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpnlt_ps_mask operation.

        C method prototype:
            _mm512_cmpnlt_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpnlt_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpnlt_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpnlt_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpnle_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpnle_ps_mask operation.

        C method prototype:
            _mm512_cmpnle_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpnle_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpnle_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpnle_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpord_ps_mask(self, __result: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_cmpord_ps_mask operation.

        C method prototype:
            _mm512_cmpord_ps_mask(__X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpord_ps_mask(self, __result: Ptr, __U: Ptr, __X: Ptr, __Y: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpord_ps_mask operation.

        C method prototype:
            _mm512_mask_cmpord_ps_mask(__U: __mmask16, __X: __m512, __Y: __m512) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_kmov(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_kmov operation.

        C method prototype:
            _mm512_kmov(__A: __mmask16) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castpd_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd_ps operation.

        C method prototype:
            _mm512_castpd_ps(__A: __m512d) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castpd_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd_si512 operation.

        C method prototype:
            _mm512_castpd_si512(__A: __m512d) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castps_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps_pd operation.

        C method prototype:
            _mm512_castps_pd(__A: __m512) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castps_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps_si512 operation.

        C method prototype:
            _mm512_castps_si512(__A: __m512) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castsi512_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi512_ps operation.

        C method prototype:
            _mm512_castsi512_ps(__A: __m512i) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castsi512_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi512_pd operation.

        C method prototype:
            _mm512_castsi512_pd(__A: __m512i) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castpd512_pd128(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd512_pd128 operation.

        C method prototype:
            _mm512_castpd512_pd128(__A: __m512d) -> __m128d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castps512_ps128(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps512_ps128 operation.

        C method prototype:
            _mm512_castps512_ps128(__A: __m512) -> __m128

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castsi512_si128(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi512_si128 operation.

        C method prototype:
            _mm512_castsi512_si128(__A: __m512i) -> __m128i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castpd512_pd256(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd512_pd256 operation.

        C method prototype:
            _mm512_castpd512_pd256(__A: __m512d) -> __m256d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castps512_ps256(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps512_ps256 operation.

        C method prototype:
            _mm512_castps512_ps256(__A: __m512) -> __m256

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castsi512_si256(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi512_si256 operation.

        C method prototype:
            _mm512_castsi512_si256(__A: __m512i) -> __m256i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castpd128_pd512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd128_pd512 operation.

        C method prototype:
            _mm512_castpd128_pd512(__A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castps128_ps512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps128_ps512 operation.

        C method prototype:
            _mm512_castps128_ps512(__A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castsi128_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi128_si512 operation.

        C method prototype:
            _mm512_castsi128_si512(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castpd256_pd512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castpd256_pd512 operation.

        C method prototype:
            _mm512_castpd256_pd512(__A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castps256_ps512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castps256_ps512 operation.

        C method prototype:
            _mm512_castps256_ps512(__A: __m256) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_castsi256_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_castsi256_si512 operation.

        C method prototype:
            _mm512_castsi256_si512(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_zextpd128_pd512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextpd128_pd512 operation.

        C method prototype:
            _mm512_zextpd128_pd512(__A: __m128d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_zextps128_ps512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextps128_ps512 operation.

        C method prototype:
            _mm512_zextps128_ps512(__A: __m128) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_zextsi128_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextsi128_si512 operation.

        C method prototype:
            _mm512_zextsi128_si512(__A: __m128i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_zextpd256_pd512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextpd256_pd512 operation.

        C method prototype:
            _mm512_zextpd256_pd512(__A: __m256d) -> __m512d

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_zextps256_ps512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextps256_ps512 operation.

        C method prototype:
            _mm512_zextps256_ps512(__A: __m256) -> __m512

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_zextsi256_si512(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_zextsi256_si512 operation.

        C method prototype:
            _mm512_zextsi256_si512(__A: __m256i) -> __m512i

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpeq_epu32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_epu32_mask operation.

        C method prototype:
            _mm512_cmpeq_epu32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_epu32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_epu32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpeq_epu64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpeq_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmpeq_epu64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpeq_epu64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpeq_epu64_mask operation.

        C method prototype:
            _mm512_cmpeq_epu64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpgt_epu32_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpgt_epu32_mask operation.

        C method prototype:
            _mm512_cmpgt_epu32_mask(__A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpgt_epu32_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpgt_epu32_mask operation.

        C method prototype:
            _mm512_mask_cmpgt_epu32_mask(__U: __mmask16, __A: __m512i, __B: __m512i) -> __mmask16

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_cmpgt_epu64_mask(self, __result: Ptr, __U: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_mask_cmpgt_epu64_mask operation.

        C method prototype:
            _mm512_mask_cmpgt_epu64_mask(__U: __mmask8, __A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_cmpgt_epu64_mask(self, __result: Ptr, __A: Ptr, __B: Ptr) -> None:
        """
        Executes the _mm512_cmpgt_epu64_mask operation.

        C method prototype:
            _mm512_cmpgt_epu64_mask(__A: __m512i, __B: __m512i) -> __mmask8

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_add_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_add_epi32 operation.

        C method prototype:
            _mm512_reduce_add_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_mul_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_mul_epi32 operation.

        C method prototype:
            _mm512_reduce_mul_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_and_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_and_epi32 operation.

        C method prototype:
            _mm512_reduce_and_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_or_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_or_epi32 operation.

        C method prototype:
            _mm512_reduce_or_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_add_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_add_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_add_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_mul_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_mul_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_mul_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_and_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_and_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_and_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_or_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_or_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_or_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_min_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_epi32 operation.

        C method prototype:
            _mm512_reduce_min_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_max_epi32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_epi32 operation.

        C method prototype:
            _mm512_reduce_max_epi32(__A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_min_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_epu32 operation.

        C method prototype:
            _mm512_reduce_min_epu32(__A: __m512i) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_max_epu32(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_epu32 operation.

        C method prototype:
            _mm512_reduce_max_epu32(__A: __m512i) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_min_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_epi32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_epi32 operation.

        C method prototype:
            _mm512_mask_reduce_max_epi32(__U: __mmask16, __A: __m512i) -> int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_epu32 operation.

        C method prototype:
            _mm512_mask_reduce_min_epu32(__U: __mmask16, __A: __m512i) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_epu32(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_epu32 operation.

        C method prototype:
            _mm512_mask_reduce_max_epu32(__U: __mmask16, __A: __m512i) -> unsigned int

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_add_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_add_ps operation.

        C method prototype:
            _mm512_reduce_add_ps(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_mul_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_mul_ps operation.

        C method prototype:
            _mm512_reduce_mul_ps(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_add_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_add_ps operation.

        C method prototype:
            _mm512_mask_reduce_add_ps(__U: __mmask16, __A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_mul_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_mul_ps operation.

        C method prototype:
            _mm512_mask_reduce_mul_ps(__U: __mmask16, __A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_min_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_ps operation.

        C method prototype:
            _mm512_reduce_min_ps(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_max_ps(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_ps operation.

        C method prototype:
            _mm512_reduce_max_ps(__A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_ps operation.

        C method prototype:
            _mm512_mask_reduce_min_ps(__U: __mmask16, __A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_ps(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_ps operation.

        C method prototype:
            _mm512_mask_reduce_max_ps(__U: __mmask16, __A: __m512) -> float

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_add_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_add_epi64 operation.

        C method prototype:
            _mm512_reduce_add_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_mul_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_mul_epi64 operation.

        C method prototype:
            _mm512_reduce_mul_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_and_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_and_epi64 operation.

        C method prototype:
            _mm512_reduce_and_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_or_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_or_epi64 operation.

        C method prototype:
            _mm512_reduce_or_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_add_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_add_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_add_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_mul_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_mul_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_mul_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_and_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_and_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_and_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_or_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_or_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_or_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_min_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_epi64 operation.

        C method prototype:
            _mm512_reduce_min_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_max_epi64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_epi64 operation.

        C method prototype:
            _mm512_reduce_max_epi64(__A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_min_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_epi64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_epi64 operation.

        C method prototype:
            _mm512_mask_reduce_max_epi64(__U: __mmask8, __A: __m512i) -> long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_min_epu64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_epu64 operation.

        C method prototype:
            _mm512_reduce_min_epu64(__A: __m512i) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_max_epu64(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_epu64 operation.

        C method prototype:
            _mm512_reduce_max_epu64(__A: __m512i) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_epu64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_epu64 operation.

        C method prototype:
            _mm512_mask_reduce_min_epu64(__U: __mmask8, __A: __m512i) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_max_epu64(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_max_epu64 operation.

        C method prototype:
            _mm512_mask_reduce_max_epu64(__U: __mmask8, __A: __m512i) -> unsigned long long

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_add_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_add_pd operation.

        C method prototype:
            _mm512_reduce_add_pd(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_mul_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_mul_pd operation.

        C method prototype:
            _mm512_reduce_mul_pd(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_add_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_add_pd operation.

        C method prototype:
            _mm512_mask_reduce_add_pd(__U: __mmask8, __A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_mul_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_mul_pd operation.

        C method prototype:
            _mm512_mask_reduce_mul_pd(__U: __mmask8, __A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_min_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_min_pd operation.

        C method prototype:
            _mm512_reduce_min_pd(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_reduce_max_pd(self, __result: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_reduce_max_pd operation.

        C method prototype:
            _mm512_reduce_max_pd(__A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass
    def _mm512_mask_reduce_min_pd(self, __result: Ptr, __U: Ptr, __A: Ptr) -> None:
        """
        Executes the _mm512_mask_reduce_min_pd operation.

        C method prototype:
            _mm512_mask_reduce_min_pd(__U: __mmask8, __A: __m512d) -> double

        This method performs the corresponding AVX-512 operation. Ensure that 
        all arguments meet the required constraints as specified in the C 
        method prototype.
        """
        pass

